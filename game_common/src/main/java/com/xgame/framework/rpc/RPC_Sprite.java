/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xgame.framework.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-25")
public class RPC_Sprite implements org.apache.thrift.TBase<RPC_Sprite, RPC_Sprite._Fields>, java.io.Serializable, Cloneable, Comparable<RPC_Sprite> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RPC_Sprite");

  private static final org.apache.thrift.protocol.TField UNIQUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uniqueId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SPRITE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("spriteName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TX_FIELD_DESC = new org.apache.thrift.protocol.TField("tx", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TY_FIELD_DESC = new org.apache.thrift.protocol.TField("ty", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SPRITE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("spriteType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_SHOW_FIELD_DESC = new org.apache.thrift.protocol.TField("isShow", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField SERVER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("serverKey", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField GANG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gangId", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField USE_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("useUid", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField ATTACK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("attackTime", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RPC_SpriteStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RPC_SpriteTupleSchemeFactory());
  }

  public long uniqueId; // required
  public String spriteName; // required
  public int tx; // required
  public int ty; // required
  public int level; // required
  public int spriteType; // required
  public boolean isShow; // required
  public int serverKey; // required
  public long gangId; // required
  public long useUid; // required
  public long attackTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UNIQUE_ID((short)1, "uniqueId"),
    SPRITE_NAME((short)2, "spriteName"),
    TX((short)3, "tx"),
    TY((short)4, "ty"),
    LEVEL((short)5, "level"),
    SPRITE_TYPE((short)6, "spriteType"),
    IS_SHOW((short)7, "isShow"),
    SERVER_KEY((short)8, "serverKey"),
    GANG_ID((short)9, "gangId"),
    USE_UID((short)10, "useUid"),
    ATTACK_TIME((short)11, "attackTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UNIQUE_ID
          return UNIQUE_ID;
        case 2: // SPRITE_NAME
          return SPRITE_NAME;
        case 3: // TX
          return TX;
        case 4: // TY
          return TY;
        case 5: // LEVEL
          return LEVEL;
        case 6: // SPRITE_TYPE
          return SPRITE_TYPE;
        case 7: // IS_SHOW
          return IS_SHOW;
        case 8: // SERVER_KEY
          return SERVER_KEY;
        case 9: // GANG_ID
          return GANG_ID;
        case 10: // USE_UID
          return USE_UID;
        case 11: // ATTACK_TIME
          return ATTACK_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UNIQUEID_ISSET_ID = 0;
  private static final int __TX_ISSET_ID = 1;
  private static final int __TY_ISSET_ID = 2;
  private static final int __LEVEL_ISSET_ID = 3;
  private static final int __SPRITETYPE_ISSET_ID = 4;
  private static final int __ISSHOW_ISSET_ID = 5;
  private static final int __SERVERKEY_ISSET_ID = 6;
  private static final int __GANGID_ISSET_ID = 7;
  private static final int __USEUID_ISSET_ID = 8;
  private static final int __ATTACKTIME_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UNIQUE_ID, new org.apache.thrift.meta_data.FieldMetaData("uniqueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPRITE_NAME, new org.apache.thrift.meta_data.FieldMetaData("spriteName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TX, new org.apache.thrift.meta_data.FieldMetaData("tx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TY, new org.apache.thrift.meta_data.FieldMetaData("ty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPRITE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("spriteType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_SHOW, new org.apache.thrift.meta_data.FieldMetaData("isShow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SERVER_KEY, new org.apache.thrift.meta_data.FieldMetaData("serverKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GANG_ID, new org.apache.thrift.meta_data.FieldMetaData("gangId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USE_UID, new org.apache.thrift.meta_data.FieldMetaData("useUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ATTACK_TIME, new org.apache.thrift.meta_data.FieldMetaData("attackTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RPC_Sprite.class, metaDataMap);
  }

  public RPC_Sprite() {
  }

  public RPC_Sprite(
    long uniqueId,
    String spriteName,
    int tx,
    int ty,
    int level,
    int spriteType,
    boolean isShow,
    int serverKey,
    long gangId,
    long useUid,
    long attackTime)
  {
    this();
    this.uniqueId = uniqueId;
    setUniqueIdIsSet(true);
    this.spriteName = spriteName;
    this.tx = tx;
    setTxIsSet(true);
    this.ty = ty;
    setTyIsSet(true);
    this.level = level;
    setLevelIsSet(true);
    this.spriteType = spriteType;
    setSpriteTypeIsSet(true);
    this.isShow = isShow;
    setIsShowIsSet(true);
    this.serverKey = serverKey;
    setServerKeyIsSet(true);
    this.gangId = gangId;
    setGangIdIsSet(true);
    this.useUid = useUid;
    setUseUidIsSet(true);
    this.attackTime = attackTime;
    setAttackTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RPC_Sprite(RPC_Sprite other) {
    __isset_bitfield = other.__isset_bitfield;
    this.uniqueId = other.uniqueId;
    if (other.isSetSpriteName()) {
      this.spriteName = other.spriteName;
    }
    this.tx = other.tx;
    this.ty = other.ty;
    this.level = other.level;
    this.spriteType = other.spriteType;
    this.isShow = other.isShow;
    this.serverKey = other.serverKey;
    this.gangId = other.gangId;
    this.useUid = other.useUid;
    this.attackTime = other.attackTime;
  }

  public RPC_Sprite deepCopy() {
    return new RPC_Sprite(this);
  }

  @Override
  public void clear() {
    setUniqueIdIsSet(false);
    this.uniqueId = 0;
    this.spriteName = null;
    setTxIsSet(false);
    this.tx = 0;
    setTyIsSet(false);
    this.ty = 0;
    setLevelIsSet(false);
    this.level = 0;
    setSpriteTypeIsSet(false);
    this.spriteType = 0;
    setIsShowIsSet(false);
    this.isShow = false;
    setServerKeyIsSet(false);
    this.serverKey = 0;
    setGangIdIsSet(false);
    this.gangId = 0;
    setUseUidIsSet(false);
    this.useUid = 0;
    setAttackTimeIsSet(false);
    this.attackTime = 0;
  }

  public long getUniqueId() {
    return this.uniqueId;
  }

  public RPC_Sprite setUniqueId(long uniqueId) {
    this.uniqueId = uniqueId;
    setUniqueIdIsSet(true);
    return this;
  }

  public void unsetUniqueId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNIQUEID_ISSET_ID);
  }

  /** Returns true if field uniqueId is set (has been assigned a value) and false otherwise */
  public boolean isSetUniqueId() {
    return EncodingUtils.testBit(__isset_bitfield, __UNIQUEID_ISSET_ID);
  }

  public void setUniqueIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNIQUEID_ISSET_ID, value);
  }

  public String getSpriteName() {
    return this.spriteName;
  }

  public RPC_Sprite setSpriteName(String spriteName) {
    this.spriteName = spriteName;
    return this;
  }

  public void unsetSpriteName() {
    this.spriteName = null;
  }

  /** Returns true if field spriteName is set (has been assigned a value) and false otherwise */
  public boolean isSetSpriteName() {
    return this.spriteName != null;
  }

  public void setSpriteNameIsSet(boolean value) {
    if (!value) {
      this.spriteName = null;
    }
  }

  public int getTx() {
    return this.tx;
  }

  public RPC_Sprite setTx(int tx) {
    this.tx = tx;
    setTxIsSet(true);
    return this;
  }

  public void unsetTx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TX_ISSET_ID);
  }

  /** Returns true if field tx is set (has been assigned a value) and false otherwise */
  public boolean isSetTx() {
    return EncodingUtils.testBit(__isset_bitfield, __TX_ISSET_ID);
  }

  public void setTxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TX_ISSET_ID, value);
  }

  public int getTy() {
    return this.ty;
  }

  public RPC_Sprite setTy(int ty) {
    this.ty = ty;
    setTyIsSet(true);
    return this;
  }

  public void unsetTy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TY_ISSET_ID);
  }

  /** Returns true if field ty is set (has been assigned a value) and false otherwise */
  public boolean isSetTy() {
    return EncodingUtils.testBit(__isset_bitfield, __TY_ISSET_ID);
  }

  public void setTyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TY_ISSET_ID, value);
  }

  public int getLevel() {
    return this.level;
  }

  public RPC_Sprite setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public int getSpriteType() {
    return this.spriteType;
  }

  public RPC_Sprite setSpriteType(int spriteType) {
    this.spriteType = spriteType;
    setSpriteTypeIsSet(true);
    return this;
  }

  public void unsetSpriteType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPRITETYPE_ISSET_ID);
  }

  /** Returns true if field spriteType is set (has been assigned a value) and false otherwise */
  public boolean isSetSpriteType() {
    return EncodingUtils.testBit(__isset_bitfield, __SPRITETYPE_ISSET_ID);
  }

  public void setSpriteTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPRITETYPE_ISSET_ID, value);
  }

  public boolean isIsShow() {
    return this.isShow;
  }

  public RPC_Sprite setIsShow(boolean isShow) {
    this.isShow = isShow;
    setIsShowIsSet(true);
    return this;
  }

  public void unsetIsShow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSHOW_ISSET_ID);
  }

  /** Returns true if field isShow is set (has been assigned a value) and false otherwise */
  public boolean isSetIsShow() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSHOW_ISSET_ID);
  }

  public void setIsShowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSHOW_ISSET_ID, value);
  }

  public int getServerKey() {
    return this.serverKey;
  }

  public RPC_Sprite setServerKey(int serverKey) {
    this.serverKey = serverKey;
    setServerKeyIsSet(true);
    return this;
  }

  public void unsetServerKey() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERKEY_ISSET_ID);
  }

  /** Returns true if field serverKey is set (has been assigned a value) and false otherwise */
  public boolean isSetServerKey() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVERKEY_ISSET_ID);
  }

  public void setServerKeyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERKEY_ISSET_ID, value);
  }

  public long getGangId() {
    return this.gangId;
  }

  public RPC_Sprite setGangId(long gangId) {
    this.gangId = gangId;
    setGangIdIsSet(true);
    return this;
  }

  public void unsetGangId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GANGID_ISSET_ID);
  }

  /** Returns true if field gangId is set (has been assigned a value) and false otherwise */
  public boolean isSetGangId() {
    return EncodingUtils.testBit(__isset_bitfield, __GANGID_ISSET_ID);
  }

  public void setGangIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GANGID_ISSET_ID, value);
  }

  public long getUseUid() {
    return this.useUid;
  }

  public RPC_Sprite setUseUid(long useUid) {
    this.useUid = useUid;
    setUseUidIsSet(true);
    return this;
  }

  public void unsetUseUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEUID_ISSET_ID);
  }

  /** Returns true if field useUid is set (has been assigned a value) and false otherwise */
  public boolean isSetUseUid() {
    return EncodingUtils.testBit(__isset_bitfield, __USEUID_ISSET_ID);
  }

  public void setUseUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEUID_ISSET_ID, value);
  }

  public long getAttackTime() {
    return this.attackTime;
  }

  public RPC_Sprite setAttackTime(long attackTime) {
    this.attackTime = attackTime;
    setAttackTimeIsSet(true);
    return this;
  }

  public void unsetAttackTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTACKTIME_ISSET_ID);
  }

  /** Returns true if field attackTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAttackTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ATTACKTIME_ISSET_ID);
  }

  public void setAttackTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTACKTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UNIQUE_ID:
      if (value == null) {
        unsetUniqueId();
      } else {
        setUniqueId((Long)value);
      }
      break;

    case SPRITE_NAME:
      if (value == null) {
        unsetSpriteName();
      } else {
        setSpriteName((String)value);
      }
      break;

    case TX:
      if (value == null) {
        unsetTx();
      } else {
        setTx((Integer)value);
      }
      break;

    case TY:
      if (value == null) {
        unsetTy();
      } else {
        setTy((Integer)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case SPRITE_TYPE:
      if (value == null) {
        unsetSpriteType();
      } else {
        setSpriteType((Integer)value);
      }
      break;

    case IS_SHOW:
      if (value == null) {
        unsetIsShow();
      } else {
        setIsShow((Boolean)value);
      }
      break;

    case SERVER_KEY:
      if (value == null) {
        unsetServerKey();
      } else {
        setServerKey((Integer)value);
      }
      break;

    case GANG_ID:
      if (value == null) {
        unsetGangId();
      } else {
        setGangId((Long)value);
      }
      break;

    case USE_UID:
      if (value == null) {
        unsetUseUid();
      } else {
        setUseUid((Long)value);
      }
      break;

    case ATTACK_TIME:
      if (value == null) {
        unsetAttackTime();
      } else {
        setAttackTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UNIQUE_ID:
      return getUniqueId();

    case SPRITE_NAME:
      return getSpriteName();

    case TX:
      return getTx();

    case TY:
      return getTy();

    case LEVEL:
      return getLevel();

    case SPRITE_TYPE:
      return getSpriteType();

    case IS_SHOW:
      return isIsShow();

    case SERVER_KEY:
      return getServerKey();

    case GANG_ID:
      return getGangId();

    case USE_UID:
      return getUseUid();

    case ATTACK_TIME:
      return getAttackTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UNIQUE_ID:
      return isSetUniqueId();
    case SPRITE_NAME:
      return isSetSpriteName();
    case TX:
      return isSetTx();
    case TY:
      return isSetTy();
    case LEVEL:
      return isSetLevel();
    case SPRITE_TYPE:
      return isSetSpriteType();
    case IS_SHOW:
      return isSetIsShow();
    case SERVER_KEY:
      return isSetServerKey();
    case GANG_ID:
      return isSetGangId();
    case USE_UID:
      return isSetUseUid();
    case ATTACK_TIME:
      return isSetAttackTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RPC_Sprite)
      return this.equals((RPC_Sprite)that);
    return false;
  }

  public boolean equals(RPC_Sprite that) {
    if (that == null)
      return false;

    boolean this_present_uniqueId = true;
    boolean that_present_uniqueId = true;
    if (this_present_uniqueId || that_present_uniqueId) {
      if (!(this_present_uniqueId && that_present_uniqueId))
        return false;
      if (this.uniqueId != that.uniqueId)
        return false;
    }

    boolean this_present_spriteName = true && this.isSetSpriteName();
    boolean that_present_spriteName = true && that.isSetSpriteName();
    if (this_present_spriteName || that_present_spriteName) {
      if (!(this_present_spriteName && that_present_spriteName))
        return false;
      if (!this.spriteName.equals(that.spriteName))
        return false;
    }

    boolean this_present_tx = true;
    boolean that_present_tx = true;
    if (this_present_tx || that_present_tx) {
      if (!(this_present_tx && that_present_tx))
        return false;
      if (this.tx != that.tx)
        return false;
    }

    boolean this_present_ty = true;
    boolean that_present_ty = true;
    if (this_present_ty || that_present_ty) {
      if (!(this_present_ty && that_present_ty))
        return false;
      if (this.ty != that.ty)
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_spriteType = true;
    boolean that_present_spriteType = true;
    if (this_present_spriteType || that_present_spriteType) {
      if (!(this_present_spriteType && that_present_spriteType))
        return false;
      if (this.spriteType != that.spriteType)
        return false;
    }

    boolean this_present_isShow = true;
    boolean that_present_isShow = true;
    if (this_present_isShow || that_present_isShow) {
      if (!(this_present_isShow && that_present_isShow))
        return false;
      if (this.isShow != that.isShow)
        return false;
    }

    boolean this_present_serverKey = true;
    boolean that_present_serverKey = true;
    if (this_present_serverKey || that_present_serverKey) {
      if (!(this_present_serverKey && that_present_serverKey))
        return false;
      if (this.serverKey != that.serverKey)
        return false;
    }

    boolean this_present_gangId = true;
    boolean that_present_gangId = true;
    if (this_present_gangId || that_present_gangId) {
      if (!(this_present_gangId && that_present_gangId))
        return false;
      if (this.gangId != that.gangId)
        return false;
    }

    boolean this_present_useUid = true;
    boolean that_present_useUid = true;
    if (this_present_useUid || that_present_useUid) {
      if (!(this_present_useUid && that_present_useUid))
        return false;
      if (this.useUid != that.useUid)
        return false;
    }

    boolean this_present_attackTime = true;
    boolean that_present_attackTime = true;
    if (this_present_attackTime || that_present_attackTime) {
      if (!(this_present_attackTime && that_present_attackTime))
        return false;
      if (this.attackTime != that.attackTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uniqueId = true;
    list.add(present_uniqueId);
    if (present_uniqueId)
      list.add(uniqueId);

    boolean present_spriteName = true && (isSetSpriteName());
    list.add(present_spriteName);
    if (present_spriteName)
      list.add(spriteName);

    boolean present_tx = true;
    list.add(present_tx);
    if (present_tx)
      list.add(tx);

    boolean present_ty = true;
    list.add(present_ty);
    if (present_ty)
      list.add(ty);

    boolean present_level = true;
    list.add(present_level);
    if (present_level)
      list.add(level);

    boolean present_spriteType = true;
    list.add(present_spriteType);
    if (present_spriteType)
      list.add(spriteType);

    boolean present_isShow = true;
    list.add(present_isShow);
    if (present_isShow)
      list.add(isShow);

    boolean present_serverKey = true;
    list.add(present_serverKey);
    if (present_serverKey)
      list.add(serverKey);

    boolean present_gangId = true;
    list.add(present_gangId);
    if (present_gangId)
      list.add(gangId);

    boolean present_useUid = true;
    list.add(present_useUid);
    if (present_useUid)
      list.add(useUid);

    boolean present_attackTime = true;
    list.add(present_attackTime);
    if (present_attackTime)
      list.add(attackTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(RPC_Sprite other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUniqueId()).compareTo(other.isSetUniqueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUniqueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniqueId, other.uniqueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpriteName()).compareTo(other.isSetSpriteName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpriteName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spriteName, other.spriteName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTx()).compareTo(other.isSetTx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tx, other.tx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTy()).compareTo(other.isSetTy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ty, other.ty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpriteType()).compareTo(other.isSetSpriteType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpriteType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spriteType, other.spriteType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsShow()).compareTo(other.isSetIsShow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsShow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isShow, other.isShow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerKey()).compareTo(other.isSetServerKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverKey, other.serverKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGangId()).compareTo(other.isSetGangId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGangId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gangId, other.gangId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseUid()).compareTo(other.isSetUseUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useUid, other.useUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttackTime()).compareTo(other.isSetAttackTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttackTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attackTime, other.attackTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RPC_Sprite(");
    boolean first = true;

    sb.append("uniqueId:");
    sb.append(this.uniqueId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spriteName:");
    if (this.spriteName == null) {
      sb.append("null");
    } else {
      sb.append(this.spriteName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tx:");
    sb.append(this.tx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ty:");
    sb.append(this.ty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spriteType:");
    sb.append(this.spriteType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isShow:");
    sb.append(this.isShow);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverKey:");
    sb.append(this.serverKey);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gangId:");
    sb.append(this.gangId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("useUid:");
    sb.append(this.useUid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("attackTime:");
    sb.append(this.attackTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RPC_SpriteStandardSchemeFactory implements SchemeFactory {
    public RPC_SpriteStandardScheme getScheme() {
      return new RPC_SpriteStandardScheme();
    }
  }

  private static class RPC_SpriteStandardScheme extends StandardScheme<RPC_Sprite> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RPC_Sprite struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UNIQUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uniqueId = iprot.readI64();
              struct.setUniqueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPRITE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spriteName = iprot.readString();
              struct.setSpriteNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tx = iprot.readI32();
              struct.setTxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ty = iprot.readI32();
              struct.setTyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SPRITE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spriteType = iprot.readI32();
              struct.setSpriteTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_SHOW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isShow = iprot.readBool();
              struct.setIsShowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SERVER_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serverKey = iprot.readI32();
              struct.setServerKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GANG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gangId = iprot.readI64();
              struct.setGangIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USE_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.useUid = iprot.readI64();
              struct.setUseUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ATTACK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.attackTime = iprot.readI64();
              struct.setAttackTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RPC_Sprite struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UNIQUE_ID_FIELD_DESC);
      oprot.writeI64(struct.uniqueId);
      oprot.writeFieldEnd();
      if (struct.spriteName != null) {
        oprot.writeFieldBegin(SPRITE_NAME_FIELD_DESC);
        oprot.writeString(struct.spriteName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TX_FIELD_DESC);
      oprot.writeI32(struct.tx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TY_FIELD_DESC);
      oprot.writeI32(struct.ty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPRITE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.spriteType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SHOW_FIELD_DESC);
      oprot.writeBool(struct.isShow);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVER_KEY_FIELD_DESC);
      oprot.writeI32(struct.serverKey);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GANG_ID_FIELD_DESC);
      oprot.writeI64(struct.gangId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USE_UID_FIELD_DESC);
      oprot.writeI64(struct.useUid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ATTACK_TIME_FIELD_DESC);
      oprot.writeI64(struct.attackTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RPC_SpriteTupleSchemeFactory implements SchemeFactory {
    public RPC_SpriteTupleScheme getScheme() {
      return new RPC_SpriteTupleScheme();
    }
  }

  private static class RPC_SpriteTupleScheme extends TupleScheme<RPC_Sprite> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RPC_Sprite struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUniqueId()) {
        optionals.set(0);
      }
      if (struct.isSetSpriteName()) {
        optionals.set(1);
      }
      if (struct.isSetTx()) {
        optionals.set(2);
      }
      if (struct.isSetTy()) {
        optionals.set(3);
      }
      if (struct.isSetLevel()) {
        optionals.set(4);
      }
      if (struct.isSetSpriteType()) {
        optionals.set(5);
      }
      if (struct.isSetIsShow()) {
        optionals.set(6);
      }
      if (struct.isSetServerKey()) {
        optionals.set(7);
      }
      if (struct.isSetGangId()) {
        optionals.set(8);
      }
      if (struct.isSetUseUid()) {
        optionals.set(9);
      }
      if (struct.isSetAttackTime()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetUniqueId()) {
        oprot.writeI64(struct.uniqueId);
      }
      if (struct.isSetSpriteName()) {
        oprot.writeString(struct.spriteName);
      }
      if (struct.isSetTx()) {
        oprot.writeI32(struct.tx);
      }
      if (struct.isSetTy()) {
        oprot.writeI32(struct.ty);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetSpriteType()) {
        oprot.writeI32(struct.spriteType);
      }
      if (struct.isSetIsShow()) {
        oprot.writeBool(struct.isShow);
      }
      if (struct.isSetServerKey()) {
        oprot.writeI32(struct.serverKey);
      }
      if (struct.isSetGangId()) {
        oprot.writeI64(struct.gangId);
      }
      if (struct.isSetUseUid()) {
        oprot.writeI64(struct.useUid);
      }
      if (struct.isSetAttackTime()) {
        oprot.writeI64(struct.attackTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RPC_Sprite struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.uniqueId = iprot.readI64();
        struct.setUniqueIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.spriteName = iprot.readString();
        struct.setSpriteNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tx = iprot.readI32();
        struct.setTxIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ty = iprot.readI32();
        struct.setTyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.spriteType = iprot.readI32();
        struct.setSpriteTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isShow = iprot.readBool();
        struct.setIsShowIsSet(true);
      }
      if (incoming.get(7)) {
        struct.serverKey = iprot.readI32();
        struct.setServerKeyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.gangId = iprot.readI64();
        struct.setGangIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.useUid = iprot.readI64();
        struct.setUseUidIsSet(true);
      }
      if (incoming.get(10)) {
        struct.attackTime = iprot.readI64();
        struct.setAttackTimeIsSet(true);
      }
    }
  }

}

