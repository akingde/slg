/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xgame.framework.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-22")
public class W2L_TaskRunData implements org.apache.thrift.TBase<W2L_TaskRunData, W2L_TaskRunData._Fields>, java.io.Serializable, Cloneable, Comparable<W2L_TaskRunData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("W2L_TaskRunData");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("taskTime", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TRIGGER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerTime", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField E_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("eType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField QUEUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("queueId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new W2L_TaskRunDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new W2L_TaskRunDataTupleSchemeFactory());
  }

  public long taskId; // required
  public int taskTime; // required
  public int triggerTime; // required
  public int startTime; // required
  public int eType; // required
  public int queueId; // required
  public long roleId; // required
  public int count; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskId"),
    TASK_TIME((short)2, "taskTime"),
    TRIGGER_TIME((short)3, "triggerTime"),
    START_TIME((short)4, "startTime"),
    E_TYPE((short)5, "eType"),
    QUEUE_ID((short)6, "queueId"),
    ROLE_ID((short)7, "roleId"),
    COUNT((short)8, "count");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // TASK_TIME
          return TASK_TIME;
        case 3: // TRIGGER_TIME
          return TRIGGER_TIME;
        case 4: // START_TIME
          return START_TIME;
        case 5: // E_TYPE
          return E_TYPE;
        case 6: // QUEUE_ID
          return QUEUE_ID;
        case 7: // ROLE_ID
          return ROLE_ID;
        case 8: // COUNT
          return COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASKID_ISSET_ID = 0;
  private static final int __TASKTIME_ISSET_ID = 1;
  private static final int __TRIGGERTIME_ISSET_ID = 2;
  private static final int __STARTTIME_ISSET_ID = 3;
  private static final int __ETYPE_ISSET_ID = 4;
  private static final int __QUEUEID_ISSET_ID = 5;
  private static final int __ROLEID_ISSET_ID = 6;
  private static final int __COUNT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TASK_TIME, new org.apache.thrift.meta_data.FieldMetaData("taskTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRIGGER_TIME, new org.apache.thrift.meta_data.FieldMetaData("triggerTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.E_TYPE, new org.apache.thrift.meta_data.FieldMetaData("eType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUEUE_ID, new org.apache.thrift.meta_data.FieldMetaData("queueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(W2L_TaskRunData.class, metaDataMap);
  }

  public W2L_TaskRunData() {
  }

  public W2L_TaskRunData(
    long taskId,
    int taskTime,
    int triggerTime,
    int startTime,
    int eType,
    int queueId,
    long roleId,
    int count)
  {
    this();
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.taskTime = taskTime;
    setTaskTimeIsSet(true);
    this.triggerTime = triggerTime;
    setTriggerTimeIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.eType = eType;
    setETypeIsSet(true);
    this.queueId = queueId;
    setQueueIdIsSet(true);
    this.roleId = roleId;
    setRoleIdIsSet(true);
    this.count = count;
    setCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public W2L_TaskRunData(W2L_TaskRunData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.taskId = other.taskId;
    this.taskTime = other.taskTime;
    this.triggerTime = other.triggerTime;
    this.startTime = other.startTime;
    this.eType = other.eType;
    this.queueId = other.queueId;
    this.roleId = other.roleId;
    this.count = other.count;
  }

  public W2L_TaskRunData deepCopy() {
    return new W2L_TaskRunData(this);
  }

  @Override
  public void clear() {
    setTaskIdIsSet(false);
    this.taskId = 0;
    setTaskTimeIsSet(false);
    this.taskTime = 0;
    setTriggerTimeIsSet(false);
    this.triggerTime = 0;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setETypeIsSet(false);
    this.eType = 0;
    setQueueIdIsSet(false);
    this.queueId = 0;
    setRoleIdIsSet(false);
    this.roleId = 0;
    setCountIsSet(false);
    this.count = 0;
  }

  public long getTaskId() {
    return this.taskId;
  }

  public W2L_TaskRunData setTaskId(long taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public int getTaskTime() {
    return this.taskTime;
  }

  public W2L_TaskRunData setTaskTime(int taskTime) {
    this.taskTime = taskTime;
    setTaskTimeIsSet(true);
    return this;
  }

  public void unsetTaskTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKTIME_ISSET_ID);
  }

  /** Returns true if field taskTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKTIME_ISSET_ID);
  }

  public void setTaskTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKTIME_ISSET_ID, value);
  }

  public int getTriggerTime() {
    return this.triggerTime;
  }

  public W2L_TaskRunData setTriggerTime(int triggerTime) {
    this.triggerTime = triggerTime;
    setTriggerTimeIsSet(true);
    return this;
  }

  public void unsetTriggerTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRIGGERTIME_ISSET_ID);
  }

  /** Returns true if field triggerTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggerTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TRIGGERTIME_ISSET_ID);
  }

  public void setTriggerTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRIGGERTIME_ISSET_ID, value);
  }

  public int getStartTime() {
    return this.startTime;
  }

  public W2L_TaskRunData setStartTime(int startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public int getEType() {
    return this.eType;
  }

  public W2L_TaskRunData setEType(int eType) {
    this.eType = eType;
    setETypeIsSet(true);
    return this;
  }

  public void unsetEType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ETYPE_ISSET_ID);
  }

  /** Returns true if field eType is set (has been assigned a value) and false otherwise */
  public boolean isSetEType() {
    return EncodingUtils.testBit(__isset_bitfield, __ETYPE_ISSET_ID);
  }

  public void setETypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ETYPE_ISSET_ID, value);
  }

  public int getQueueId() {
    return this.queueId;
  }

  public W2L_TaskRunData setQueueId(int queueId) {
    this.queueId = queueId;
    setQueueIdIsSet(true);
    return this;
  }

  public void unsetQueueId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUEUEID_ISSET_ID);
  }

  /** Returns true if field queueId is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueId() {
    return EncodingUtils.testBit(__isset_bitfield, __QUEUEID_ISSET_ID);
  }

  public void setQueueIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUEUEID_ISSET_ID, value);
  }

  public long getRoleId() {
    return this.roleId;
  }

  public W2L_TaskRunData setRoleId(long roleId) {
    this.roleId = roleId;
    setRoleIdIsSet(true);
    return this;
  }

  public void unsetRoleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLEID_ISSET_ID);
  }

  /** Returns true if field roleId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoleId() {
    return EncodingUtils.testBit(__isset_bitfield, __ROLEID_ISSET_ID);
  }

  public void setRoleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLEID_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public W2L_TaskRunData setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Long)value);
      }
      break;

    case TASK_TIME:
      if (value == null) {
        unsetTaskTime();
      } else {
        setTaskTime((Integer)value);
      }
      break;

    case TRIGGER_TIME:
      if (value == null) {
        unsetTriggerTime();
      } else {
        setTriggerTime((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Integer)value);
      }
      break;

    case E_TYPE:
      if (value == null) {
        unsetEType();
      } else {
        setEType((Integer)value);
      }
      break;

    case QUEUE_ID:
      if (value == null) {
        unsetQueueId();
      } else {
        setQueueId((Integer)value);
      }
      break;

    case ROLE_ID:
      if (value == null) {
        unsetRoleId();
      } else {
        setRoleId((Long)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return getTaskId();

    case TASK_TIME:
      return getTaskTime();

    case TRIGGER_TIME:
      return getTriggerTime();

    case START_TIME:
      return getStartTime();

    case E_TYPE:
      return getEType();

    case QUEUE_ID:
      return getQueueId();

    case ROLE_ID:
      return getRoleId();

    case COUNT:
      return getCount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskId();
    case TASK_TIME:
      return isSetTaskTime();
    case TRIGGER_TIME:
      return isSetTriggerTime();
    case START_TIME:
      return isSetStartTime();
    case E_TYPE:
      return isSetEType();
    case QUEUE_ID:
      return isSetQueueId();
    case ROLE_ID:
      return isSetRoleId();
    case COUNT:
      return isSetCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof W2L_TaskRunData)
      return this.equals((W2L_TaskRunData)that);
    return false;
  }

  public boolean equals(W2L_TaskRunData that) {
    if (that == null)
      return false;

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_taskTime = true;
    boolean that_present_taskTime = true;
    if (this_present_taskTime || that_present_taskTime) {
      if (!(this_present_taskTime && that_present_taskTime))
        return false;
      if (this.taskTime != that.taskTime)
        return false;
    }

    boolean this_present_triggerTime = true;
    boolean that_present_triggerTime = true;
    if (this_present_triggerTime || that_present_triggerTime) {
      if (!(this_present_triggerTime && that_present_triggerTime))
        return false;
      if (this.triggerTime != that.triggerTime)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_eType = true;
    boolean that_present_eType = true;
    if (this_present_eType || that_present_eType) {
      if (!(this_present_eType && that_present_eType))
        return false;
      if (this.eType != that.eType)
        return false;
    }

    boolean this_present_queueId = true;
    boolean that_present_queueId = true;
    if (this_present_queueId || that_present_queueId) {
      if (!(this_present_queueId && that_present_queueId))
        return false;
      if (this.queueId != that.queueId)
        return false;
    }

    boolean this_present_roleId = true;
    boolean that_present_roleId = true;
    if (this_present_roleId || that_present_roleId) {
      if (!(this_present_roleId && that_present_roleId))
        return false;
      if (this.roleId != that.roleId)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_taskId = true;
    list.add(present_taskId);
    if (present_taskId)
      list.add(taskId);

    boolean present_taskTime = true;
    list.add(present_taskTime);
    if (present_taskTime)
      list.add(taskTime);

    boolean present_triggerTime = true;
    list.add(present_triggerTime);
    if (present_triggerTime)
      list.add(triggerTime);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_eType = true;
    list.add(present_eType);
    if (present_eType)
      list.add(eType);

    boolean present_queueId = true;
    list.add(present_queueId);
    if (present_queueId)
      list.add(queueId);

    boolean present_roleId = true;
    list.add(present_roleId);
    if (present_roleId)
      list.add(roleId);

    boolean present_count = true;
    list.add(present_count);
    if (present_count)
      list.add(count);

    return list.hashCode();
  }

  @Override
  public int compareTo(W2L_TaskRunData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskTime()).compareTo(other.isSetTaskTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskTime, other.taskTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggerTime()).compareTo(other.isSetTriggerTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggerTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerTime, other.triggerTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEType()).compareTo(other.isSetEType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eType, other.eType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueId()).compareTo(other.isSetQueueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueId, other.queueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoleId()).compareTo(other.isSetRoleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleId, other.roleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("W2L_TaskRunData(");
    boolean first = true;

    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskTime:");
    sb.append(this.taskTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("triggerTime:");
    sb.append(this.triggerTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eType:");
    sb.append(this.eType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueId:");
    sb.append(this.queueId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("roleId:");
    sb.append(this.roleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class W2L_TaskRunDataStandardSchemeFactory implements SchemeFactory {
    public W2L_TaskRunDataStandardScheme getScheme() {
      return new W2L_TaskRunDataStandardScheme();
    }
  }

  private static class W2L_TaskRunDataStandardScheme extends StandardScheme<W2L_TaskRunData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, W2L_TaskRunData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.taskId = iprot.readI64();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskTime = iprot.readI32();
              struct.setTaskTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRIGGER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.triggerTime = iprot.readI32();
              struct.setTriggerTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startTime = iprot.readI32();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // E_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eType = iprot.readI32();
              struct.setETypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QUEUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queueId = iprot.readI32();
              struct.setQueueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.roleId = iprot.readI64();
              struct.setRoleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, W2L_TaskRunData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI64(struct.taskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TASK_TIME_FIELD_DESC);
      oprot.writeI32(struct.taskTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRIGGER_TIME_FIELD_DESC);
      oprot.writeI32(struct.triggerTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI32(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(E_TYPE_FIELD_DESC);
      oprot.writeI32(struct.eType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUEUE_ID_FIELD_DESC);
      oprot.writeI32(struct.queueId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
      oprot.writeI64(struct.roleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class W2L_TaskRunDataTupleSchemeFactory implements SchemeFactory {
    public W2L_TaskRunDataTupleScheme getScheme() {
      return new W2L_TaskRunDataTupleScheme();
    }
  }

  private static class W2L_TaskRunDataTupleScheme extends TupleScheme<W2L_TaskRunData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, W2L_TaskRunData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTaskId()) {
        optionals.set(0);
      }
      if (struct.isSetTaskTime()) {
        optionals.set(1);
      }
      if (struct.isSetTriggerTime()) {
        optionals.set(2);
      }
      if (struct.isSetStartTime()) {
        optionals.set(3);
      }
      if (struct.isSetEType()) {
        optionals.set(4);
      }
      if (struct.isSetQueueId()) {
        optionals.set(5);
      }
      if (struct.isSetRoleId()) {
        optionals.set(6);
      }
      if (struct.isSetCount()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetTaskId()) {
        oprot.writeI64(struct.taskId);
      }
      if (struct.isSetTaskTime()) {
        oprot.writeI32(struct.taskTime);
      }
      if (struct.isSetTriggerTime()) {
        oprot.writeI32(struct.triggerTime);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI32(struct.startTime);
      }
      if (struct.isSetEType()) {
        oprot.writeI32(struct.eType);
      }
      if (struct.isSetQueueId()) {
        oprot.writeI32(struct.queueId);
      }
      if (struct.isSetRoleId()) {
        oprot.writeI64(struct.roleId);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, W2L_TaskRunData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.taskId = iprot.readI64();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.taskTime = iprot.readI32();
        struct.setTaskTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.triggerTime = iprot.readI32();
        struct.setTriggerTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startTime = iprot.readI32();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.eType = iprot.readI32();
        struct.setETypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.queueId = iprot.readI32();
        struct.setQueueIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.roleId = iprot.readI64();
        struct.setRoleIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
    }
  }

}

