/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xgame.framework.rpc;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-25")
public class WorldServerService {

  public interface Iface {

    public void regiest(String ip, int port, int callPort, int group, int serverKey) throws org.apache.thrift.TException;

    public void logicInitSuccess(int serverKey) throws org.apache.thrift.TException;

    public RPC_PhysicalServerInfo getPhysicalServer(int group, long roleid) throws org.apache.thrift.TException;

    public RPC_Position loginWorld(RPC_LoginRole roleinfo, int serverKey) throws org.apache.thrift.TException;

    public void removeSprite(long spriteId) throws org.apache.thrift.TException;

    public long addTimerTask(RPC_TaskRunData taskData) throws org.apache.thrift.TException;

    public boolean resetTimerTask(RPC_UpdateTime taskData) throws org.apache.thrift.TException;

    public boolean removeTimerTask(long id) throws org.apache.thrift.TException;

    public RPC_ViewSprites requestViewSprites(int tx, int ty) throws org.apache.thrift.TException;

    public L2WResourceSimpleSprite reqSpritSimpleInfo(long uid) throws org.apache.thrift.TException;

    public void updateSpriteInfo(RPC_Sprite sprite) throws org.apache.thrift.TException;

    public void updateSpritePosition(long spriteid, int newX, int newY, int oldX, int oldY) throws org.apache.thrift.TException;

    public void playerExit(long roleid, int newServerKey) throws org.apache.thrift.TException;

    public void playerExitSuccess(long roleid, int newServerKey) throws org.apache.thrift.TException;

    public void offlineRole(long roleId, long sessionid, String gateKey) throws org.apache.thrift.TException;

    public void offlineAllRole() throws org.apache.thrift.TException;

    public void requestSpriteDetail(long spriteid, long requestRoleid, int serverKey) throws org.apache.thrift.TException;

    public L2WResourceSimpleSprite reqResourceSimpleInfo(long spriteid) throws org.apache.thrift.TException;

    public void resolveConflictResule(L2WConflictResult l2wConflictResult) throws org.apache.thrift.TException;

    public String getTroopInfo(long spriteid) throws org.apache.thrift.TException;

    public void updateSprite(RPC_Sprite sprite) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void regiest(String ip, int port, int callPort, int group, int serverKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void logicInitSuccess(int serverKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPhysicalServer(int group, long roleid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loginWorld(RPC_LoginRole roleinfo, int serverKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeSprite(long spriteId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addTimerTask(RPC_TaskRunData taskData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resetTimerTask(RPC_UpdateTime taskData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeTimerTask(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void requestViewSprites(int tx, int ty, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqSpritSimpleInfo(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSpriteInfo(RPC_Sprite sprite, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSpritePosition(long spriteid, int newX, int newY, int oldX, int oldY, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void playerExit(long roleid, int newServerKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void playerExitSuccess(long roleid, int newServerKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void offlineRole(long roleId, long sessionid, String gateKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void offlineAllRole(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void requestSpriteDetail(long spriteid, long requestRoleid, int serverKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqResourceSimpleInfo(long spriteid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resolveConflictResule(L2WConflictResult l2wConflictResult, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTroopInfo(long spriteid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSprite(RPC_Sprite sprite, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void regiest(String ip, int port, int callPort, int group, int serverKey) throws org.apache.thrift.TException
    {
      send_regiest(ip, port, callPort, group, serverKey);
      recv_regiest();
    }

    public void send_regiest(String ip, int port, int callPort, int group, int serverKey) throws org.apache.thrift.TException
    {
      regiest_args args = new regiest_args();
      args.setIp(ip);
      args.setPort(port);
      args.setCallPort(callPort);
      args.setGroup(group);
      args.setServerKey(serverKey);
      sendBase("regiest", args);
    }

    public void recv_regiest() throws org.apache.thrift.TException
    {
      regiest_result result = new regiest_result();
      receiveBase(result, "regiest");
      return;
    }

    public void logicInitSuccess(int serverKey) throws org.apache.thrift.TException
    {
      send_logicInitSuccess(serverKey);
      recv_logicInitSuccess();
    }

    public void send_logicInitSuccess(int serverKey) throws org.apache.thrift.TException
    {
      logicInitSuccess_args args = new logicInitSuccess_args();
      args.setServerKey(serverKey);
      sendBase("logicInitSuccess", args);
    }

    public void recv_logicInitSuccess() throws org.apache.thrift.TException
    {
      logicInitSuccess_result result = new logicInitSuccess_result();
      receiveBase(result, "logicInitSuccess");
      return;
    }

    public RPC_PhysicalServerInfo getPhysicalServer(int group, long roleid) throws org.apache.thrift.TException
    {
      send_getPhysicalServer(group, roleid);
      return recv_getPhysicalServer();
    }

    public void send_getPhysicalServer(int group, long roleid) throws org.apache.thrift.TException
    {
      getPhysicalServer_args args = new getPhysicalServer_args();
      args.setGroup(group);
      args.setRoleid(roleid);
      sendBase("getPhysicalServer", args);
    }

    public RPC_PhysicalServerInfo recv_getPhysicalServer() throws org.apache.thrift.TException
    {
      getPhysicalServer_result result = new getPhysicalServer_result();
      receiveBase(result, "getPhysicalServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPhysicalServer failed: unknown result");
    }

    public RPC_Position loginWorld(RPC_LoginRole roleinfo, int serverKey) throws org.apache.thrift.TException
    {
      send_loginWorld(roleinfo, serverKey);
      return recv_loginWorld();
    }

    public void send_loginWorld(RPC_LoginRole roleinfo, int serverKey) throws org.apache.thrift.TException
    {
      loginWorld_args args = new loginWorld_args();
      args.setRoleinfo(roleinfo);
      args.setServerKey(serverKey);
      sendBase("loginWorld", args);
    }

    public RPC_Position recv_loginWorld() throws org.apache.thrift.TException
    {
      loginWorld_result result = new loginWorld_result();
      receiveBase(result, "loginWorld");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loginWorld failed: unknown result");
    }

    public void removeSprite(long spriteId) throws org.apache.thrift.TException
    {
      send_removeSprite(spriteId);
      recv_removeSprite();
    }

    public void send_removeSprite(long spriteId) throws org.apache.thrift.TException
    {
      removeSprite_args args = new removeSprite_args();
      args.setSpriteId(spriteId);
      sendBase("removeSprite", args);
    }

    public void recv_removeSprite() throws org.apache.thrift.TException
    {
      removeSprite_result result = new removeSprite_result();
      receiveBase(result, "removeSprite");
      return;
    }

    public long addTimerTask(RPC_TaskRunData taskData) throws org.apache.thrift.TException
    {
      send_addTimerTask(taskData);
      return recv_addTimerTask();
    }

    public void send_addTimerTask(RPC_TaskRunData taskData) throws org.apache.thrift.TException
    {
      addTimerTask_args args = new addTimerTask_args();
      args.setTaskData(taskData);
      sendBase("addTimerTask", args);
    }

    public long recv_addTimerTask() throws org.apache.thrift.TException
    {
      addTimerTask_result result = new addTimerTask_result();
      receiveBase(result, "addTimerTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addTimerTask failed: unknown result");
    }

    public boolean resetTimerTask(RPC_UpdateTime taskData) throws org.apache.thrift.TException
    {
      send_resetTimerTask(taskData);
      return recv_resetTimerTask();
    }

    public void send_resetTimerTask(RPC_UpdateTime taskData) throws org.apache.thrift.TException
    {
      resetTimerTask_args args = new resetTimerTask_args();
      args.setTaskData(taskData);
      sendBase("resetTimerTask", args);
    }

    public boolean recv_resetTimerTask() throws org.apache.thrift.TException
    {
      resetTimerTask_result result = new resetTimerTask_result();
      receiveBase(result, "resetTimerTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resetTimerTask failed: unknown result");
    }

    public boolean removeTimerTask(long id) throws org.apache.thrift.TException
    {
      send_removeTimerTask(id);
      return recv_removeTimerTask();
    }

    public void send_removeTimerTask(long id) throws org.apache.thrift.TException
    {
      removeTimerTask_args args = new removeTimerTask_args();
      args.setId(id);
      sendBase("removeTimerTask", args);
    }

    public boolean recv_removeTimerTask() throws org.apache.thrift.TException
    {
      removeTimerTask_result result = new removeTimerTask_result();
      receiveBase(result, "removeTimerTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeTimerTask failed: unknown result");
    }

    public RPC_ViewSprites requestViewSprites(int tx, int ty) throws org.apache.thrift.TException
    {
      send_requestViewSprites(tx, ty);
      return recv_requestViewSprites();
    }

    public void send_requestViewSprites(int tx, int ty) throws org.apache.thrift.TException
    {
      requestViewSprites_args args = new requestViewSprites_args();
      args.setTx(tx);
      args.setTy(ty);
      sendBase("requestViewSprites", args);
    }

    public RPC_ViewSprites recv_requestViewSprites() throws org.apache.thrift.TException
    {
      requestViewSprites_result result = new requestViewSprites_result();
      receiveBase(result, "requestViewSprites");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestViewSprites failed: unknown result");
    }

    public L2WResourceSimpleSprite reqSpritSimpleInfo(long uid) throws org.apache.thrift.TException
    {
      send_reqSpritSimpleInfo(uid);
      return recv_reqSpritSimpleInfo();
    }

    public void send_reqSpritSimpleInfo(long uid) throws org.apache.thrift.TException
    {
      reqSpritSimpleInfo_args args = new reqSpritSimpleInfo_args();
      args.setUid(uid);
      sendBase("reqSpritSimpleInfo", args);
    }

    public L2WResourceSimpleSprite recv_reqSpritSimpleInfo() throws org.apache.thrift.TException
    {
      reqSpritSimpleInfo_result result = new reqSpritSimpleInfo_result();
      receiveBase(result, "reqSpritSimpleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqSpritSimpleInfo failed: unknown result");
    }

    public void updateSpriteInfo(RPC_Sprite sprite) throws org.apache.thrift.TException
    {
      send_updateSpriteInfo(sprite);
      recv_updateSpriteInfo();
    }

    public void send_updateSpriteInfo(RPC_Sprite sprite) throws org.apache.thrift.TException
    {
      updateSpriteInfo_args args = new updateSpriteInfo_args();
      args.setSprite(sprite);
      sendBase("updateSpriteInfo", args);
    }

    public void recv_updateSpriteInfo() throws org.apache.thrift.TException
    {
      updateSpriteInfo_result result = new updateSpriteInfo_result();
      receiveBase(result, "updateSpriteInfo");
      return;
    }

    public void updateSpritePosition(long spriteid, int newX, int newY, int oldX, int oldY) throws org.apache.thrift.TException
    {
      send_updateSpritePosition(spriteid, newX, newY, oldX, oldY);
      recv_updateSpritePosition();
    }

    public void send_updateSpritePosition(long spriteid, int newX, int newY, int oldX, int oldY) throws org.apache.thrift.TException
    {
      updateSpritePosition_args args = new updateSpritePosition_args();
      args.setSpriteid(spriteid);
      args.setNewX(newX);
      args.setNewY(newY);
      args.setOldX(oldX);
      args.setOldY(oldY);
      sendBase("updateSpritePosition", args);
    }

    public void recv_updateSpritePosition() throws org.apache.thrift.TException
    {
      updateSpritePosition_result result = new updateSpritePosition_result();
      receiveBase(result, "updateSpritePosition");
      return;
    }

    public void playerExit(long roleid, int newServerKey) throws org.apache.thrift.TException
    {
      send_playerExit(roleid, newServerKey);
      recv_playerExit();
    }

    public void send_playerExit(long roleid, int newServerKey) throws org.apache.thrift.TException
    {
      playerExit_args args = new playerExit_args();
      args.setRoleid(roleid);
      args.setNewServerKey(newServerKey);
      sendBase("playerExit", args);
    }

    public void recv_playerExit() throws org.apache.thrift.TException
    {
      playerExit_result result = new playerExit_result();
      receiveBase(result, "playerExit");
      return;
    }

    public void playerExitSuccess(long roleid, int newServerKey) throws org.apache.thrift.TException
    {
      send_playerExitSuccess(roleid, newServerKey);
      recv_playerExitSuccess();
    }

    public void send_playerExitSuccess(long roleid, int newServerKey) throws org.apache.thrift.TException
    {
      playerExitSuccess_args args = new playerExitSuccess_args();
      args.setRoleid(roleid);
      args.setNewServerKey(newServerKey);
      sendBase("playerExitSuccess", args);
    }

    public void recv_playerExitSuccess() throws org.apache.thrift.TException
    {
      playerExitSuccess_result result = new playerExitSuccess_result();
      receiveBase(result, "playerExitSuccess");
      return;
    }

    public void offlineRole(long roleId, long sessionid, String gateKey) throws org.apache.thrift.TException
    {
      send_offlineRole(roleId, sessionid, gateKey);
      recv_offlineRole();
    }

    public void send_offlineRole(long roleId, long sessionid, String gateKey) throws org.apache.thrift.TException
    {
      offlineRole_args args = new offlineRole_args();
      args.setRoleId(roleId);
      args.setSessionid(sessionid);
      args.setGateKey(gateKey);
      sendBase("offlineRole", args);
    }

    public void recv_offlineRole() throws org.apache.thrift.TException
    {
      offlineRole_result result = new offlineRole_result();
      receiveBase(result, "offlineRole");
      return;
    }

    public void offlineAllRole() throws org.apache.thrift.TException
    {
      send_offlineAllRole();
      recv_offlineAllRole();
    }

    public void send_offlineAllRole() throws org.apache.thrift.TException
    {
      offlineAllRole_args args = new offlineAllRole_args();
      sendBase("offlineAllRole", args);
    }

    public void recv_offlineAllRole() throws org.apache.thrift.TException
    {
      offlineAllRole_result result = new offlineAllRole_result();
      receiveBase(result, "offlineAllRole");
      return;
    }

    public void requestSpriteDetail(long spriteid, long requestRoleid, int serverKey) throws org.apache.thrift.TException
    {
      send_requestSpriteDetail(spriteid, requestRoleid, serverKey);
      recv_requestSpriteDetail();
    }

    public void send_requestSpriteDetail(long spriteid, long requestRoleid, int serverKey) throws org.apache.thrift.TException
    {
      requestSpriteDetail_args args = new requestSpriteDetail_args();
      args.setSpriteid(spriteid);
      args.setRequestRoleid(requestRoleid);
      args.setServerKey(serverKey);
      sendBase("requestSpriteDetail", args);
    }

    public void recv_requestSpriteDetail() throws org.apache.thrift.TException
    {
      requestSpriteDetail_result result = new requestSpriteDetail_result();
      receiveBase(result, "requestSpriteDetail");
      return;
    }

    public L2WResourceSimpleSprite reqResourceSimpleInfo(long spriteid) throws org.apache.thrift.TException
    {
      send_reqResourceSimpleInfo(spriteid);
      return recv_reqResourceSimpleInfo();
    }

    public void send_reqResourceSimpleInfo(long spriteid) throws org.apache.thrift.TException
    {
      reqResourceSimpleInfo_args args = new reqResourceSimpleInfo_args();
      args.setSpriteid(spriteid);
      sendBase("reqResourceSimpleInfo", args);
    }

    public L2WResourceSimpleSprite recv_reqResourceSimpleInfo() throws org.apache.thrift.TException
    {
      reqResourceSimpleInfo_result result = new reqResourceSimpleInfo_result();
      receiveBase(result, "reqResourceSimpleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqResourceSimpleInfo failed: unknown result");
    }

    public void resolveConflictResule(L2WConflictResult l2wConflictResult) throws org.apache.thrift.TException
    {
      send_resolveConflictResule(l2wConflictResult);
      recv_resolveConflictResule();
    }

    public void send_resolveConflictResule(L2WConflictResult l2wConflictResult) throws org.apache.thrift.TException
    {
      resolveConflictResule_args args = new resolveConflictResule_args();
      args.setL2wConflictResult(l2wConflictResult);
      sendBase("resolveConflictResule", args);
    }

    public void recv_resolveConflictResule() throws org.apache.thrift.TException
    {
      resolveConflictResule_result result = new resolveConflictResule_result();
      receiveBase(result, "resolveConflictResule");
      return;
    }

    public String getTroopInfo(long spriteid) throws org.apache.thrift.TException
    {
      send_getTroopInfo(spriteid);
      return recv_getTroopInfo();
    }

    public void send_getTroopInfo(long spriteid) throws org.apache.thrift.TException
    {
      getTroopInfo_args args = new getTroopInfo_args();
      args.setSpriteid(spriteid);
      sendBase("getTroopInfo", args);
    }

    public String recv_getTroopInfo() throws org.apache.thrift.TException
    {
      getTroopInfo_result result = new getTroopInfo_result();
      receiveBase(result, "getTroopInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTroopInfo failed: unknown result");
    }

    public void updateSprite(RPC_Sprite sprite) throws org.apache.thrift.TException
    {
      send_updateSprite(sprite);
      recv_updateSprite();
    }

    public void send_updateSprite(RPC_Sprite sprite) throws org.apache.thrift.TException
    {
      updateSprite_args args = new updateSprite_args();
      args.setSprite(sprite);
      sendBase("updateSprite", args);
    }

    public void recv_updateSprite() throws org.apache.thrift.TException
    {
      updateSprite_result result = new updateSprite_result();
      receiveBase(result, "updateSprite");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void regiest(String ip, int port, int callPort, int group, int serverKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      regiest_call method_call = new regiest_call(ip, port, callPort, group, serverKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class regiest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ip;
      private int port;
      private int callPort;
      private int group;
      private int serverKey;
      public regiest_call(String ip, int port, int callPort, int group, int serverKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ip = ip;
        this.port = port;
        this.callPort = callPort;
        this.group = group;
        this.serverKey = serverKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("regiest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        regiest_args args = new regiest_args();
        args.setIp(ip);
        args.setPort(port);
        args.setCallPort(callPort);
        args.setGroup(group);
        args.setServerKey(serverKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_regiest();
      }
    }

    public void logicInitSuccess(int serverKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logicInitSuccess_call method_call = new logicInitSuccess_call(serverKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logicInitSuccess_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int serverKey;
      public logicInitSuccess_call(int serverKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverKey = serverKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logicInitSuccess", org.apache.thrift.protocol.TMessageType.CALL, 0));
        logicInitSuccess_args args = new logicInitSuccess_args();
        args.setServerKey(serverKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_logicInitSuccess();
      }
    }

    public void getPhysicalServer(int group, long roleid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPhysicalServer_call method_call = new getPhysicalServer_call(group, roleid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPhysicalServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int group;
      private long roleid;
      public getPhysicalServer_call(int group, long roleid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.group = group;
        this.roleid = roleid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPhysicalServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPhysicalServer_args args = new getPhysicalServer_args();
        args.setGroup(group);
        args.setRoleid(roleid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RPC_PhysicalServerInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPhysicalServer();
      }
    }

    public void loginWorld(RPC_LoginRole roleinfo, int serverKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loginWorld_call method_call = new loginWorld_call(roleinfo, serverKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loginWorld_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RPC_LoginRole roleinfo;
      private int serverKey;
      public loginWorld_call(RPC_LoginRole roleinfo, int serverKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleinfo = roleinfo;
        this.serverKey = serverKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loginWorld", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loginWorld_args args = new loginWorld_args();
        args.setRoleinfo(roleinfo);
        args.setServerKey(serverKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RPC_Position getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loginWorld();
      }
    }

    public void removeSprite(long spriteId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeSprite_call method_call = new removeSprite_call(spriteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeSprite_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long spriteId;
      public removeSprite_call(long spriteId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spriteId = spriteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeSprite", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeSprite_args args = new removeSprite_args();
        args.setSpriteId(spriteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeSprite();
      }
    }

    public void addTimerTask(RPC_TaskRunData taskData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addTimerTask_call method_call = new addTimerTask_call(taskData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addTimerTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RPC_TaskRunData taskData;
      public addTimerTask_call(RPC_TaskRunData taskData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskData = taskData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTimerTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addTimerTask_args args = new addTimerTask_args();
        args.setTaskData(taskData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addTimerTask();
      }
    }

    public void resetTimerTask(RPC_UpdateTime taskData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resetTimerTask_call method_call = new resetTimerTask_call(taskData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resetTimerTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RPC_UpdateTime taskData;
      public resetTimerTask_call(RPC_UpdateTime taskData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskData = taskData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resetTimerTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resetTimerTask_args args = new resetTimerTask_args();
        args.setTaskData(taskData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resetTimerTask();
      }
    }

    public void removeTimerTask(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeTimerTask_call method_call = new removeTimerTask_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeTimerTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public removeTimerTask_call(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeTimerTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeTimerTask_args args = new removeTimerTask_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeTimerTask();
      }
    }

    public void requestViewSprites(int tx, int ty, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestViewSprites_call method_call = new requestViewSprites_call(tx, ty, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestViewSprites_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int tx;
      private int ty;
      public requestViewSprites_call(int tx, int ty, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tx = tx;
        this.ty = ty;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestViewSprites", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestViewSprites_args args = new requestViewSprites_args();
        args.setTx(tx);
        args.setTy(ty);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RPC_ViewSprites getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestViewSprites();
      }
    }

    public void reqSpritSimpleInfo(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqSpritSimpleInfo_call method_call = new reqSpritSimpleInfo_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqSpritSimpleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public reqSpritSimpleInfo_call(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqSpritSimpleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqSpritSimpleInfo_args args = new reqSpritSimpleInfo_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public L2WResourceSimpleSprite getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqSpritSimpleInfo();
      }
    }

    public void updateSpriteInfo(RPC_Sprite sprite, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSpriteInfo_call method_call = new updateSpriteInfo_call(sprite, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSpriteInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RPC_Sprite sprite;
      public updateSpriteInfo_call(RPC_Sprite sprite, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sprite = sprite;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSpriteInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSpriteInfo_args args = new updateSpriteInfo_args();
        args.setSprite(sprite);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateSpriteInfo();
      }
    }

    public void updateSpritePosition(long spriteid, int newX, int newY, int oldX, int oldY, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSpritePosition_call method_call = new updateSpritePosition_call(spriteid, newX, newY, oldX, oldY, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSpritePosition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long spriteid;
      private int newX;
      private int newY;
      private int oldX;
      private int oldY;
      public updateSpritePosition_call(long spriteid, int newX, int newY, int oldX, int oldY, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spriteid = spriteid;
        this.newX = newX;
        this.newY = newY;
        this.oldX = oldX;
        this.oldY = oldY;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSpritePosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSpritePosition_args args = new updateSpritePosition_args();
        args.setSpriteid(spriteid);
        args.setNewX(newX);
        args.setNewY(newY);
        args.setOldX(oldX);
        args.setOldY(oldY);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateSpritePosition();
      }
    }

    public void playerExit(long roleid, int newServerKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      playerExit_call method_call = new playerExit_call(roleid, newServerKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class playerExit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long roleid;
      private int newServerKey;
      public playerExit_call(long roleid, int newServerKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleid = roleid;
        this.newServerKey = newServerKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("playerExit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        playerExit_args args = new playerExit_args();
        args.setRoleid(roleid);
        args.setNewServerKey(newServerKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_playerExit();
      }
    }

    public void playerExitSuccess(long roleid, int newServerKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      playerExitSuccess_call method_call = new playerExitSuccess_call(roleid, newServerKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class playerExitSuccess_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long roleid;
      private int newServerKey;
      public playerExitSuccess_call(long roleid, int newServerKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleid = roleid;
        this.newServerKey = newServerKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("playerExitSuccess", org.apache.thrift.protocol.TMessageType.CALL, 0));
        playerExitSuccess_args args = new playerExitSuccess_args();
        args.setRoleid(roleid);
        args.setNewServerKey(newServerKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_playerExitSuccess();
      }
    }

    public void offlineRole(long roleId, long sessionid, String gateKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      offlineRole_call method_call = new offlineRole_call(roleId, sessionid, gateKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class offlineRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long roleId;
      private long sessionid;
      private String gateKey;
      public offlineRole_call(long roleId, long sessionid, String gateKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleId = roleId;
        this.sessionid = sessionid;
        this.gateKey = gateKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("offlineRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        offlineRole_args args = new offlineRole_args();
        args.setRoleId(roleId);
        args.setSessionid(sessionid);
        args.setGateKey(gateKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_offlineRole();
      }
    }

    public void offlineAllRole(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      offlineAllRole_call method_call = new offlineAllRole_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class offlineAllRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      public offlineAllRole_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("offlineAllRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        offlineAllRole_args args = new offlineAllRole_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_offlineAllRole();
      }
    }

    public void requestSpriteDetail(long spriteid, long requestRoleid, int serverKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestSpriteDetail_call method_call = new requestSpriteDetail_call(spriteid, requestRoleid, serverKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestSpriteDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long spriteid;
      private long requestRoleid;
      private int serverKey;
      public requestSpriteDetail_call(long spriteid, long requestRoleid, int serverKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spriteid = spriteid;
        this.requestRoleid = requestRoleid;
        this.serverKey = serverKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestSpriteDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestSpriteDetail_args args = new requestSpriteDetail_args();
        args.setSpriteid(spriteid);
        args.setRequestRoleid(requestRoleid);
        args.setServerKey(serverKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_requestSpriteDetail();
      }
    }

    public void reqResourceSimpleInfo(long spriteid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqResourceSimpleInfo_call method_call = new reqResourceSimpleInfo_call(spriteid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqResourceSimpleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long spriteid;
      public reqResourceSimpleInfo_call(long spriteid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spriteid = spriteid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqResourceSimpleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqResourceSimpleInfo_args args = new reqResourceSimpleInfo_args();
        args.setSpriteid(spriteid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public L2WResourceSimpleSprite getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqResourceSimpleInfo();
      }
    }

    public void resolveConflictResule(L2WConflictResult l2wConflictResult, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resolveConflictResule_call method_call = new resolveConflictResule_call(l2wConflictResult, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resolveConflictResule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private L2WConflictResult l2wConflictResult;
      public resolveConflictResule_call(L2WConflictResult l2wConflictResult, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.l2wConflictResult = l2wConflictResult;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resolveConflictResule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resolveConflictResule_args args = new resolveConflictResule_args();
        args.setL2wConflictResult(l2wConflictResult);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_resolveConflictResule();
      }
    }

    public void getTroopInfo(long spriteid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTroopInfo_call method_call = new getTroopInfo_call(spriteid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTroopInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long spriteid;
      public getTroopInfo_call(long spriteid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spriteid = spriteid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTroopInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTroopInfo_args args = new getTroopInfo_args();
        args.setSpriteid(spriteid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTroopInfo();
      }
    }

    public void updateSprite(RPC_Sprite sprite, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSprite_call method_call = new updateSprite_call(sprite, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSprite_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RPC_Sprite sprite;
      public updateSprite_call(RPC_Sprite sprite, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sprite = sprite;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSprite", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSprite_args args = new updateSprite_args();
        args.setSprite(sprite);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateSprite();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("regiest", new regiest());
      processMap.put("logicInitSuccess", new logicInitSuccess());
      processMap.put("getPhysicalServer", new getPhysicalServer());
      processMap.put("loginWorld", new loginWorld());
      processMap.put("removeSprite", new removeSprite());
      processMap.put("addTimerTask", new addTimerTask());
      processMap.put("resetTimerTask", new resetTimerTask());
      processMap.put("removeTimerTask", new removeTimerTask());
      processMap.put("requestViewSprites", new requestViewSprites());
      processMap.put("reqSpritSimpleInfo", new reqSpritSimpleInfo());
      processMap.put("updateSpriteInfo", new updateSpriteInfo());
      processMap.put("updateSpritePosition", new updateSpritePosition());
      processMap.put("playerExit", new playerExit());
      processMap.put("playerExitSuccess", new playerExitSuccess());
      processMap.put("offlineRole", new offlineRole());
      processMap.put("offlineAllRole", new offlineAllRole());
      processMap.put("requestSpriteDetail", new requestSpriteDetail());
      processMap.put("reqResourceSimpleInfo", new reqResourceSimpleInfo());
      processMap.put("resolveConflictResule", new resolveConflictResule());
      processMap.put("getTroopInfo", new getTroopInfo());
      processMap.put("updateSprite", new updateSprite());
      return processMap;
    }

    public static class regiest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, regiest_args> {
      public regiest() {
        super("regiest");
      }

      public regiest_args getEmptyArgsInstance() {
        return new regiest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public regiest_result getResult(I iface, regiest_args args) throws org.apache.thrift.TException {
        regiest_result result = new regiest_result();
        iface.regiest(args.ip, args.port, args.callPort, args.group, args.serverKey);
        return result;
      }
    }

    public static class logicInitSuccess<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logicInitSuccess_args> {
      public logicInitSuccess() {
        super("logicInitSuccess");
      }

      public logicInitSuccess_args getEmptyArgsInstance() {
        return new logicInitSuccess_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public logicInitSuccess_result getResult(I iface, logicInitSuccess_args args) throws org.apache.thrift.TException {
        logicInitSuccess_result result = new logicInitSuccess_result();
        iface.logicInitSuccess(args.serverKey);
        return result;
      }
    }

    public static class getPhysicalServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPhysicalServer_args> {
      public getPhysicalServer() {
        super("getPhysicalServer");
      }

      public getPhysicalServer_args getEmptyArgsInstance() {
        return new getPhysicalServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPhysicalServer_result getResult(I iface, getPhysicalServer_args args) throws org.apache.thrift.TException {
        getPhysicalServer_result result = new getPhysicalServer_result();
        result.success = iface.getPhysicalServer(args.group, args.roleid);
        return result;
      }
    }

    public static class loginWorld<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loginWorld_args> {
      public loginWorld() {
        super("loginWorld");
      }

      public loginWorld_args getEmptyArgsInstance() {
        return new loginWorld_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loginWorld_result getResult(I iface, loginWorld_args args) throws org.apache.thrift.TException {
        loginWorld_result result = new loginWorld_result();
        result.success = iface.loginWorld(args.roleinfo, args.serverKey);
        return result;
      }
    }

    public static class removeSprite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeSprite_args> {
      public removeSprite() {
        super("removeSprite");
      }

      public removeSprite_args getEmptyArgsInstance() {
        return new removeSprite_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeSprite_result getResult(I iface, removeSprite_args args) throws org.apache.thrift.TException {
        removeSprite_result result = new removeSprite_result();
        iface.removeSprite(args.spriteId);
        return result;
      }
    }

    public static class addTimerTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addTimerTask_args> {
      public addTimerTask() {
        super("addTimerTask");
      }

      public addTimerTask_args getEmptyArgsInstance() {
        return new addTimerTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addTimerTask_result getResult(I iface, addTimerTask_args args) throws org.apache.thrift.TException {
        addTimerTask_result result = new addTimerTask_result();
        result.success = iface.addTimerTask(args.taskData);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class resetTimerTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resetTimerTask_args> {
      public resetTimerTask() {
        super("resetTimerTask");
      }

      public resetTimerTask_args getEmptyArgsInstance() {
        return new resetTimerTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resetTimerTask_result getResult(I iface, resetTimerTask_args args) throws org.apache.thrift.TException {
        resetTimerTask_result result = new resetTimerTask_result();
        result.success = iface.resetTimerTask(args.taskData);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class removeTimerTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeTimerTask_args> {
      public removeTimerTask() {
        super("removeTimerTask");
      }

      public removeTimerTask_args getEmptyArgsInstance() {
        return new removeTimerTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeTimerTask_result getResult(I iface, removeTimerTask_args args) throws org.apache.thrift.TException {
        removeTimerTask_result result = new removeTimerTask_result();
        result.success = iface.removeTimerTask(args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class requestViewSprites<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestViewSprites_args> {
      public requestViewSprites() {
        super("requestViewSprites");
      }

      public requestViewSprites_args getEmptyArgsInstance() {
        return new requestViewSprites_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public requestViewSprites_result getResult(I iface, requestViewSprites_args args) throws org.apache.thrift.TException {
        requestViewSprites_result result = new requestViewSprites_result();
        result.success = iface.requestViewSprites(args.tx, args.ty);
        return result;
      }
    }

    public static class reqSpritSimpleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqSpritSimpleInfo_args> {
      public reqSpritSimpleInfo() {
        super("reqSpritSimpleInfo");
      }

      public reqSpritSimpleInfo_args getEmptyArgsInstance() {
        return new reqSpritSimpleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqSpritSimpleInfo_result getResult(I iface, reqSpritSimpleInfo_args args) throws org.apache.thrift.TException {
        reqSpritSimpleInfo_result result = new reqSpritSimpleInfo_result();
        result.success = iface.reqSpritSimpleInfo(args.uid);
        return result;
      }
    }

    public static class updateSpriteInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSpriteInfo_args> {
      public updateSpriteInfo() {
        super("updateSpriteInfo");
      }

      public updateSpriteInfo_args getEmptyArgsInstance() {
        return new updateSpriteInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSpriteInfo_result getResult(I iface, updateSpriteInfo_args args) throws org.apache.thrift.TException {
        updateSpriteInfo_result result = new updateSpriteInfo_result();
        iface.updateSpriteInfo(args.sprite);
        return result;
      }
    }

    public static class updateSpritePosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSpritePosition_args> {
      public updateSpritePosition() {
        super("updateSpritePosition");
      }

      public updateSpritePosition_args getEmptyArgsInstance() {
        return new updateSpritePosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSpritePosition_result getResult(I iface, updateSpritePosition_args args) throws org.apache.thrift.TException {
        updateSpritePosition_result result = new updateSpritePosition_result();
        iface.updateSpritePosition(args.spriteid, args.newX, args.newY, args.oldX, args.oldY);
        return result;
      }
    }

    public static class playerExit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, playerExit_args> {
      public playerExit() {
        super("playerExit");
      }

      public playerExit_args getEmptyArgsInstance() {
        return new playerExit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public playerExit_result getResult(I iface, playerExit_args args) throws org.apache.thrift.TException {
        playerExit_result result = new playerExit_result();
        iface.playerExit(args.roleid, args.newServerKey);
        return result;
      }
    }

    public static class playerExitSuccess<I extends Iface> extends org.apache.thrift.ProcessFunction<I, playerExitSuccess_args> {
      public playerExitSuccess() {
        super("playerExitSuccess");
      }

      public playerExitSuccess_args getEmptyArgsInstance() {
        return new playerExitSuccess_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public playerExitSuccess_result getResult(I iface, playerExitSuccess_args args) throws org.apache.thrift.TException {
        playerExitSuccess_result result = new playerExitSuccess_result();
        iface.playerExitSuccess(args.roleid, args.newServerKey);
        return result;
      }
    }

    public static class offlineRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, offlineRole_args> {
      public offlineRole() {
        super("offlineRole");
      }

      public offlineRole_args getEmptyArgsInstance() {
        return new offlineRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public offlineRole_result getResult(I iface, offlineRole_args args) throws org.apache.thrift.TException {
        offlineRole_result result = new offlineRole_result();
        iface.offlineRole(args.roleId, args.sessionid, args.gateKey);
        return result;
      }
    }

    public static class offlineAllRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, offlineAllRole_args> {
      public offlineAllRole() {
        super("offlineAllRole");
      }

      public offlineAllRole_args getEmptyArgsInstance() {
        return new offlineAllRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public offlineAllRole_result getResult(I iface, offlineAllRole_args args) throws org.apache.thrift.TException {
        offlineAllRole_result result = new offlineAllRole_result();
        iface.offlineAllRole();
        return result;
      }
    }

    public static class requestSpriteDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestSpriteDetail_args> {
      public requestSpriteDetail() {
        super("requestSpriteDetail");
      }

      public requestSpriteDetail_args getEmptyArgsInstance() {
        return new requestSpriteDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public requestSpriteDetail_result getResult(I iface, requestSpriteDetail_args args) throws org.apache.thrift.TException {
        requestSpriteDetail_result result = new requestSpriteDetail_result();
        iface.requestSpriteDetail(args.spriteid, args.requestRoleid, args.serverKey);
        return result;
      }
    }

    public static class reqResourceSimpleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqResourceSimpleInfo_args> {
      public reqResourceSimpleInfo() {
        super("reqResourceSimpleInfo");
      }

      public reqResourceSimpleInfo_args getEmptyArgsInstance() {
        return new reqResourceSimpleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqResourceSimpleInfo_result getResult(I iface, reqResourceSimpleInfo_args args) throws org.apache.thrift.TException {
        reqResourceSimpleInfo_result result = new reqResourceSimpleInfo_result();
        result.success = iface.reqResourceSimpleInfo(args.spriteid);
        return result;
      }
    }

    public static class resolveConflictResule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resolveConflictResule_args> {
      public resolveConflictResule() {
        super("resolveConflictResule");
      }

      public resolveConflictResule_args getEmptyArgsInstance() {
        return new resolveConflictResule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resolveConflictResule_result getResult(I iface, resolveConflictResule_args args) throws org.apache.thrift.TException {
        resolveConflictResule_result result = new resolveConflictResule_result();
        iface.resolveConflictResule(args.l2wConflictResult);
        return result;
      }
    }

    public static class getTroopInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTroopInfo_args> {
      public getTroopInfo() {
        super("getTroopInfo");
      }

      public getTroopInfo_args getEmptyArgsInstance() {
        return new getTroopInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTroopInfo_result getResult(I iface, getTroopInfo_args args) throws org.apache.thrift.TException {
        getTroopInfo_result result = new getTroopInfo_result();
        result.success = iface.getTroopInfo(args.spriteid);
        return result;
      }
    }

    public static class updateSprite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSprite_args> {
      public updateSprite() {
        super("updateSprite");
      }

      public updateSprite_args getEmptyArgsInstance() {
        return new updateSprite_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSprite_result getResult(I iface, updateSprite_args args) throws org.apache.thrift.TException {
        updateSprite_result result = new updateSprite_result();
        iface.updateSprite(args.sprite);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("regiest", new regiest());
      processMap.put("logicInitSuccess", new logicInitSuccess());
      processMap.put("getPhysicalServer", new getPhysicalServer());
      processMap.put("loginWorld", new loginWorld());
      processMap.put("removeSprite", new removeSprite());
      processMap.put("addTimerTask", new addTimerTask());
      processMap.put("resetTimerTask", new resetTimerTask());
      processMap.put("removeTimerTask", new removeTimerTask());
      processMap.put("requestViewSprites", new requestViewSprites());
      processMap.put("reqSpritSimpleInfo", new reqSpritSimpleInfo());
      processMap.put("updateSpriteInfo", new updateSpriteInfo());
      processMap.put("updateSpritePosition", new updateSpritePosition());
      processMap.put("playerExit", new playerExit());
      processMap.put("playerExitSuccess", new playerExitSuccess());
      processMap.put("offlineRole", new offlineRole());
      processMap.put("offlineAllRole", new offlineAllRole());
      processMap.put("requestSpriteDetail", new requestSpriteDetail());
      processMap.put("reqResourceSimpleInfo", new reqResourceSimpleInfo());
      processMap.put("resolveConflictResule", new resolveConflictResule());
      processMap.put("getTroopInfo", new getTroopInfo());
      processMap.put("updateSprite", new updateSprite());
      return processMap;
    }

    public static class regiest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, regiest_args, Void> {
      public regiest() {
        super("regiest");
      }

      public regiest_args getEmptyArgsInstance() {
        return new regiest_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            regiest_result result = new regiest_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            regiest_result result = new regiest_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, regiest_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.regiest(args.ip, args.port, args.callPort, args.group, args.serverKey,resultHandler);
      }
    }

    public static class logicInitSuccess<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, logicInitSuccess_args, Void> {
      public logicInitSuccess() {
        super("logicInitSuccess");
      }

      public logicInitSuccess_args getEmptyArgsInstance() {
        return new logicInitSuccess_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            logicInitSuccess_result result = new logicInitSuccess_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            logicInitSuccess_result result = new logicInitSuccess_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, logicInitSuccess_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.logicInitSuccess(args.serverKey,resultHandler);
      }
    }

    public static class getPhysicalServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPhysicalServer_args, RPC_PhysicalServerInfo> {
      public getPhysicalServer() {
        super("getPhysicalServer");
      }

      public getPhysicalServer_args getEmptyArgsInstance() {
        return new getPhysicalServer_args();
      }

      public AsyncMethodCallback<RPC_PhysicalServerInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RPC_PhysicalServerInfo>() { 
          public void onComplete(RPC_PhysicalServerInfo o) {
            getPhysicalServer_result result = new getPhysicalServer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPhysicalServer_result result = new getPhysicalServer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPhysicalServer_args args, org.apache.thrift.async.AsyncMethodCallback<RPC_PhysicalServerInfo> resultHandler) throws TException {
        iface.getPhysicalServer(args.group, args.roleid,resultHandler);
      }
    }

    public static class loginWorld<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loginWorld_args, RPC_Position> {
      public loginWorld() {
        super("loginWorld");
      }

      public loginWorld_args getEmptyArgsInstance() {
        return new loginWorld_args();
      }

      public AsyncMethodCallback<RPC_Position> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RPC_Position>() { 
          public void onComplete(RPC_Position o) {
            loginWorld_result result = new loginWorld_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loginWorld_result result = new loginWorld_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loginWorld_args args, org.apache.thrift.async.AsyncMethodCallback<RPC_Position> resultHandler) throws TException {
        iface.loginWorld(args.roleinfo, args.serverKey,resultHandler);
      }
    }

    public static class removeSprite<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeSprite_args, Void> {
      public removeSprite() {
        super("removeSprite");
      }

      public removeSprite_args getEmptyArgsInstance() {
        return new removeSprite_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeSprite_result result = new removeSprite_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeSprite_result result = new removeSprite_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeSprite_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeSprite(args.spriteId,resultHandler);
      }
    }

    public static class addTimerTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addTimerTask_args, Long> {
      public addTimerTask() {
        super("addTimerTask");
      }

      public addTimerTask_args getEmptyArgsInstance() {
        return new addTimerTask_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            addTimerTask_result result = new addTimerTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addTimerTask_result result = new addTimerTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addTimerTask_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.addTimerTask(args.taskData,resultHandler);
      }
    }

    public static class resetTimerTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resetTimerTask_args, Boolean> {
      public resetTimerTask() {
        super("resetTimerTask");
      }

      public resetTimerTask_args getEmptyArgsInstance() {
        return new resetTimerTask_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            resetTimerTask_result result = new resetTimerTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resetTimerTask_result result = new resetTimerTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resetTimerTask_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.resetTimerTask(args.taskData,resultHandler);
      }
    }

    public static class removeTimerTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeTimerTask_args, Boolean> {
      public removeTimerTask() {
        super("removeTimerTask");
      }

      public removeTimerTask_args getEmptyArgsInstance() {
        return new removeTimerTask_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            removeTimerTask_result result = new removeTimerTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeTimerTask_result result = new removeTimerTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeTimerTask_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.removeTimerTask(args.id,resultHandler);
      }
    }

    public static class requestViewSprites<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestViewSprites_args, RPC_ViewSprites> {
      public requestViewSprites() {
        super("requestViewSprites");
      }

      public requestViewSprites_args getEmptyArgsInstance() {
        return new requestViewSprites_args();
      }

      public AsyncMethodCallback<RPC_ViewSprites> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RPC_ViewSprites>() { 
          public void onComplete(RPC_ViewSprites o) {
            requestViewSprites_result result = new requestViewSprites_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            requestViewSprites_result result = new requestViewSprites_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, requestViewSprites_args args, org.apache.thrift.async.AsyncMethodCallback<RPC_ViewSprites> resultHandler) throws TException {
        iface.requestViewSprites(args.tx, args.ty,resultHandler);
      }
    }

    public static class reqSpritSimpleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqSpritSimpleInfo_args, L2WResourceSimpleSprite> {
      public reqSpritSimpleInfo() {
        super("reqSpritSimpleInfo");
      }

      public reqSpritSimpleInfo_args getEmptyArgsInstance() {
        return new reqSpritSimpleInfo_args();
      }

      public AsyncMethodCallback<L2WResourceSimpleSprite> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<L2WResourceSimpleSprite>() { 
          public void onComplete(L2WResourceSimpleSprite o) {
            reqSpritSimpleInfo_result result = new reqSpritSimpleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqSpritSimpleInfo_result result = new reqSpritSimpleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqSpritSimpleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<L2WResourceSimpleSprite> resultHandler) throws TException {
        iface.reqSpritSimpleInfo(args.uid,resultHandler);
      }
    }

    public static class updateSpriteInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSpriteInfo_args, Void> {
      public updateSpriteInfo() {
        super("updateSpriteInfo");
      }

      public updateSpriteInfo_args getEmptyArgsInstance() {
        return new updateSpriteInfo_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateSpriteInfo_result result = new updateSpriteInfo_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSpriteInfo_result result = new updateSpriteInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSpriteInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateSpriteInfo(args.sprite,resultHandler);
      }
    }

    public static class updateSpritePosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSpritePosition_args, Void> {
      public updateSpritePosition() {
        super("updateSpritePosition");
      }

      public updateSpritePosition_args getEmptyArgsInstance() {
        return new updateSpritePosition_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateSpritePosition_result result = new updateSpritePosition_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSpritePosition_result result = new updateSpritePosition_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSpritePosition_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateSpritePosition(args.spriteid, args.newX, args.newY, args.oldX, args.oldY,resultHandler);
      }
    }

    public static class playerExit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, playerExit_args, Void> {
      public playerExit() {
        super("playerExit");
      }

      public playerExit_args getEmptyArgsInstance() {
        return new playerExit_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            playerExit_result result = new playerExit_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            playerExit_result result = new playerExit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, playerExit_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.playerExit(args.roleid, args.newServerKey,resultHandler);
      }
    }

    public static class playerExitSuccess<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, playerExitSuccess_args, Void> {
      public playerExitSuccess() {
        super("playerExitSuccess");
      }

      public playerExitSuccess_args getEmptyArgsInstance() {
        return new playerExitSuccess_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            playerExitSuccess_result result = new playerExitSuccess_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            playerExitSuccess_result result = new playerExitSuccess_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, playerExitSuccess_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.playerExitSuccess(args.roleid, args.newServerKey,resultHandler);
      }
    }

    public static class offlineRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, offlineRole_args, Void> {
      public offlineRole() {
        super("offlineRole");
      }

      public offlineRole_args getEmptyArgsInstance() {
        return new offlineRole_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            offlineRole_result result = new offlineRole_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            offlineRole_result result = new offlineRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, offlineRole_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.offlineRole(args.roleId, args.sessionid, args.gateKey,resultHandler);
      }
    }

    public static class offlineAllRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, offlineAllRole_args, Void> {
      public offlineAllRole() {
        super("offlineAllRole");
      }

      public offlineAllRole_args getEmptyArgsInstance() {
        return new offlineAllRole_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            offlineAllRole_result result = new offlineAllRole_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            offlineAllRole_result result = new offlineAllRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, offlineAllRole_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.offlineAllRole(resultHandler);
      }
    }

    public static class requestSpriteDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestSpriteDetail_args, Void> {
      public requestSpriteDetail() {
        super("requestSpriteDetail");
      }

      public requestSpriteDetail_args getEmptyArgsInstance() {
        return new requestSpriteDetail_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            requestSpriteDetail_result result = new requestSpriteDetail_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            requestSpriteDetail_result result = new requestSpriteDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, requestSpriteDetail_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.requestSpriteDetail(args.spriteid, args.requestRoleid, args.serverKey,resultHandler);
      }
    }

    public static class reqResourceSimpleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqResourceSimpleInfo_args, L2WResourceSimpleSprite> {
      public reqResourceSimpleInfo() {
        super("reqResourceSimpleInfo");
      }

      public reqResourceSimpleInfo_args getEmptyArgsInstance() {
        return new reqResourceSimpleInfo_args();
      }

      public AsyncMethodCallback<L2WResourceSimpleSprite> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<L2WResourceSimpleSprite>() { 
          public void onComplete(L2WResourceSimpleSprite o) {
            reqResourceSimpleInfo_result result = new reqResourceSimpleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqResourceSimpleInfo_result result = new reqResourceSimpleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqResourceSimpleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<L2WResourceSimpleSprite> resultHandler) throws TException {
        iface.reqResourceSimpleInfo(args.spriteid,resultHandler);
      }
    }

    public static class resolveConflictResule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resolveConflictResule_args, Void> {
      public resolveConflictResule() {
        super("resolveConflictResule");
      }

      public resolveConflictResule_args getEmptyArgsInstance() {
        return new resolveConflictResule_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            resolveConflictResule_result result = new resolveConflictResule_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resolveConflictResule_result result = new resolveConflictResule_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resolveConflictResule_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.resolveConflictResule(args.l2wConflictResult,resultHandler);
      }
    }

    public static class getTroopInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTroopInfo_args, String> {
      public getTroopInfo() {
        super("getTroopInfo");
      }

      public getTroopInfo_args getEmptyArgsInstance() {
        return new getTroopInfo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getTroopInfo_result result = new getTroopInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTroopInfo_result result = new getTroopInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTroopInfo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getTroopInfo(args.spriteid,resultHandler);
      }
    }

    public static class updateSprite<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSprite_args, Void> {
      public updateSprite() {
        super("updateSprite");
      }

      public updateSprite_args getEmptyArgsInstance() {
        return new updateSprite_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateSprite_result result = new updateSprite_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSprite_result result = new updateSprite_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSprite_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateSprite(args.sprite,resultHandler);
      }
    }

  }

  public static class regiest_args implements org.apache.thrift.TBase<regiest_args, regiest_args._Fields>, java.io.Serializable, Cloneable, Comparable<regiest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("regiest_args");

    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CALL_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("callPort", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField SERVER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("serverKey", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new regiest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new regiest_argsTupleSchemeFactory());
    }

    public String ip; // required
    public int port; // required
    public int callPort; // required
    public int group; // required
    public int serverKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP((short)1, "ip"),
      PORT((short)2, "port"),
      CALL_PORT((short)3, "callPort"),
      GROUP((short)4, "group"),
      SERVER_KEY((short)5, "serverKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP
            return IP;
          case 2: // PORT
            return PORT;
          case 3: // CALL_PORT
            return CALL_PORT;
          case 4: // GROUP
            return GROUP;
          case 5: // SERVER_KEY
            return SERVER_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __CALLPORT_ISSET_ID = 1;
    private static final int __GROUP_ISSET_ID = 2;
    private static final int __SERVERKEY_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CALL_PORT, new org.apache.thrift.meta_data.FieldMetaData("callPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SERVER_KEY, new org.apache.thrift.meta_data.FieldMetaData("serverKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(regiest_args.class, metaDataMap);
    }

    public regiest_args() {
    }

    public regiest_args(
      String ip,
      int port,
      int callPort,
      int group,
      int serverKey)
    {
      this();
      this.ip = ip;
      this.port = port;
      setPortIsSet(true);
      this.callPort = callPort;
      setCallPortIsSet(true);
      this.group = group;
      setGroupIsSet(true);
      this.serverKey = serverKey;
      setServerKeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public regiest_args(regiest_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
      this.port = other.port;
      this.callPort = other.callPort;
      this.group = other.group;
      this.serverKey = other.serverKey;
    }

    public regiest_args deepCopy() {
      return new regiest_args(this);
    }

    @Override
    public void clear() {
      this.ip = null;
      setPortIsSet(false);
      this.port = 0;
      setCallPortIsSet(false);
      this.callPort = 0;
      setGroupIsSet(false);
      this.group = 0;
      setServerKeyIsSet(false);
      this.serverKey = 0;
    }

    public String getIp() {
      return this.ip;
    }

    public regiest_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public regiest_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public int getCallPort() {
      return this.callPort;
    }

    public regiest_args setCallPort(int callPort) {
      this.callPort = callPort;
      setCallPortIsSet(true);
      return this;
    }

    public void unsetCallPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CALLPORT_ISSET_ID);
    }

    /** Returns true if field callPort is set (has been assigned a value) and false otherwise */
    public boolean isSetCallPort() {
      return EncodingUtils.testBit(__isset_bitfield, __CALLPORT_ISSET_ID);
    }

    public void setCallPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CALLPORT_ISSET_ID, value);
    }

    public int getGroup() {
      return this.group;
    }

    public regiest_args setGroup(int group) {
      this.group = group;
      setGroupIsSet(true);
      return this;
    }

    public void unsetGroup() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_ISSET_ID);
    }

    /** Returns true if field group is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUP_ISSET_ID);
    }

    public void setGroupIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_ISSET_ID, value);
    }

    public int getServerKey() {
      return this.serverKey;
    }

    public regiest_args setServerKey(int serverKey) {
      this.serverKey = serverKey;
      setServerKeyIsSet(true);
      return this;
    }

    public void unsetServerKey() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERKEY_ISSET_ID);
    }

    /** Returns true if field serverKey is set (has been assigned a value) and false otherwise */
    public boolean isSetServerKey() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERKEY_ISSET_ID);
    }

    public void setServerKeyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((Integer)value);
        }
        break;

      case CALL_PORT:
        if (value == null) {
          unsetCallPort();
        } else {
          setCallPort((Integer)value);
        }
        break;

      case GROUP:
        if (value == null) {
          unsetGroup();
        } else {
          setGroup((Integer)value);
        }
        break;

      case SERVER_KEY:
        if (value == null) {
          unsetServerKey();
        } else {
          setServerKey((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP:
        return getIp();

      case PORT:
        return getPort();

      case CALL_PORT:
        return getCallPort();

      case GROUP:
        return getGroup();

      case SERVER_KEY:
        return getServerKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP:
        return isSetIp();
      case PORT:
        return isSetPort();
      case CALL_PORT:
        return isSetCallPort();
      case GROUP:
        return isSetGroup();
      case SERVER_KEY:
        return isSetServerKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof regiest_args)
        return this.equals((regiest_args)that);
      return false;
    }

    public boolean equals(regiest_args that) {
      if (that == null)
        return false;

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_callPort = true;
      boolean that_present_callPort = true;
      if (this_present_callPort || that_present_callPort) {
        if (!(this_present_callPort && that_present_callPort))
          return false;
        if (this.callPort != that.callPort)
          return false;
      }

      boolean this_present_group = true;
      boolean that_present_group = true;
      if (this_present_group || that_present_group) {
        if (!(this_present_group && that_present_group))
          return false;
        if (this.group != that.group)
          return false;
      }

      boolean this_present_serverKey = true;
      boolean that_present_serverKey = true;
      if (this_present_serverKey || that_present_serverKey) {
        if (!(this_present_serverKey && that_present_serverKey))
          return false;
        if (this.serverKey != that.serverKey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ip = true && (isSetIp());
      list.add(present_ip);
      if (present_ip)
        list.add(ip);

      boolean present_port = true;
      list.add(present_port);
      if (present_port)
        list.add(port);

      boolean present_callPort = true;
      list.add(present_callPort);
      if (present_callPort)
        list.add(callPort);

      boolean present_group = true;
      list.add(present_group);
      if (present_group)
        list.add(group);

      boolean present_serverKey = true;
      list.add(present_serverKey);
      if (present_serverKey)
        list.add(serverKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(regiest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCallPort()).compareTo(other.isSetCallPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callPort, other.callPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerKey()).compareTo(other.isSetServerKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverKey, other.serverKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("regiest_args(");
      boolean first = true;

      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("callPort:");
      sb.append(this.callPort);
      first = false;
      if (!first) sb.append(", ");
      sb.append("group:");
      sb.append(this.group);
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverKey:");
      sb.append(this.serverKey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class regiest_argsStandardSchemeFactory implements SchemeFactory {
      public regiest_argsStandardScheme getScheme() {
        return new regiest_argsStandardScheme();
      }
    }

    private static class regiest_argsStandardScheme extends StandardScheme<regiest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, regiest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALL_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.callPort = iprot.readI32();
                struct.setCallPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.group = iprot.readI32();
                struct.setGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SERVER_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverKey = iprot.readI32();
                struct.setServerKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, regiest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CALL_PORT_FIELD_DESC);
        oprot.writeI32(struct.callPort);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        oprot.writeI32(struct.group);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SERVER_KEY_FIELD_DESC);
        oprot.writeI32(struct.serverKey);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class regiest_argsTupleSchemeFactory implements SchemeFactory {
      public regiest_argsTupleScheme getScheme() {
        return new regiest_argsTupleScheme();
      }
    }

    private static class regiest_argsTupleScheme extends TupleScheme<regiest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, regiest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetCallPort()) {
          optionals.set(2);
        }
        if (struct.isSetGroup()) {
          optionals.set(3);
        }
        if (struct.isSetServerKey()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetCallPort()) {
          oprot.writeI32(struct.callPort);
        }
        if (struct.isSetGroup()) {
          oprot.writeI32(struct.group);
        }
        if (struct.isSetServerKey()) {
          oprot.writeI32(struct.serverKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, regiest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.callPort = iprot.readI32();
          struct.setCallPortIsSet(true);
        }
        if (incoming.get(3)) {
          struct.group = iprot.readI32();
          struct.setGroupIsSet(true);
        }
        if (incoming.get(4)) {
          struct.serverKey = iprot.readI32();
          struct.setServerKeyIsSet(true);
        }
      }
    }

  }

  public static class regiest_result implements org.apache.thrift.TBase<regiest_result, regiest_result._Fields>, java.io.Serializable, Cloneable, Comparable<regiest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("regiest_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new regiest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new regiest_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(regiest_result.class, metaDataMap);
    }

    public regiest_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public regiest_result(regiest_result other) {
    }

    public regiest_result deepCopy() {
      return new regiest_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof regiest_result)
        return this.equals((regiest_result)that);
      return false;
    }

    public boolean equals(regiest_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(regiest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("regiest_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class regiest_resultStandardSchemeFactory implements SchemeFactory {
      public regiest_resultStandardScheme getScheme() {
        return new regiest_resultStandardScheme();
      }
    }

    private static class regiest_resultStandardScheme extends StandardScheme<regiest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, regiest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, regiest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class regiest_resultTupleSchemeFactory implements SchemeFactory {
      public regiest_resultTupleScheme getScheme() {
        return new regiest_resultTupleScheme();
      }
    }

    private static class regiest_resultTupleScheme extends TupleScheme<regiest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, regiest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, regiest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class logicInitSuccess_args implements org.apache.thrift.TBase<logicInitSuccess_args, logicInitSuccess_args._Fields>, java.io.Serializable, Cloneable, Comparable<logicInitSuccess_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logicInitSuccess_args");

    private static final org.apache.thrift.protocol.TField SERVER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("serverKey", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new logicInitSuccess_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new logicInitSuccess_argsTupleSchemeFactory());
    }

    public int serverKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_KEY((short)1, "serverKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_KEY
            return SERVER_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERKEY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_KEY, new org.apache.thrift.meta_data.FieldMetaData("serverKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logicInitSuccess_args.class, metaDataMap);
    }

    public logicInitSuccess_args() {
    }

    public logicInitSuccess_args(
      int serverKey)
    {
      this();
      this.serverKey = serverKey;
      setServerKeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logicInitSuccess_args(logicInitSuccess_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.serverKey = other.serverKey;
    }

    public logicInitSuccess_args deepCopy() {
      return new logicInitSuccess_args(this);
    }

    @Override
    public void clear() {
      setServerKeyIsSet(false);
      this.serverKey = 0;
    }

    public int getServerKey() {
      return this.serverKey;
    }

    public logicInitSuccess_args setServerKey(int serverKey) {
      this.serverKey = serverKey;
      setServerKeyIsSet(true);
      return this;
    }

    public void unsetServerKey() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERKEY_ISSET_ID);
    }

    /** Returns true if field serverKey is set (has been assigned a value) and false otherwise */
    public boolean isSetServerKey() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERKEY_ISSET_ID);
    }

    public void setServerKeyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_KEY:
        if (value == null) {
          unsetServerKey();
        } else {
          setServerKey((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_KEY:
        return getServerKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_KEY:
        return isSetServerKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logicInitSuccess_args)
        return this.equals((logicInitSuccess_args)that);
      return false;
    }

    public boolean equals(logicInitSuccess_args that) {
      if (that == null)
        return false;

      boolean this_present_serverKey = true;
      boolean that_present_serverKey = true;
      if (this_present_serverKey || that_present_serverKey) {
        if (!(this_present_serverKey && that_present_serverKey))
          return false;
        if (this.serverKey != that.serverKey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_serverKey = true;
      list.add(present_serverKey);
      if (present_serverKey)
        list.add(serverKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(logicInitSuccess_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServerKey()).compareTo(other.isSetServerKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverKey, other.serverKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logicInitSuccess_args(");
      boolean first = true;

      sb.append("serverKey:");
      sb.append(this.serverKey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logicInitSuccess_argsStandardSchemeFactory implements SchemeFactory {
      public logicInitSuccess_argsStandardScheme getScheme() {
        return new logicInitSuccess_argsStandardScheme();
      }
    }

    private static class logicInitSuccess_argsStandardScheme extends StandardScheme<logicInitSuccess_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logicInitSuccess_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverKey = iprot.readI32();
                struct.setServerKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logicInitSuccess_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_KEY_FIELD_DESC);
        oprot.writeI32(struct.serverKey);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logicInitSuccess_argsTupleSchemeFactory implements SchemeFactory {
      public logicInitSuccess_argsTupleScheme getScheme() {
        return new logicInitSuccess_argsTupleScheme();
      }
    }

    private static class logicInitSuccess_argsTupleScheme extends TupleScheme<logicInitSuccess_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logicInitSuccess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServerKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetServerKey()) {
          oprot.writeI32(struct.serverKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logicInitSuccess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.serverKey = iprot.readI32();
          struct.setServerKeyIsSet(true);
        }
      }
    }

  }

  public static class logicInitSuccess_result implements org.apache.thrift.TBase<logicInitSuccess_result, logicInitSuccess_result._Fields>, java.io.Serializable, Cloneable, Comparable<logicInitSuccess_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logicInitSuccess_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new logicInitSuccess_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new logicInitSuccess_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logicInitSuccess_result.class, metaDataMap);
    }

    public logicInitSuccess_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logicInitSuccess_result(logicInitSuccess_result other) {
    }

    public logicInitSuccess_result deepCopy() {
      return new logicInitSuccess_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logicInitSuccess_result)
        return this.equals((logicInitSuccess_result)that);
      return false;
    }

    public boolean equals(logicInitSuccess_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(logicInitSuccess_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logicInitSuccess_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logicInitSuccess_resultStandardSchemeFactory implements SchemeFactory {
      public logicInitSuccess_resultStandardScheme getScheme() {
        return new logicInitSuccess_resultStandardScheme();
      }
    }

    private static class logicInitSuccess_resultStandardScheme extends StandardScheme<logicInitSuccess_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logicInitSuccess_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logicInitSuccess_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logicInitSuccess_resultTupleSchemeFactory implements SchemeFactory {
      public logicInitSuccess_resultTupleScheme getScheme() {
        return new logicInitSuccess_resultTupleScheme();
      }
    }

    private static class logicInitSuccess_resultTupleScheme extends TupleScheme<logicInitSuccess_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logicInitSuccess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logicInitSuccess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getPhysicalServer_args implements org.apache.thrift.TBase<getPhysicalServer_args, getPhysicalServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPhysicalServer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPhysicalServer_args");

    private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ROLEID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleid", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPhysicalServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPhysicalServer_argsTupleSchemeFactory());
    }

    public int group; // required
    public long roleid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP((short)1, "group"),
      ROLEID((short)2, "roleid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP
            return GROUP;
          case 2: // ROLEID
            return ROLEID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUP_ISSET_ID = 0;
    private static final int __ROLEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ROLEID, new org.apache.thrift.meta_data.FieldMetaData("roleid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPhysicalServer_args.class, metaDataMap);
    }

    public getPhysicalServer_args() {
    }

    public getPhysicalServer_args(
      int group,
      long roleid)
    {
      this();
      this.group = group;
      setGroupIsSet(true);
      this.roleid = roleid;
      setRoleidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPhysicalServer_args(getPhysicalServer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.group = other.group;
      this.roleid = other.roleid;
    }

    public getPhysicalServer_args deepCopy() {
      return new getPhysicalServer_args(this);
    }

    @Override
    public void clear() {
      setGroupIsSet(false);
      this.group = 0;
      setRoleidIsSet(false);
      this.roleid = 0;
    }

    public int getGroup() {
      return this.group;
    }

    public getPhysicalServer_args setGroup(int group) {
      this.group = group;
      setGroupIsSet(true);
      return this;
    }

    public void unsetGroup() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_ISSET_ID);
    }

    /** Returns true if field group is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUP_ISSET_ID);
    }

    public void setGroupIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_ISSET_ID, value);
    }

    public long getRoleid() {
      return this.roleid;
    }

    public getPhysicalServer_args setRoleid(long roleid) {
      this.roleid = roleid;
      setRoleidIsSet(true);
      return this;
    }

    public void unsetRoleid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    /** Returns true if field roleid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleid() {
      return EncodingUtils.testBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    public void setRoleidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP:
        if (value == null) {
          unsetGroup();
        } else {
          setGroup((Integer)value);
        }
        break;

      case ROLEID:
        if (value == null) {
          unsetRoleid();
        } else {
          setRoleid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP:
        return getGroup();

      case ROLEID:
        return getRoleid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP:
        return isSetGroup();
      case ROLEID:
        return isSetRoleid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPhysicalServer_args)
        return this.equals((getPhysicalServer_args)that);
      return false;
    }

    public boolean equals(getPhysicalServer_args that) {
      if (that == null)
        return false;

      boolean this_present_group = true;
      boolean that_present_group = true;
      if (this_present_group || that_present_group) {
        if (!(this_present_group && that_present_group))
          return false;
        if (this.group != that.group)
          return false;
      }

      boolean this_present_roleid = true;
      boolean that_present_roleid = true;
      if (this_present_roleid || that_present_roleid) {
        if (!(this_present_roleid && that_present_roleid))
          return false;
        if (this.roleid != that.roleid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_group = true;
      list.add(present_group);
      if (present_group)
        list.add(group);

      boolean present_roleid = true;
      list.add(present_roleid);
      if (present_roleid)
        list.add(roleid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPhysicalServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoleid()).compareTo(other.isSetRoleid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleid, other.roleid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPhysicalServer_args(");
      boolean first = true;

      sb.append("group:");
      sb.append(this.group);
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleid:");
      sb.append(this.roleid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPhysicalServer_argsStandardSchemeFactory implements SchemeFactory {
      public getPhysicalServer_argsStandardScheme getScheme() {
        return new getPhysicalServer_argsStandardScheme();
      }
    }

    private static class getPhysicalServer_argsStandardScheme extends StandardScheme<getPhysicalServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPhysicalServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.group = iprot.readI32();
                struct.setGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROLEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.roleid = iprot.readI64();
                struct.setRoleidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPhysicalServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        oprot.writeI32(struct.group);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ROLEID_FIELD_DESC);
        oprot.writeI64(struct.roleid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPhysicalServer_argsTupleSchemeFactory implements SchemeFactory {
      public getPhysicalServer_argsTupleScheme getScheme() {
        return new getPhysicalServer_argsTupleScheme();
      }
    }

    private static class getPhysicalServer_argsTupleScheme extends TupleScheme<getPhysicalServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPhysicalServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroup()) {
          optionals.set(0);
        }
        if (struct.isSetRoleid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGroup()) {
          oprot.writeI32(struct.group);
        }
        if (struct.isSetRoleid()) {
          oprot.writeI64(struct.roleid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPhysicalServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.group = iprot.readI32();
          struct.setGroupIsSet(true);
        }
        if (incoming.get(1)) {
          struct.roleid = iprot.readI64();
          struct.setRoleidIsSet(true);
        }
      }
    }

  }

  public static class getPhysicalServer_result implements org.apache.thrift.TBase<getPhysicalServer_result, getPhysicalServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPhysicalServer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPhysicalServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPhysicalServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPhysicalServer_resultTupleSchemeFactory());
    }

    public RPC_PhysicalServerInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC_PhysicalServerInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPhysicalServer_result.class, metaDataMap);
    }

    public getPhysicalServer_result() {
    }

    public getPhysicalServer_result(
      RPC_PhysicalServerInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPhysicalServer_result(getPhysicalServer_result other) {
      if (other.isSetSuccess()) {
        this.success = new RPC_PhysicalServerInfo(other.success);
      }
    }

    public getPhysicalServer_result deepCopy() {
      return new getPhysicalServer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RPC_PhysicalServerInfo getSuccess() {
      return this.success;
    }

    public getPhysicalServer_result setSuccess(RPC_PhysicalServerInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RPC_PhysicalServerInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPhysicalServer_result)
        return this.equals((getPhysicalServer_result)that);
      return false;
    }

    public boolean equals(getPhysicalServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPhysicalServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPhysicalServer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPhysicalServer_resultStandardSchemeFactory implements SchemeFactory {
      public getPhysicalServer_resultStandardScheme getScheme() {
        return new getPhysicalServer_resultStandardScheme();
      }
    }

    private static class getPhysicalServer_resultStandardScheme extends StandardScheme<getPhysicalServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPhysicalServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RPC_PhysicalServerInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPhysicalServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPhysicalServer_resultTupleSchemeFactory implements SchemeFactory {
      public getPhysicalServer_resultTupleScheme getScheme() {
        return new getPhysicalServer_resultTupleScheme();
      }
    }

    private static class getPhysicalServer_resultTupleScheme extends TupleScheme<getPhysicalServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPhysicalServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPhysicalServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RPC_PhysicalServerInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loginWorld_args implements org.apache.thrift.TBase<loginWorld_args, loginWorld_args._Fields>, java.io.Serializable, Cloneable, Comparable<loginWorld_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginWorld_args");

    private static final org.apache.thrift.protocol.TField ROLEINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("roleinfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SERVER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("serverKey", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loginWorld_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loginWorld_argsTupleSchemeFactory());
    }

    public RPC_LoginRole roleinfo; // required
    public int serverKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLEINFO((short)1, "roleinfo"),
      SERVER_KEY((short)2, "serverKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLEINFO
            return ROLEINFO;
          case 2: // SERVER_KEY
            return SERVER_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERKEY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLEINFO, new org.apache.thrift.meta_data.FieldMetaData("roleinfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC_LoginRole.class)));
      tmpMap.put(_Fields.SERVER_KEY, new org.apache.thrift.meta_data.FieldMetaData("serverKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginWorld_args.class, metaDataMap);
    }

    public loginWorld_args() {
    }

    public loginWorld_args(
      RPC_LoginRole roleinfo,
      int serverKey)
    {
      this();
      this.roleinfo = roleinfo;
      this.serverKey = serverKey;
      setServerKeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginWorld_args(loginWorld_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRoleinfo()) {
        this.roleinfo = new RPC_LoginRole(other.roleinfo);
      }
      this.serverKey = other.serverKey;
    }

    public loginWorld_args deepCopy() {
      return new loginWorld_args(this);
    }

    @Override
    public void clear() {
      this.roleinfo = null;
      setServerKeyIsSet(false);
      this.serverKey = 0;
    }

    public RPC_LoginRole getRoleinfo() {
      return this.roleinfo;
    }

    public loginWorld_args setRoleinfo(RPC_LoginRole roleinfo) {
      this.roleinfo = roleinfo;
      return this;
    }

    public void unsetRoleinfo() {
      this.roleinfo = null;
    }

    /** Returns true if field roleinfo is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleinfo() {
      return this.roleinfo != null;
    }

    public void setRoleinfoIsSet(boolean value) {
      if (!value) {
        this.roleinfo = null;
      }
    }

    public int getServerKey() {
      return this.serverKey;
    }

    public loginWorld_args setServerKey(int serverKey) {
      this.serverKey = serverKey;
      setServerKeyIsSet(true);
      return this;
    }

    public void unsetServerKey() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERKEY_ISSET_ID);
    }

    /** Returns true if field serverKey is set (has been assigned a value) and false otherwise */
    public boolean isSetServerKey() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERKEY_ISSET_ID);
    }

    public void setServerKeyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLEINFO:
        if (value == null) {
          unsetRoleinfo();
        } else {
          setRoleinfo((RPC_LoginRole)value);
        }
        break;

      case SERVER_KEY:
        if (value == null) {
          unsetServerKey();
        } else {
          setServerKey((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLEINFO:
        return getRoleinfo();

      case SERVER_KEY:
        return getServerKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLEINFO:
        return isSetRoleinfo();
      case SERVER_KEY:
        return isSetServerKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginWorld_args)
        return this.equals((loginWorld_args)that);
      return false;
    }

    public boolean equals(loginWorld_args that) {
      if (that == null)
        return false;

      boolean this_present_roleinfo = true && this.isSetRoleinfo();
      boolean that_present_roleinfo = true && that.isSetRoleinfo();
      if (this_present_roleinfo || that_present_roleinfo) {
        if (!(this_present_roleinfo && that_present_roleinfo))
          return false;
        if (!this.roleinfo.equals(that.roleinfo))
          return false;
      }

      boolean this_present_serverKey = true;
      boolean that_present_serverKey = true;
      if (this_present_serverKey || that_present_serverKey) {
        if (!(this_present_serverKey && that_present_serverKey))
          return false;
        if (this.serverKey != that.serverKey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roleinfo = true && (isSetRoleinfo());
      list.add(present_roleinfo);
      if (present_roleinfo)
        list.add(roleinfo);

      boolean present_serverKey = true;
      list.add(present_serverKey);
      if (present_serverKey)
        list.add(serverKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(loginWorld_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoleinfo()).compareTo(other.isSetRoleinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleinfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleinfo, other.roleinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerKey()).compareTo(other.isSetServerKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverKey, other.serverKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginWorld_args(");
      boolean first = true;

      sb.append("roleinfo:");
      if (this.roleinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.roleinfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverKey:");
      sb.append(this.serverKey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (roleinfo != null) {
        roleinfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginWorld_argsStandardSchemeFactory implements SchemeFactory {
      public loginWorld_argsStandardScheme getScheme() {
        return new loginWorld_argsStandardScheme();
      }
    }

    private static class loginWorld_argsStandardScheme extends StandardScheme<loginWorld_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginWorld_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLEINFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.roleinfo = new RPC_LoginRole();
                struct.roleinfo.read(iprot);
                struct.setRoleinfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVER_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverKey = iprot.readI32();
                struct.setServerKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginWorld_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roleinfo != null) {
          oprot.writeFieldBegin(ROLEINFO_FIELD_DESC);
          struct.roleinfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVER_KEY_FIELD_DESC);
        oprot.writeI32(struct.serverKey);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginWorld_argsTupleSchemeFactory implements SchemeFactory {
      public loginWorld_argsTupleScheme getScheme() {
        return new loginWorld_argsTupleScheme();
      }
    }

    private static class loginWorld_argsTupleScheme extends TupleScheme<loginWorld_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginWorld_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoleinfo()) {
          optionals.set(0);
        }
        if (struct.isSetServerKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRoleinfo()) {
          struct.roleinfo.write(oprot);
        }
        if (struct.isSetServerKey()) {
          oprot.writeI32(struct.serverKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginWorld_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.roleinfo = new RPC_LoginRole();
          struct.roleinfo.read(iprot);
          struct.setRoleinfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serverKey = iprot.readI32();
          struct.setServerKeyIsSet(true);
        }
      }
    }

  }

  public static class loginWorld_result implements org.apache.thrift.TBase<loginWorld_result, loginWorld_result._Fields>, java.io.Serializable, Cloneable, Comparable<loginWorld_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginWorld_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loginWorld_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loginWorld_resultTupleSchemeFactory());
    }

    public RPC_Position success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC_Position.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginWorld_result.class, metaDataMap);
    }

    public loginWorld_result() {
    }

    public loginWorld_result(
      RPC_Position success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginWorld_result(loginWorld_result other) {
      if (other.isSetSuccess()) {
        this.success = new RPC_Position(other.success);
      }
    }

    public loginWorld_result deepCopy() {
      return new loginWorld_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RPC_Position getSuccess() {
      return this.success;
    }

    public loginWorld_result setSuccess(RPC_Position success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RPC_Position)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginWorld_result)
        return this.equals((loginWorld_result)that);
      return false;
    }

    public boolean equals(loginWorld_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loginWorld_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginWorld_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginWorld_resultStandardSchemeFactory implements SchemeFactory {
      public loginWorld_resultStandardScheme getScheme() {
        return new loginWorld_resultStandardScheme();
      }
    }

    private static class loginWorld_resultStandardScheme extends StandardScheme<loginWorld_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginWorld_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RPC_Position();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginWorld_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginWorld_resultTupleSchemeFactory implements SchemeFactory {
      public loginWorld_resultTupleScheme getScheme() {
        return new loginWorld_resultTupleScheme();
      }
    }

    private static class loginWorld_resultTupleScheme extends TupleScheme<loginWorld_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginWorld_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginWorld_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RPC_Position();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeSprite_args implements org.apache.thrift.TBase<removeSprite_args, removeSprite_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeSprite_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSprite_args");

    private static final org.apache.thrift.protocol.TField SPRITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spriteId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeSprite_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeSprite_argsTupleSchemeFactory());
    }

    public long spriteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPRITE_ID((short)1, "spriteId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPRITE_ID
            return SPRITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPRITEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPRITE_ID, new org.apache.thrift.meta_data.FieldMetaData("spriteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSprite_args.class, metaDataMap);
    }

    public removeSprite_args() {
    }

    public removeSprite_args(
      long spriteId)
    {
      this();
      this.spriteId = spriteId;
      setSpriteIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSprite_args(removeSprite_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.spriteId = other.spriteId;
    }

    public removeSprite_args deepCopy() {
      return new removeSprite_args(this);
    }

    @Override
    public void clear() {
      setSpriteIdIsSet(false);
      this.spriteId = 0;
    }

    public long getSpriteId() {
      return this.spriteId;
    }

    public removeSprite_args setSpriteId(long spriteId) {
      this.spriteId = spriteId;
      setSpriteIdIsSet(true);
      return this;
    }

    public void unsetSpriteId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    /** Returns true if field spriteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSpriteId() {
      return EncodingUtils.testBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    public void setSpriteIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPRITEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPRITE_ID:
        if (value == null) {
          unsetSpriteId();
        } else {
          setSpriteId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPRITE_ID:
        return getSpriteId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPRITE_ID:
        return isSetSpriteId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSprite_args)
        return this.equals((removeSprite_args)that);
      return false;
    }

    public boolean equals(removeSprite_args that) {
      if (that == null)
        return false;

      boolean this_present_spriteId = true;
      boolean that_present_spriteId = true;
      if (this_present_spriteId || that_present_spriteId) {
        if (!(this_present_spriteId && that_present_spriteId))
          return false;
        if (this.spriteId != that.spriteId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_spriteId = true;
      list.add(present_spriteId);
      if (present_spriteId)
        list.add(spriteId);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeSprite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpriteId()).compareTo(other.isSetSpriteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpriteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spriteId, other.spriteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSprite_args(");
      boolean first = true;

      sb.append("spriteId:");
      sb.append(this.spriteId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSprite_argsStandardSchemeFactory implements SchemeFactory {
      public removeSprite_argsStandardScheme getScheme() {
        return new removeSprite_argsStandardScheme();
      }
    }

    private static class removeSprite_argsStandardScheme extends StandardScheme<removeSprite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSprite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPRITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.spriteId = iprot.readI64();
                struct.setSpriteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSprite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SPRITE_ID_FIELD_DESC);
        oprot.writeI64(struct.spriteId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSprite_argsTupleSchemeFactory implements SchemeFactory {
      public removeSprite_argsTupleScheme getScheme() {
        return new removeSprite_argsTupleScheme();
      }
    }

    private static class removeSprite_argsTupleScheme extends TupleScheme<removeSprite_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSprite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpriteId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSpriteId()) {
          oprot.writeI64(struct.spriteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSprite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.spriteId = iprot.readI64();
          struct.setSpriteIdIsSet(true);
        }
      }
    }

  }

  public static class removeSprite_result implements org.apache.thrift.TBase<removeSprite_result, removeSprite_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeSprite_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSprite_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeSprite_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeSprite_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSprite_result.class, metaDataMap);
    }

    public removeSprite_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSprite_result(removeSprite_result other) {
    }

    public removeSprite_result deepCopy() {
      return new removeSprite_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSprite_result)
        return this.equals((removeSprite_result)that);
      return false;
    }

    public boolean equals(removeSprite_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(removeSprite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSprite_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSprite_resultStandardSchemeFactory implements SchemeFactory {
      public removeSprite_resultStandardScheme getScheme() {
        return new removeSprite_resultStandardScheme();
      }
    }

    private static class removeSprite_resultStandardScheme extends StandardScheme<removeSprite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSprite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSprite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSprite_resultTupleSchemeFactory implements SchemeFactory {
      public removeSprite_resultTupleScheme getScheme() {
        return new removeSprite_resultTupleScheme();
      }
    }

    private static class removeSprite_resultTupleScheme extends TupleScheme<removeSprite_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSprite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSprite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addTimerTask_args implements org.apache.thrift.TBase<addTimerTask_args, addTimerTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<addTimerTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTimerTask_args");

    private static final org.apache.thrift.protocol.TField TASK_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("taskData", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTimerTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTimerTask_argsTupleSchemeFactory());
    }

    public RPC_TaskRunData taskData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_DATA((short)1, "taskData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_DATA
            return TASK_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_DATA, new org.apache.thrift.meta_data.FieldMetaData("taskData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC_TaskRunData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTimerTask_args.class, metaDataMap);
    }

    public addTimerTask_args() {
    }

    public addTimerTask_args(
      RPC_TaskRunData taskData)
    {
      this();
      this.taskData = taskData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTimerTask_args(addTimerTask_args other) {
      if (other.isSetTaskData()) {
        this.taskData = new RPC_TaskRunData(other.taskData);
      }
    }

    public addTimerTask_args deepCopy() {
      return new addTimerTask_args(this);
    }

    @Override
    public void clear() {
      this.taskData = null;
    }

    public RPC_TaskRunData getTaskData() {
      return this.taskData;
    }

    public addTimerTask_args setTaskData(RPC_TaskRunData taskData) {
      this.taskData = taskData;
      return this;
    }

    public void unsetTaskData() {
      this.taskData = null;
    }

    /** Returns true if field taskData is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskData() {
      return this.taskData != null;
    }

    public void setTaskDataIsSet(boolean value) {
      if (!value) {
        this.taskData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_DATA:
        if (value == null) {
          unsetTaskData();
        } else {
          setTaskData((RPC_TaskRunData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_DATA:
        return getTaskData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_DATA:
        return isSetTaskData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTimerTask_args)
        return this.equals((addTimerTask_args)that);
      return false;
    }

    public boolean equals(addTimerTask_args that) {
      if (that == null)
        return false;

      boolean this_present_taskData = true && this.isSetTaskData();
      boolean that_present_taskData = true && that.isSetTaskData();
      if (this_present_taskData || that_present_taskData) {
        if (!(this_present_taskData && that_present_taskData))
          return false;
        if (!this.taskData.equals(that.taskData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskData = true && (isSetTaskData());
      list.add(present_taskData);
      if (present_taskData)
        list.add(taskData);

      return list.hashCode();
    }

    @Override
    public int compareTo(addTimerTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskData()).compareTo(other.isSetTaskData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskData, other.taskData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTimerTask_args(");
      boolean first = true;

      sb.append("taskData:");
      if (this.taskData == null) {
        sb.append("null");
      } else {
        sb.append(this.taskData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (taskData != null) {
        taskData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTimerTask_argsStandardSchemeFactory implements SchemeFactory {
      public addTimerTask_argsStandardScheme getScheme() {
        return new addTimerTask_argsStandardScheme();
      }
    }

    private static class addTimerTask_argsStandardScheme extends StandardScheme<addTimerTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTimerTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.taskData = new RPC_TaskRunData();
                struct.taskData.read(iprot);
                struct.setTaskDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTimerTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taskData != null) {
          oprot.writeFieldBegin(TASK_DATA_FIELD_DESC);
          struct.taskData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTimerTask_argsTupleSchemeFactory implements SchemeFactory {
      public addTimerTask_argsTupleScheme getScheme() {
        return new addTimerTask_argsTupleScheme();
      }
    }

    private static class addTimerTask_argsTupleScheme extends TupleScheme<addTimerTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTimerTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTaskData()) {
          struct.taskData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTimerTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.taskData = new RPC_TaskRunData();
          struct.taskData.read(iprot);
          struct.setTaskDataIsSet(true);
        }
      }
    }

  }

  public static class addTimerTask_result implements org.apache.thrift.TBase<addTimerTask_result, addTimerTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<addTimerTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTimerTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTimerTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTimerTask_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTimerTask_result.class, metaDataMap);
    }

    public addTimerTask_result() {
    }

    public addTimerTask_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTimerTask_result(addTimerTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addTimerTask_result deepCopy() {
      return new addTimerTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public addTimerTask_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTimerTask_result)
        return this.equals((addTimerTask_result)that);
      return false;
    }

    public boolean equals(addTimerTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addTimerTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTimerTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTimerTask_resultStandardSchemeFactory implements SchemeFactory {
      public addTimerTask_resultStandardScheme getScheme() {
        return new addTimerTask_resultStandardScheme();
      }
    }

    private static class addTimerTask_resultStandardScheme extends StandardScheme<addTimerTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTimerTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTimerTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTimerTask_resultTupleSchemeFactory implements SchemeFactory {
      public addTimerTask_resultTupleScheme getScheme() {
        return new addTimerTask_resultTupleScheme();
      }
    }

    private static class addTimerTask_resultTupleScheme extends TupleScheme<addTimerTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTimerTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTimerTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class resetTimerTask_args implements org.apache.thrift.TBase<resetTimerTask_args, resetTimerTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<resetTimerTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resetTimerTask_args");

    private static final org.apache.thrift.protocol.TField TASK_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("taskData", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resetTimerTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resetTimerTask_argsTupleSchemeFactory());
    }

    public RPC_UpdateTime taskData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_DATA((short)1, "taskData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_DATA
            return TASK_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_DATA, new org.apache.thrift.meta_data.FieldMetaData("taskData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC_UpdateTime.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resetTimerTask_args.class, metaDataMap);
    }

    public resetTimerTask_args() {
    }

    public resetTimerTask_args(
      RPC_UpdateTime taskData)
    {
      this();
      this.taskData = taskData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resetTimerTask_args(resetTimerTask_args other) {
      if (other.isSetTaskData()) {
        this.taskData = new RPC_UpdateTime(other.taskData);
      }
    }

    public resetTimerTask_args deepCopy() {
      return new resetTimerTask_args(this);
    }

    @Override
    public void clear() {
      this.taskData = null;
    }

    public RPC_UpdateTime getTaskData() {
      return this.taskData;
    }

    public resetTimerTask_args setTaskData(RPC_UpdateTime taskData) {
      this.taskData = taskData;
      return this;
    }

    public void unsetTaskData() {
      this.taskData = null;
    }

    /** Returns true if field taskData is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskData() {
      return this.taskData != null;
    }

    public void setTaskDataIsSet(boolean value) {
      if (!value) {
        this.taskData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_DATA:
        if (value == null) {
          unsetTaskData();
        } else {
          setTaskData((RPC_UpdateTime)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_DATA:
        return getTaskData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_DATA:
        return isSetTaskData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resetTimerTask_args)
        return this.equals((resetTimerTask_args)that);
      return false;
    }

    public boolean equals(resetTimerTask_args that) {
      if (that == null)
        return false;

      boolean this_present_taskData = true && this.isSetTaskData();
      boolean that_present_taskData = true && that.isSetTaskData();
      if (this_present_taskData || that_present_taskData) {
        if (!(this_present_taskData && that_present_taskData))
          return false;
        if (!this.taskData.equals(that.taskData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskData = true && (isSetTaskData());
      list.add(present_taskData);
      if (present_taskData)
        list.add(taskData);

      return list.hashCode();
    }

    @Override
    public int compareTo(resetTimerTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskData()).compareTo(other.isSetTaskData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskData, other.taskData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resetTimerTask_args(");
      boolean first = true;

      sb.append("taskData:");
      if (this.taskData == null) {
        sb.append("null");
      } else {
        sb.append(this.taskData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (taskData != null) {
        taskData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resetTimerTask_argsStandardSchemeFactory implements SchemeFactory {
      public resetTimerTask_argsStandardScheme getScheme() {
        return new resetTimerTask_argsStandardScheme();
      }
    }

    private static class resetTimerTask_argsStandardScheme extends StandardScheme<resetTimerTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resetTimerTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.taskData = new RPC_UpdateTime();
                struct.taskData.read(iprot);
                struct.setTaskDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resetTimerTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taskData != null) {
          oprot.writeFieldBegin(TASK_DATA_FIELD_DESC);
          struct.taskData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resetTimerTask_argsTupleSchemeFactory implements SchemeFactory {
      public resetTimerTask_argsTupleScheme getScheme() {
        return new resetTimerTask_argsTupleScheme();
      }
    }

    private static class resetTimerTask_argsTupleScheme extends TupleScheme<resetTimerTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resetTimerTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTaskData()) {
          struct.taskData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resetTimerTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.taskData = new RPC_UpdateTime();
          struct.taskData.read(iprot);
          struct.setTaskDataIsSet(true);
        }
      }
    }

  }

  public static class resetTimerTask_result implements org.apache.thrift.TBase<resetTimerTask_result, resetTimerTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<resetTimerTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resetTimerTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resetTimerTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resetTimerTask_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resetTimerTask_result.class, metaDataMap);
    }

    public resetTimerTask_result() {
    }

    public resetTimerTask_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resetTimerTask_result(resetTimerTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public resetTimerTask_result deepCopy() {
      return new resetTimerTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public resetTimerTask_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resetTimerTask_result)
        return this.equals((resetTimerTask_result)that);
      return false;
    }

    public boolean equals(resetTimerTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(resetTimerTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resetTimerTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resetTimerTask_resultStandardSchemeFactory implements SchemeFactory {
      public resetTimerTask_resultStandardScheme getScheme() {
        return new resetTimerTask_resultStandardScheme();
      }
    }

    private static class resetTimerTask_resultStandardScheme extends StandardScheme<resetTimerTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resetTimerTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resetTimerTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resetTimerTask_resultTupleSchemeFactory implements SchemeFactory {
      public resetTimerTask_resultTupleScheme getScheme() {
        return new resetTimerTask_resultTupleScheme();
      }
    }

    private static class resetTimerTask_resultTupleScheme extends TupleScheme<resetTimerTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resetTimerTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resetTimerTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeTimerTask_args implements org.apache.thrift.TBase<removeTimerTask_args, removeTimerTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeTimerTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeTimerTask_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeTimerTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeTimerTask_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeTimerTask_args.class, metaDataMap);
    }

    public removeTimerTask_args() {
    }

    public removeTimerTask_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeTimerTask_args(removeTimerTask_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public removeTimerTask_args deepCopy() {
      return new removeTimerTask_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public removeTimerTask_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTimerTask_args)
        return this.equals((removeTimerTask_args)that);
      return false;
    }

    public boolean equals(removeTimerTask_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeTimerTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeTimerTask_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeTimerTask_argsStandardSchemeFactory implements SchemeFactory {
      public removeTimerTask_argsStandardScheme getScheme() {
        return new removeTimerTask_argsStandardScheme();
      }
    }

    private static class removeTimerTask_argsStandardScheme extends StandardScheme<removeTimerTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeTimerTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeTimerTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeTimerTask_argsTupleSchemeFactory implements SchemeFactory {
      public removeTimerTask_argsTupleScheme getScheme() {
        return new removeTimerTask_argsTupleScheme();
      }
    }

    private static class removeTimerTask_argsTupleScheme extends TupleScheme<removeTimerTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeTimerTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeTimerTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class removeTimerTask_result implements org.apache.thrift.TBase<removeTimerTask_result, removeTimerTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeTimerTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeTimerTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeTimerTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeTimerTask_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeTimerTask_result.class, metaDataMap);
    }

    public removeTimerTask_result() {
    }

    public removeTimerTask_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeTimerTask_result(removeTimerTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public removeTimerTask_result deepCopy() {
      return new removeTimerTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeTimerTask_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTimerTask_result)
        return this.equals((removeTimerTask_result)that);
      return false;
    }

    public boolean equals(removeTimerTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeTimerTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeTimerTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeTimerTask_resultStandardSchemeFactory implements SchemeFactory {
      public removeTimerTask_resultStandardScheme getScheme() {
        return new removeTimerTask_resultStandardScheme();
      }
    }

    private static class removeTimerTask_resultStandardScheme extends StandardScheme<removeTimerTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeTimerTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeTimerTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeTimerTask_resultTupleSchemeFactory implements SchemeFactory {
      public removeTimerTask_resultTupleScheme getScheme() {
        return new removeTimerTask_resultTupleScheme();
      }
    }

    private static class removeTimerTask_resultTupleScheme extends TupleScheme<removeTimerTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeTimerTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeTimerTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class requestViewSprites_args implements org.apache.thrift.TBase<requestViewSprites_args, requestViewSprites_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestViewSprites_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestViewSprites_args");

    private static final org.apache.thrift.protocol.TField TX_FIELD_DESC = new org.apache.thrift.protocol.TField("tx", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TY_FIELD_DESC = new org.apache.thrift.protocol.TField("ty", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestViewSprites_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestViewSprites_argsTupleSchemeFactory());
    }

    public int tx; // required
    public int ty; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TX((short)1, "tx"),
      TY((short)2, "ty");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TX
            return TX;
          case 2: // TY
            return TY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TX_ISSET_ID = 0;
    private static final int __TY_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TX, new org.apache.thrift.meta_data.FieldMetaData("tx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TY, new org.apache.thrift.meta_data.FieldMetaData("ty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestViewSprites_args.class, metaDataMap);
    }

    public requestViewSprites_args() {
    }

    public requestViewSprites_args(
      int tx,
      int ty)
    {
      this();
      this.tx = tx;
      setTxIsSet(true);
      this.ty = ty;
      setTyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestViewSprites_args(requestViewSprites_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.tx = other.tx;
      this.ty = other.ty;
    }

    public requestViewSprites_args deepCopy() {
      return new requestViewSprites_args(this);
    }

    @Override
    public void clear() {
      setTxIsSet(false);
      this.tx = 0;
      setTyIsSet(false);
      this.ty = 0;
    }

    public int getTx() {
      return this.tx;
    }

    public requestViewSprites_args setTx(int tx) {
      this.tx = tx;
      setTxIsSet(true);
      return this;
    }

    public void unsetTx() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TX_ISSET_ID);
    }

    /** Returns true if field tx is set (has been assigned a value) and false otherwise */
    public boolean isSetTx() {
      return EncodingUtils.testBit(__isset_bitfield, __TX_ISSET_ID);
    }

    public void setTxIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TX_ISSET_ID, value);
    }

    public int getTy() {
      return this.ty;
    }

    public requestViewSprites_args setTy(int ty) {
      this.ty = ty;
      setTyIsSet(true);
      return this;
    }

    public void unsetTy() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TY_ISSET_ID);
    }

    /** Returns true if field ty is set (has been assigned a value) and false otherwise */
    public boolean isSetTy() {
      return EncodingUtils.testBit(__isset_bitfield, __TY_ISSET_ID);
    }

    public void setTyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TX:
        if (value == null) {
          unsetTx();
        } else {
          setTx((Integer)value);
        }
        break;

      case TY:
        if (value == null) {
          unsetTy();
        } else {
          setTy((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TX:
        return getTx();

      case TY:
        return getTy();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TX:
        return isSetTx();
      case TY:
        return isSetTy();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestViewSprites_args)
        return this.equals((requestViewSprites_args)that);
      return false;
    }

    public boolean equals(requestViewSprites_args that) {
      if (that == null)
        return false;

      boolean this_present_tx = true;
      boolean that_present_tx = true;
      if (this_present_tx || that_present_tx) {
        if (!(this_present_tx && that_present_tx))
          return false;
        if (this.tx != that.tx)
          return false;
      }

      boolean this_present_ty = true;
      boolean that_present_ty = true;
      if (this_present_ty || that_present_ty) {
        if (!(this_present_ty && that_present_ty))
          return false;
        if (this.ty != that.ty)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tx = true;
      list.add(present_tx);
      if (present_tx)
        list.add(tx);

      boolean present_ty = true;
      list.add(present_ty);
      if (present_ty)
        list.add(ty);

      return list.hashCode();
    }

    @Override
    public int compareTo(requestViewSprites_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTx()).compareTo(other.isSetTx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tx, other.tx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTy()).compareTo(other.isSetTy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ty, other.ty);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestViewSprites_args(");
      boolean first = true;

      sb.append("tx:");
      sb.append(this.tx);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ty:");
      sb.append(this.ty);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestViewSprites_argsStandardSchemeFactory implements SchemeFactory {
      public requestViewSprites_argsStandardScheme getScheme() {
        return new requestViewSprites_argsStandardScheme();
      }
    }

    private static class requestViewSprites_argsStandardScheme extends StandardScheme<requestViewSprites_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestViewSprites_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tx = iprot.readI32();
                struct.setTxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ty = iprot.readI32();
                struct.setTyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestViewSprites_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TX_FIELD_DESC);
        oprot.writeI32(struct.tx);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TY_FIELD_DESC);
        oprot.writeI32(struct.ty);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestViewSprites_argsTupleSchemeFactory implements SchemeFactory {
      public requestViewSprites_argsTupleScheme getScheme() {
        return new requestViewSprites_argsTupleScheme();
      }
    }

    private static class requestViewSprites_argsTupleScheme extends TupleScheme<requestViewSprites_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestViewSprites_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTx()) {
          optionals.set(0);
        }
        if (struct.isSetTy()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTx()) {
          oprot.writeI32(struct.tx);
        }
        if (struct.isSetTy()) {
          oprot.writeI32(struct.ty);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestViewSprites_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tx = iprot.readI32();
          struct.setTxIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ty = iprot.readI32();
          struct.setTyIsSet(true);
        }
      }
    }

  }

  public static class requestViewSprites_result implements org.apache.thrift.TBase<requestViewSprites_result, requestViewSprites_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestViewSprites_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestViewSprites_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestViewSprites_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestViewSprites_resultTupleSchemeFactory());
    }

    public RPC_ViewSprites success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC_ViewSprites.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestViewSprites_result.class, metaDataMap);
    }

    public requestViewSprites_result() {
    }

    public requestViewSprites_result(
      RPC_ViewSprites success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestViewSprites_result(requestViewSprites_result other) {
      if (other.isSetSuccess()) {
        this.success = new RPC_ViewSprites(other.success);
      }
    }

    public requestViewSprites_result deepCopy() {
      return new requestViewSprites_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RPC_ViewSprites getSuccess() {
      return this.success;
    }

    public requestViewSprites_result setSuccess(RPC_ViewSprites success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RPC_ViewSprites)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestViewSprites_result)
        return this.equals((requestViewSprites_result)that);
      return false;
    }

    public boolean equals(requestViewSprites_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(requestViewSprites_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestViewSprites_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestViewSprites_resultStandardSchemeFactory implements SchemeFactory {
      public requestViewSprites_resultStandardScheme getScheme() {
        return new requestViewSprites_resultStandardScheme();
      }
    }

    private static class requestViewSprites_resultStandardScheme extends StandardScheme<requestViewSprites_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestViewSprites_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RPC_ViewSprites();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestViewSprites_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestViewSprites_resultTupleSchemeFactory implements SchemeFactory {
      public requestViewSprites_resultTupleScheme getScheme() {
        return new requestViewSprites_resultTupleScheme();
      }
    }

    private static class requestViewSprites_resultTupleScheme extends TupleScheme<requestViewSprites_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestViewSprites_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestViewSprites_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RPC_ViewSprites();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reqSpritSimpleInfo_args implements org.apache.thrift.TBase<reqSpritSimpleInfo_args, reqSpritSimpleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqSpritSimpleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqSpritSimpleInfo_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqSpritSimpleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqSpritSimpleInfo_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqSpritSimpleInfo_args.class, metaDataMap);
    }

    public reqSpritSimpleInfo_args() {
    }

    public reqSpritSimpleInfo_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqSpritSimpleInfo_args(reqSpritSimpleInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public reqSpritSimpleInfo_args deepCopy() {
      return new reqSpritSimpleInfo_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public reqSpritSimpleInfo_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqSpritSimpleInfo_args)
        return this.equals((reqSpritSimpleInfo_args)that);
      return false;
    }

    public boolean equals(reqSpritSimpleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uid = true;
      list.add(present_uid);
      if (present_uid)
        list.add(uid);

      return list.hashCode();
    }

    @Override
    public int compareTo(reqSpritSimpleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqSpritSimpleInfo_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqSpritSimpleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public reqSpritSimpleInfo_argsStandardScheme getScheme() {
        return new reqSpritSimpleInfo_argsStandardScheme();
      }
    }

    private static class reqSpritSimpleInfo_argsStandardScheme extends StandardScheme<reqSpritSimpleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqSpritSimpleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqSpritSimpleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqSpritSimpleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public reqSpritSimpleInfo_argsTupleScheme getScheme() {
        return new reqSpritSimpleInfo_argsTupleScheme();
      }
    }

    private static class reqSpritSimpleInfo_argsTupleScheme extends TupleScheme<reqSpritSimpleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqSpritSimpleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqSpritSimpleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class reqSpritSimpleInfo_result implements org.apache.thrift.TBase<reqSpritSimpleInfo_result, reqSpritSimpleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqSpritSimpleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqSpritSimpleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqSpritSimpleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqSpritSimpleInfo_resultTupleSchemeFactory());
    }

    public L2WResourceSimpleSprite success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, L2WResourceSimpleSprite.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqSpritSimpleInfo_result.class, metaDataMap);
    }

    public reqSpritSimpleInfo_result() {
    }

    public reqSpritSimpleInfo_result(
      L2WResourceSimpleSprite success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqSpritSimpleInfo_result(reqSpritSimpleInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new L2WResourceSimpleSprite(other.success);
      }
    }

    public reqSpritSimpleInfo_result deepCopy() {
      return new reqSpritSimpleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public L2WResourceSimpleSprite getSuccess() {
      return this.success;
    }

    public reqSpritSimpleInfo_result setSuccess(L2WResourceSimpleSprite success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((L2WResourceSimpleSprite)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqSpritSimpleInfo_result)
        return this.equals((reqSpritSimpleInfo_result)that);
      return false;
    }

    public boolean equals(reqSpritSimpleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(reqSpritSimpleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqSpritSimpleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqSpritSimpleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public reqSpritSimpleInfo_resultStandardScheme getScheme() {
        return new reqSpritSimpleInfo_resultStandardScheme();
      }
    }

    private static class reqSpritSimpleInfo_resultStandardScheme extends StandardScheme<reqSpritSimpleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqSpritSimpleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new L2WResourceSimpleSprite();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqSpritSimpleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqSpritSimpleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public reqSpritSimpleInfo_resultTupleScheme getScheme() {
        return new reqSpritSimpleInfo_resultTupleScheme();
      }
    }

    private static class reqSpritSimpleInfo_resultTupleScheme extends TupleScheme<reqSpritSimpleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqSpritSimpleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqSpritSimpleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new L2WResourceSimpleSprite();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateSpriteInfo_args implements org.apache.thrift.TBase<updateSpriteInfo_args, updateSpriteInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSpriteInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSpriteInfo_args");

    private static final org.apache.thrift.protocol.TField SPRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("sprite", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSpriteInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSpriteInfo_argsTupleSchemeFactory());
    }

    public RPC_Sprite sprite; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPRITE((short)1, "sprite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPRITE
            return SPRITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPRITE, new org.apache.thrift.meta_data.FieldMetaData("sprite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC_Sprite.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSpriteInfo_args.class, metaDataMap);
    }

    public updateSpriteInfo_args() {
    }

    public updateSpriteInfo_args(
      RPC_Sprite sprite)
    {
      this();
      this.sprite = sprite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSpriteInfo_args(updateSpriteInfo_args other) {
      if (other.isSetSprite()) {
        this.sprite = new RPC_Sprite(other.sprite);
      }
    }

    public updateSpriteInfo_args deepCopy() {
      return new updateSpriteInfo_args(this);
    }

    @Override
    public void clear() {
      this.sprite = null;
    }

    public RPC_Sprite getSprite() {
      return this.sprite;
    }

    public updateSpriteInfo_args setSprite(RPC_Sprite sprite) {
      this.sprite = sprite;
      return this;
    }

    public void unsetSprite() {
      this.sprite = null;
    }

    /** Returns true if field sprite is set (has been assigned a value) and false otherwise */
    public boolean isSetSprite() {
      return this.sprite != null;
    }

    public void setSpriteIsSet(boolean value) {
      if (!value) {
        this.sprite = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPRITE:
        if (value == null) {
          unsetSprite();
        } else {
          setSprite((RPC_Sprite)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPRITE:
        return getSprite();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPRITE:
        return isSetSprite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSpriteInfo_args)
        return this.equals((updateSpriteInfo_args)that);
      return false;
    }

    public boolean equals(updateSpriteInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_sprite = true && this.isSetSprite();
      boolean that_present_sprite = true && that.isSetSprite();
      if (this_present_sprite || that_present_sprite) {
        if (!(this_present_sprite && that_present_sprite))
          return false;
        if (!this.sprite.equals(that.sprite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sprite = true && (isSetSprite());
      list.add(present_sprite);
      if (present_sprite)
        list.add(sprite);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSpriteInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSprite()).compareTo(other.isSetSprite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSprite()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sprite, other.sprite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSpriteInfo_args(");
      boolean first = true;

      sb.append("sprite:");
      if (this.sprite == null) {
        sb.append("null");
      } else {
        sb.append(this.sprite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sprite != null) {
        sprite.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSpriteInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateSpriteInfo_argsStandardScheme getScheme() {
        return new updateSpriteInfo_argsStandardScheme();
      }
    }

    private static class updateSpriteInfo_argsStandardScheme extends StandardScheme<updateSpriteInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSpriteInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPRITE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sprite = new RPC_Sprite();
                struct.sprite.read(iprot);
                struct.setSpriteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSpriteInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sprite != null) {
          oprot.writeFieldBegin(SPRITE_FIELD_DESC);
          struct.sprite.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSpriteInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateSpriteInfo_argsTupleScheme getScheme() {
        return new updateSpriteInfo_argsTupleScheme();
      }
    }

    private static class updateSpriteInfo_argsTupleScheme extends TupleScheme<updateSpriteInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSpriteInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSprite()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSprite()) {
          struct.sprite.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSpriteInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sprite = new RPC_Sprite();
          struct.sprite.read(iprot);
          struct.setSpriteIsSet(true);
        }
      }
    }

  }

  public static class updateSpriteInfo_result implements org.apache.thrift.TBase<updateSpriteInfo_result, updateSpriteInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSpriteInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSpriteInfo_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSpriteInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSpriteInfo_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSpriteInfo_result.class, metaDataMap);
    }

    public updateSpriteInfo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSpriteInfo_result(updateSpriteInfo_result other) {
    }

    public updateSpriteInfo_result deepCopy() {
      return new updateSpriteInfo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSpriteInfo_result)
        return this.equals((updateSpriteInfo_result)that);
      return false;
    }

    public boolean equals(updateSpriteInfo_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSpriteInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSpriteInfo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSpriteInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateSpriteInfo_resultStandardScheme getScheme() {
        return new updateSpriteInfo_resultStandardScheme();
      }
    }

    private static class updateSpriteInfo_resultStandardScheme extends StandardScheme<updateSpriteInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSpriteInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSpriteInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSpriteInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateSpriteInfo_resultTupleScheme getScheme() {
        return new updateSpriteInfo_resultTupleScheme();
      }
    }

    private static class updateSpriteInfo_resultTupleScheme extends TupleScheme<updateSpriteInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSpriteInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSpriteInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateSpritePosition_args implements org.apache.thrift.TBase<updateSpritePosition_args, updateSpritePosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSpritePosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSpritePosition_args");

    private static final org.apache.thrift.protocol.TField SPRITEID_FIELD_DESC = new org.apache.thrift.protocol.TField("spriteid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_X_FIELD_DESC = new org.apache.thrift.protocol.TField("newX", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NEW_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("newY", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField OLD_X_FIELD_DESC = new org.apache.thrift.protocol.TField("oldX", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField OLD_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("oldY", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSpritePosition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSpritePosition_argsTupleSchemeFactory());
    }

    public long spriteid; // required
    public int newX; // required
    public int newY; // required
    public int oldX; // required
    public int oldY; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPRITEID((short)1, "spriteid"),
      NEW_X((short)2, "newX"),
      NEW_Y((short)3, "newY"),
      OLD_X((short)4, "oldX"),
      OLD_Y((short)5, "oldY");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPRITEID
            return SPRITEID;
          case 2: // NEW_X
            return NEW_X;
          case 3: // NEW_Y
            return NEW_Y;
          case 4: // OLD_X
            return OLD_X;
          case 5: // OLD_Y
            return OLD_Y;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPRITEID_ISSET_ID = 0;
    private static final int __NEWX_ISSET_ID = 1;
    private static final int __NEWY_ISSET_ID = 2;
    private static final int __OLDX_ISSET_ID = 3;
    private static final int __OLDY_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPRITEID, new org.apache.thrift.meta_data.FieldMetaData("spriteid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NEW_X, new org.apache.thrift.meta_data.FieldMetaData("newX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NEW_Y, new org.apache.thrift.meta_data.FieldMetaData("newY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OLD_X, new org.apache.thrift.meta_data.FieldMetaData("oldX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OLD_Y, new org.apache.thrift.meta_data.FieldMetaData("oldY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSpritePosition_args.class, metaDataMap);
    }

    public updateSpritePosition_args() {
    }

    public updateSpritePosition_args(
      long spriteid,
      int newX,
      int newY,
      int oldX,
      int oldY)
    {
      this();
      this.spriteid = spriteid;
      setSpriteidIsSet(true);
      this.newX = newX;
      setNewXIsSet(true);
      this.newY = newY;
      setNewYIsSet(true);
      this.oldX = oldX;
      setOldXIsSet(true);
      this.oldY = oldY;
      setOldYIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSpritePosition_args(updateSpritePosition_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.spriteid = other.spriteid;
      this.newX = other.newX;
      this.newY = other.newY;
      this.oldX = other.oldX;
      this.oldY = other.oldY;
    }

    public updateSpritePosition_args deepCopy() {
      return new updateSpritePosition_args(this);
    }

    @Override
    public void clear() {
      setSpriteidIsSet(false);
      this.spriteid = 0;
      setNewXIsSet(false);
      this.newX = 0;
      setNewYIsSet(false);
      this.newY = 0;
      setOldXIsSet(false);
      this.oldX = 0;
      setOldYIsSet(false);
      this.oldY = 0;
    }

    public long getSpriteid() {
      return this.spriteid;
    }

    public updateSpritePosition_args setSpriteid(long spriteid) {
      this.spriteid = spriteid;
      setSpriteidIsSet(true);
      return this;
    }

    public void unsetSpriteid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    /** Returns true if field spriteid is set (has been assigned a value) and false otherwise */
    public boolean isSetSpriteid() {
      return EncodingUtils.testBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    public void setSpriteidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPRITEID_ISSET_ID, value);
    }

    public int getNewX() {
      return this.newX;
    }

    public updateSpritePosition_args setNewX(int newX) {
      this.newX = newX;
      setNewXIsSet(true);
      return this;
    }

    public void unsetNewX() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWX_ISSET_ID);
    }

    /** Returns true if field newX is set (has been assigned a value) and false otherwise */
    public boolean isSetNewX() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWX_ISSET_ID);
    }

    public void setNewXIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWX_ISSET_ID, value);
    }

    public int getNewY() {
      return this.newY;
    }

    public updateSpritePosition_args setNewY(int newY) {
      this.newY = newY;
      setNewYIsSet(true);
      return this;
    }

    public void unsetNewY() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWY_ISSET_ID);
    }

    /** Returns true if field newY is set (has been assigned a value) and false otherwise */
    public boolean isSetNewY() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWY_ISSET_ID);
    }

    public void setNewYIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWY_ISSET_ID, value);
    }

    public int getOldX() {
      return this.oldX;
    }

    public updateSpritePosition_args setOldX(int oldX) {
      this.oldX = oldX;
      setOldXIsSet(true);
      return this;
    }

    public void unsetOldX() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDX_ISSET_ID);
    }

    /** Returns true if field oldX is set (has been assigned a value) and false otherwise */
    public boolean isSetOldX() {
      return EncodingUtils.testBit(__isset_bitfield, __OLDX_ISSET_ID);
    }

    public void setOldXIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDX_ISSET_ID, value);
    }

    public int getOldY() {
      return this.oldY;
    }

    public updateSpritePosition_args setOldY(int oldY) {
      this.oldY = oldY;
      setOldYIsSet(true);
      return this;
    }

    public void unsetOldY() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDY_ISSET_ID);
    }

    /** Returns true if field oldY is set (has been assigned a value) and false otherwise */
    public boolean isSetOldY() {
      return EncodingUtils.testBit(__isset_bitfield, __OLDY_ISSET_ID);
    }

    public void setOldYIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPRITEID:
        if (value == null) {
          unsetSpriteid();
        } else {
          setSpriteid((Long)value);
        }
        break;

      case NEW_X:
        if (value == null) {
          unsetNewX();
        } else {
          setNewX((Integer)value);
        }
        break;

      case NEW_Y:
        if (value == null) {
          unsetNewY();
        } else {
          setNewY((Integer)value);
        }
        break;

      case OLD_X:
        if (value == null) {
          unsetOldX();
        } else {
          setOldX((Integer)value);
        }
        break;

      case OLD_Y:
        if (value == null) {
          unsetOldY();
        } else {
          setOldY((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPRITEID:
        return getSpriteid();

      case NEW_X:
        return getNewX();

      case NEW_Y:
        return getNewY();

      case OLD_X:
        return getOldX();

      case OLD_Y:
        return getOldY();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPRITEID:
        return isSetSpriteid();
      case NEW_X:
        return isSetNewX();
      case NEW_Y:
        return isSetNewY();
      case OLD_X:
        return isSetOldX();
      case OLD_Y:
        return isSetOldY();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSpritePosition_args)
        return this.equals((updateSpritePosition_args)that);
      return false;
    }

    public boolean equals(updateSpritePosition_args that) {
      if (that == null)
        return false;

      boolean this_present_spriteid = true;
      boolean that_present_spriteid = true;
      if (this_present_spriteid || that_present_spriteid) {
        if (!(this_present_spriteid && that_present_spriteid))
          return false;
        if (this.spriteid != that.spriteid)
          return false;
      }

      boolean this_present_newX = true;
      boolean that_present_newX = true;
      if (this_present_newX || that_present_newX) {
        if (!(this_present_newX && that_present_newX))
          return false;
        if (this.newX != that.newX)
          return false;
      }

      boolean this_present_newY = true;
      boolean that_present_newY = true;
      if (this_present_newY || that_present_newY) {
        if (!(this_present_newY && that_present_newY))
          return false;
        if (this.newY != that.newY)
          return false;
      }

      boolean this_present_oldX = true;
      boolean that_present_oldX = true;
      if (this_present_oldX || that_present_oldX) {
        if (!(this_present_oldX && that_present_oldX))
          return false;
        if (this.oldX != that.oldX)
          return false;
      }

      boolean this_present_oldY = true;
      boolean that_present_oldY = true;
      if (this_present_oldY || that_present_oldY) {
        if (!(this_present_oldY && that_present_oldY))
          return false;
        if (this.oldY != that.oldY)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_spriteid = true;
      list.add(present_spriteid);
      if (present_spriteid)
        list.add(spriteid);

      boolean present_newX = true;
      list.add(present_newX);
      if (present_newX)
        list.add(newX);

      boolean present_newY = true;
      list.add(present_newY);
      if (present_newY)
        list.add(newY);

      boolean present_oldX = true;
      list.add(present_oldX);
      if (present_oldX)
        list.add(oldX);

      boolean present_oldY = true;
      list.add(present_oldY);
      if (present_oldY)
        list.add(oldY);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSpritePosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpriteid()).compareTo(other.isSetSpriteid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpriteid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spriteid, other.spriteid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewX()).compareTo(other.isSetNewX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newX, other.newX);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewY()).compareTo(other.isSetNewY());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewY()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newY, other.newY);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldX()).compareTo(other.isSetOldX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldX, other.oldX);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldY()).compareTo(other.isSetOldY());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldY()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldY, other.oldY);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSpritePosition_args(");
      boolean first = true;

      sb.append("spriteid:");
      sb.append(this.spriteid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newX:");
      sb.append(this.newX);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newY:");
      sb.append(this.newY);
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldX:");
      sb.append(this.oldX);
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldY:");
      sb.append(this.oldY);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSpritePosition_argsStandardSchemeFactory implements SchemeFactory {
      public updateSpritePosition_argsStandardScheme getScheme() {
        return new updateSpritePosition_argsStandardScheme();
      }
    }

    private static class updateSpritePosition_argsStandardScheme extends StandardScheme<updateSpritePosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSpritePosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPRITEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.spriteid = iprot.readI64();
                struct.setSpriteidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_X
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newX = iprot.readI32();
                struct.setNewXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NEW_Y
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newY = iprot.readI32();
                struct.setNewYIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OLD_X
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.oldX = iprot.readI32();
                struct.setOldXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OLD_Y
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.oldY = iprot.readI32();
                struct.setOldYIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSpritePosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SPRITEID_FIELD_DESC);
        oprot.writeI64(struct.spriteid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NEW_X_FIELD_DESC);
        oprot.writeI32(struct.newX);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NEW_Y_FIELD_DESC);
        oprot.writeI32(struct.newY);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OLD_X_FIELD_DESC);
        oprot.writeI32(struct.oldX);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OLD_Y_FIELD_DESC);
        oprot.writeI32(struct.oldY);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSpritePosition_argsTupleSchemeFactory implements SchemeFactory {
      public updateSpritePosition_argsTupleScheme getScheme() {
        return new updateSpritePosition_argsTupleScheme();
      }
    }

    private static class updateSpritePosition_argsTupleScheme extends TupleScheme<updateSpritePosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSpritePosition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpriteid()) {
          optionals.set(0);
        }
        if (struct.isSetNewX()) {
          optionals.set(1);
        }
        if (struct.isSetNewY()) {
          optionals.set(2);
        }
        if (struct.isSetOldX()) {
          optionals.set(3);
        }
        if (struct.isSetOldY()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSpriteid()) {
          oprot.writeI64(struct.spriteid);
        }
        if (struct.isSetNewX()) {
          oprot.writeI32(struct.newX);
        }
        if (struct.isSetNewY()) {
          oprot.writeI32(struct.newY);
        }
        if (struct.isSetOldX()) {
          oprot.writeI32(struct.oldX);
        }
        if (struct.isSetOldY()) {
          oprot.writeI32(struct.oldY);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSpritePosition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.spriteid = iprot.readI64();
          struct.setSpriteidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newX = iprot.readI32();
          struct.setNewXIsSet(true);
        }
        if (incoming.get(2)) {
          struct.newY = iprot.readI32();
          struct.setNewYIsSet(true);
        }
        if (incoming.get(3)) {
          struct.oldX = iprot.readI32();
          struct.setOldXIsSet(true);
        }
        if (incoming.get(4)) {
          struct.oldY = iprot.readI32();
          struct.setOldYIsSet(true);
        }
      }
    }

  }

  public static class updateSpritePosition_result implements org.apache.thrift.TBase<updateSpritePosition_result, updateSpritePosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSpritePosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSpritePosition_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSpritePosition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSpritePosition_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSpritePosition_result.class, metaDataMap);
    }

    public updateSpritePosition_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSpritePosition_result(updateSpritePosition_result other) {
    }

    public updateSpritePosition_result deepCopy() {
      return new updateSpritePosition_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSpritePosition_result)
        return this.equals((updateSpritePosition_result)that);
      return false;
    }

    public boolean equals(updateSpritePosition_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSpritePosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSpritePosition_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSpritePosition_resultStandardSchemeFactory implements SchemeFactory {
      public updateSpritePosition_resultStandardScheme getScheme() {
        return new updateSpritePosition_resultStandardScheme();
      }
    }

    private static class updateSpritePosition_resultStandardScheme extends StandardScheme<updateSpritePosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSpritePosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSpritePosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSpritePosition_resultTupleSchemeFactory implements SchemeFactory {
      public updateSpritePosition_resultTupleScheme getScheme() {
        return new updateSpritePosition_resultTupleScheme();
      }
    }

    private static class updateSpritePosition_resultTupleScheme extends TupleScheme<updateSpritePosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSpritePosition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSpritePosition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class playerExit_args implements org.apache.thrift.TBase<playerExit_args, playerExit_args._Fields>, java.io.Serializable, Cloneable, Comparable<playerExit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("playerExit_args");

    private static final org.apache.thrift.protocol.TField ROLEID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_SERVER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("newServerKey", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new playerExit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new playerExit_argsTupleSchemeFactory());
    }

    public long roleid; // required
    public int newServerKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLEID((short)1, "roleid"),
      NEW_SERVER_KEY((short)2, "newServerKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLEID
            return ROLEID;
          case 2: // NEW_SERVER_KEY
            return NEW_SERVER_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROLEID_ISSET_ID = 0;
    private static final int __NEWSERVERKEY_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLEID, new org.apache.thrift.meta_data.FieldMetaData("roleid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NEW_SERVER_KEY, new org.apache.thrift.meta_data.FieldMetaData("newServerKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(playerExit_args.class, metaDataMap);
    }

    public playerExit_args() {
    }

    public playerExit_args(
      long roleid,
      int newServerKey)
    {
      this();
      this.roleid = roleid;
      setRoleidIsSet(true);
      this.newServerKey = newServerKey;
      setNewServerKeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public playerExit_args(playerExit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roleid = other.roleid;
      this.newServerKey = other.newServerKey;
    }

    public playerExit_args deepCopy() {
      return new playerExit_args(this);
    }

    @Override
    public void clear() {
      setRoleidIsSet(false);
      this.roleid = 0;
      setNewServerKeyIsSet(false);
      this.newServerKey = 0;
    }

    public long getRoleid() {
      return this.roleid;
    }

    public playerExit_args setRoleid(long roleid) {
      this.roleid = roleid;
      setRoleidIsSet(true);
      return this;
    }

    public void unsetRoleid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    /** Returns true if field roleid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleid() {
      return EncodingUtils.testBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    public void setRoleidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLEID_ISSET_ID, value);
    }

    public int getNewServerKey() {
      return this.newServerKey;
    }

    public playerExit_args setNewServerKey(int newServerKey) {
      this.newServerKey = newServerKey;
      setNewServerKeyIsSet(true);
      return this;
    }

    public void unsetNewServerKey() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWSERVERKEY_ISSET_ID);
    }

    /** Returns true if field newServerKey is set (has been assigned a value) and false otherwise */
    public boolean isSetNewServerKey() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWSERVERKEY_ISSET_ID);
    }

    public void setNewServerKeyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWSERVERKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLEID:
        if (value == null) {
          unsetRoleid();
        } else {
          setRoleid((Long)value);
        }
        break;

      case NEW_SERVER_KEY:
        if (value == null) {
          unsetNewServerKey();
        } else {
          setNewServerKey((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLEID:
        return getRoleid();

      case NEW_SERVER_KEY:
        return getNewServerKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLEID:
        return isSetRoleid();
      case NEW_SERVER_KEY:
        return isSetNewServerKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof playerExit_args)
        return this.equals((playerExit_args)that);
      return false;
    }

    public boolean equals(playerExit_args that) {
      if (that == null)
        return false;

      boolean this_present_roleid = true;
      boolean that_present_roleid = true;
      if (this_present_roleid || that_present_roleid) {
        if (!(this_present_roleid && that_present_roleid))
          return false;
        if (this.roleid != that.roleid)
          return false;
      }

      boolean this_present_newServerKey = true;
      boolean that_present_newServerKey = true;
      if (this_present_newServerKey || that_present_newServerKey) {
        if (!(this_present_newServerKey && that_present_newServerKey))
          return false;
        if (this.newServerKey != that.newServerKey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roleid = true;
      list.add(present_roleid);
      if (present_roleid)
        list.add(roleid);

      boolean present_newServerKey = true;
      list.add(present_newServerKey);
      if (present_newServerKey)
        list.add(newServerKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(playerExit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoleid()).compareTo(other.isSetRoleid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleid, other.roleid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewServerKey()).compareTo(other.isSetNewServerKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewServerKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newServerKey, other.newServerKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("playerExit_args(");
      boolean first = true;

      sb.append("roleid:");
      sb.append(this.roleid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newServerKey:");
      sb.append(this.newServerKey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class playerExit_argsStandardSchemeFactory implements SchemeFactory {
      public playerExit_argsStandardScheme getScheme() {
        return new playerExit_argsStandardScheme();
      }
    }

    private static class playerExit_argsStandardScheme extends StandardScheme<playerExit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, playerExit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.roleid = iprot.readI64();
                struct.setRoleidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_SERVER_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newServerKey = iprot.readI32();
                struct.setNewServerKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, playerExit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROLEID_FIELD_DESC);
        oprot.writeI64(struct.roleid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NEW_SERVER_KEY_FIELD_DESC);
        oprot.writeI32(struct.newServerKey);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class playerExit_argsTupleSchemeFactory implements SchemeFactory {
      public playerExit_argsTupleScheme getScheme() {
        return new playerExit_argsTupleScheme();
      }
    }

    private static class playerExit_argsTupleScheme extends TupleScheme<playerExit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, playerExit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoleid()) {
          optionals.set(0);
        }
        if (struct.isSetNewServerKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRoleid()) {
          oprot.writeI64(struct.roleid);
        }
        if (struct.isSetNewServerKey()) {
          oprot.writeI32(struct.newServerKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, playerExit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.roleid = iprot.readI64();
          struct.setRoleidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newServerKey = iprot.readI32();
          struct.setNewServerKeyIsSet(true);
        }
      }
    }

  }

  public static class playerExit_result implements org.apache.thrift.TBase<playerExit_result, playerExit_result._Fields>, java.io.Serializable, Cloneable, Comparable<playerExit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("playerExit_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new playerExit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new playerExit_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(playerExit_result.class, metaDataMap);
    }

    public playerExit_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public playerExit_result(playerExit_result other) {
    }

    public playerExit_result deepCopy() {
      return new playerExit_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof playerExit_result)
        return this.equals((playerExit_result)that);
      return false;
    }

    public boolean equals(playerExit_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(playerExit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("playerExit_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class playerExit_resultStandardSchemeFactory implements SchemeFactory {
      public playerExit_resultStandardScheme getScheme() {
        return new playerExit_resultStandardScheme();
      }
    }

    private static class playerExit_resultStandardScheme extends StandardScheme<playerExit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, playerExit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, playerExit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class playerExit_resultTupleSchemeFactory implements SchemeFactory {
      public playerExit_resultTupleScheme getScheme() {
        return new playerExit_resultTupleScheme();
      }
    }

    private static class playerExit_resultTupleScheme extends TupleScheme<playerExit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, playerExit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, playerExit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class playerExitSuccess_args implements org.apache.thrift.TBase<playerExitSuccess_args, playerExitSuccess_args._Fields>, java.io.Serializable, Cloneable, Comparable<playerExitSuccess_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("playerExitSuccess_args");

    private static final org.apache.thrift.protocol.TField ROLEID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_SERVER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("newServerKey", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new playerExitSuccess_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new playerExitSuccess_argsTupleSchemeFactory());
    }

    public long roleid; // required
    public int newServerKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLEID((short)1, "roleid"),
      NEW_SERVER_KEY((short)2, "newServerKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLEID
            return ROLEID;
          case 2: // NEW_SERVER_KEY
            return NEW_SERVER_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROLEID_ISSET_ID = 0;
    private static final int __NEWSERVERKEY_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLEID, new org.apache.thrift.meta_data.FieldMetaData("roleid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NEW_SERVER_KEY, new org.apache.thrift.meta_data.FieldMetaData("newServerKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(playerExitSuccess_args.class, metaDataMap);
    }

    public playerExitSuccess_args() {
    }

    public playerExitSuccess_args(
      long roleid,
      int newServerKey)
    {
      this();
      this.roleid = roleid;
      setRoleidIsSet(true);
      this.newServerKey = newServerKey;
      setNewServerKeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public playerExitSuccess_args(playerExitSuccess_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roleid = other.roleid;
      this.newServerKey = other.newServerKey;
    }

    public playerExitSuccess_args deepCopy() {
      return new playerExitSuccess_args(this);
    }

    @Override
    public void clear() {
      setRoleidIsSet(false);
      this.roleid = 0;
      setNewServerKeyIsSet(false);
      this.newServerKey = 0;
    }

    public long getRoleid() {
      return this.roleid;
    }

    public playerExitSuccess_args setRoleid(long roleid) {
      this.roleid = roleid;
      setRoleidIsSet(true);
      return this;
    }

    public void unsetRoleid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    /** Returns true if field roleid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleid() {
      return EncodingUtils.testBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    public void setRoleidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLEID_ISSET_ID, value);
    }

    public int getNewServerKey() {
      return this.newServerKey;
    }

    public playerExitSuccess_args setNewServerKey(int newServerKey) {
      this.newServerKey = newServerKey;
      setNewServerKeyIsSet(true);
      return this;
    }

    public void unsetNewServerKey() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWSERVERKEY_ISSET_ID);
    }

    /** Returns true if field newServerKey is set (has been assigned a value) and false otherwise */
    public boolean isSetNewServerKey() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWSERVERKEY_ISSET_ID);
    }

    public void setNewServerKeyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWSERVERKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLEID:
        if (value == null) {
          unsetRoleid();
        } else {
          setRoleid((Long)value);
        }
        break;

      case NEW_SERVER_KEY:
        if (value == null) {
          unsetNewServerKey();
        } else {
          setNewServerKey((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLEID:
        return getRoleid();

      case NEW_SERVER_KEY:
        return getNewServerKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLEID:
        return isSetRoleid();
      case NEW_SERVER_KEY:
        return isSetNewServerKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof playerExitSuccess_args)
        return this.equals((playerExitSuccess_args)that);
      return false;
    }

    public boolean equals(playerExitSuccess_args that) {
      if (that == null)
        return false;

      boolean this_present_roleid = true;
      boolean that_present_roleid = true;
      if (this_present_roleid || that_present_roleid) {
        if (!(this_present_roleid && that_present_roleid))
          return false;
        if (this.roleid != that.roleid)
          return false;
      }

      boolean this_present_newServerKey = true;
      boolean that_present_newServerKey = true;
      if (this_present_newServerKey || that_present_newServerKey) {
        if (!(this_present_newServerKey && that_present_newServerKey))
          return false;
        if (this.newServerKey != that.newServerKey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roleid = true;
      list.add(present_roleid);
      if (present_roleid)
        list.add(roleid);

      boolean present_newServerKey = true;
      list.add(present_newServerKey);
      if (present_newServerKey)
        list.add(newServerKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(playerExitSuccess_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoleid()).compareTo(other.isSetRoleid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleid, other.roleid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewServerKey()).compareTo(other.isSetNewServerKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewServerKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newServerKey, other.newServerKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("playerExitSuccess_args(");
      boolean first = true;

      sb.append("roleid:");
      sb.append(this.roleid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newServerKey:");
      sb.append(this.newServerKey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class playerExitSuccess_argsStandardSchemeFactory implements SchemeFactory {
      public playerExitSuccess_argsStandardScheme getScheme() {
        return new playerExitSuccess_argsStandardScheme();
      }
    }

    private static class playerExitSuccess_argsStandardScheme extends StandardScheme<playerExitSuccess_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, playerExitSuccess_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.roleid = iprot.readI64();
                struct.setRoleidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_SERVER_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newServerKey = iprot.readI32();
                struct.setNewServerKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, playerExitSuccess_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROLEID_FIELD_DESC);
        oprot.writeI64(struct.roleid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NEW_SERVER_KEY_FIELD_DESC);
        oprot.writeI32(struct.newServerKey);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class playerExitSuccess_argsTupleSchemeFactory implements SchemeFactory {
      public playerExitSuccess_argsTupleScheme getScheme() {
        return new playerExitSuccess_argsTupleScheme();
      }
    }

    private static class playerExitSuccess_argsTupleScheme extends TupleScheme<playerExitSuccess_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, playerExitSuccess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoleid()) {
          optionals.set(0);
        }
        if (struct.isSetNewServerKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRoleid()) {
          oprot.writeI64(struct.roleid);
        }
        if (struct.isSetNewServerKey()) {
          oprot.writeI32(struct.newServerKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, playerExitSuccess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.roleid = iprot.readI64();
          struct.setRoleidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newServerKey = iprot.readI32();
          struct.setNewServerKeyIsSet(true);
        }
      }
    }

  }

  public static class playerExitSuccess_result implements org.apache.thrift.TBase<playerExitSuccess_result, playerExitSuccess_result._Fields>, java.io.Serializable, Cloneable, Comparable<playerExitSuccess_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("playerExitSuccess_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new playerExitSuccess_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new playerExitSuccess_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(playerExitSuccess_result.class, metaDataMap);
    }

    public playerExitSuccess_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public playerExitSuccess_result(playerExitSuccess_result other) {
    }

    public playerExitSuccess_result deepCopy() {
      return new playerExitSuccess_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof playerExitSuccess_result)
        return this.equals((playerExitSuccess_result)that);
      return false;
    }

    public boolean equals(playerExitSuccess_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(playerExitSuccess_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("playerExitSuccess_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class playerExitSuccess_resultStandardSchemeFactory implements SchemeFactory {
      public playerExitSuccess_resultStandardScheme getScheme() {
        return new playerExitSuccess_resultStandardScheme();
      }
    }

    private static class playerExitSuccess_resultStandardScheme extends StandardScheme<playerExitSuccess_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, playerExitSuccess_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, playerExitSuccess_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class playerExitSuccess_resultTupleSchemeFactory implements SchemeFactory {
      public playerExitSuccess_resultTupleScheme getScheme() {
        return new playerExitSuccess_resultTupleScheme();
      }
    }

    private static class playerExitSuccess_resultTupleScheme extends TupleScheme<playerExitSuccess_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, playerExitSuccess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, playerExitSuccess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class offlineRole_args implements org.apache.thrift.TBase<offlineRole_args, offlineRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<offlineRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offlineRole_args");

    private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SESSIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField GATE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("gateKey", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new offlineRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new offlineRole_argsTupleSchemeFactory());
    }

    public long roleId; // required
    public long sessionid; // required
    public String gateKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLE_ID((short)1, "roleId"),
      SESSIONID((short)2, "sessionid"),
      GATE_KEY((short)3, "gateKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLE_ID
            return ROLE_ID;
          case 2: // SESSIONID
            return SESSIONID;
          case 3: // GATE_KEY
            return GATE_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROLEID_ISSET_ID = 0;
    private static final int __SESSIONID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SESSIONID, new org.apache.thrift.meta_data.FieldMetaData("sessionid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GATE_KEY, new org.apache.thrift.meta_data.FieldMetaData("gateKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offlineRole_args.class, metaDataMap);
    }

    public offlineRole_args() {
    }

    public offlineRole_args(
      long roleId,
      long sessionid,
      String gateKey)
    {
      this();
      this.roleId = roleId;
      setRoleIdIsSet(true);
      this.sessionid = sessionid;
      setSessionidIsSet(true);
      this.gateKey = gateKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offlineRole_args(offlineRole_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roleId = other.roleId;
      this.sessionid = other.sessionid;
      if (other.isSetGateKey()) {
        this.gateKey = other.gateKey;
      }
    }

    public offlineRole_args deepCopy() {
      return new offlineRole_args(this);
    }

    @Override
    public void clear() {
      setRoleIdIsSet(false);
      this.roleId = 0;
      setSessionidIsSet(false);
      this.sessionid = 0;
      this.gateKey = null;
    }

    public long getRoleId() {
      return this.roleId;
    }

    public offlineRole_args setRoleId(long roleId) {
      this.roleId = roleId;
      setRoleIdIsSet(true);
      return this;
    }

    public void unsetRoleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    /** Returns true if field roleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleId() {
      return EncodingUtils.testBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    public void setRoleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLEID_ISSET_ID, value);
    }

    public long getSessionid() {
      return this.sessionid;
    }

    public offlineRole_args setSessionid(long sessionid) {
      this.sessionid = sessionid;
      setSessionidIsSet(true);
      return this;
    }

    public void unsetSessionid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    /** Returns true if field sessionid is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionid() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    public void setSessionidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
    }

    public String getGateKey() {
      return this.gateKey;
    }

    public offlineRole_args setGateKey(String gateKey) {
      this.gateKey = gateKey;
      return this;
    }

    public void unsetGateKey() {
      this.gateKey = null;
    }

    /** Returns true if field gateKey is set (has been assigned a value) and false otherwise */
    public boolean isSetGateKey() {
      return this.gateKey != null;
    }

    public void setGateKeyIsSet(boolean value) {
      if (!value) {
        this.gateKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLE_ID:
        if (value == null) {
          unsetRoleId();
        } else {
          setRoleId((Long)value);
        }
        break;

      case SESSIONID:
        if (value == null) {
          unsetSessionid();
        } else {
          setSessionid((Long)value);
        }
        break;

      case GATE_KEY:
        if (value == null) {
          unsetGateKey();
        } else {
          setGateKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLE_ID:
        return getRoleId();

      case SESSIONID:
        return getSessionid();

      case GATE_KEY:
        return getGateKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLE_ID:
        return isSetRoleId();
      case SESSIONID:
        return isSetSessionid();
      case GATE_KEY:
        return isSetGateKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offlineRole_args)
        return this.equals((offlineRole_args)that);
      return false;
    }

    public boolean equals(offlineRole_args that) {
      if (that == null)
        return false;

      boolean this_present_roleId = true;
      boolean that_present_roleId = true;
      if (this_present_roleId || that_present_roleId) {
        if (!(this_present_roleId && that_present_roleId))
          return false;
        if (this.roleId != that.roleId)
          return false;
      }

      boolean this_present_sessionid = true;
      boolean that_present_sessionid = true;
      if (this_present_sessionid || that_present_sessionid) {
        if (!(this_present_sessionid && that_present_sessionid))
          return false;
        if (this.sessionid != that.sessionid)
          return false;
      }

      boolean this_present_gateKey = true && this.isSetGateKey();
      boolean that_present_gateKey = true && that.isSetGateKey();
      if (this_present_gateKey || that_present_gateKey) {
        if (!(this_present_gateKey && that_present_gateKey))
          return false;
        if (!this.gateKey.equals(that.gateKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roleId = true;
      list.add(present_roleId);
      if (present_roleId)
        list.add(roleId);

      boolean present_sessionid = true;
      list.add(present_sessionid);
      if (present_sessionid)
        list.add(sessionid);

      boolean present_gateKey = true && (isSetGateKey());
      list.add(present_gateKey);
      if (present_gateKey)
        list.add(gateKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(offlineRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoleId()).compareTo(other.isSetRoleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleId, other.roleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSessionid()).compareTo(other.isSetSessionid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionid, other.sessionid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGateKey()).compareTo(other.isSetGateKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGateKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gateKey, other.gateKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offlineRole_args(");
      boolean first = true;

      sb.append("roleId:");
      sb.append(this.roleId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionid:");
      sb.append(this.sessionid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("gateKey:");
      if (this.gateKey == null) {
        sb.append("null");
      } else {
        sb.append(this.gateKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class offlineRole_argsStandardSchemeFactory implements SchemeFactory {
      public offlineRole_argsStandardScheme getScheme() {
        return new offlineRole_argsStandardScheme();
      }
    }

    private static class offlineRole_argsStandardScheme extends StandardScheme<offlineRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, offlineRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.roleId = iprot.readI64();
                struct.setRoleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSIONID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sessionid = iprot.readI64();
                struct.setSessionidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GATE_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gateKey = iprot.readString();
                struct.setGateKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, offlineRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
        oprot.writeI64(struct.roleId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SESSIONID_FIELD_DESC);
        oprot.writeI64(struct.sessionid);
        oprot.writeFieldEnd();
        if (struct.gateKey != null) {
          oprot.writeFieldBegin(GATE_KEY_FIELD_DESC);
          oprot.writeString(struct.gateKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class offlineRole_argsTupleSchemeFactory implements SchemeFactory {
      public offlineRole_argsTupleScheme getScheme() {
        return new offlineRole_argsTupleScheme();
      }
    }

    private static class offlineRole_argsTupleScheme extends TupleScheme<offlineRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, offlineRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoleId()) {
          optionals.set(0);
        }
        if (struct.isSetSessionid()) {
          optionals.set(1);
        }
        if (struct.isSetGateKey()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRoleId()) {
          oprot.writeI64(struct.roleId);
        }
        if (struct.isSetSessionid()) {
          oprot.writeI64(struct.sessionid);
        }
        if (struct.isSetGateKey()) {
          oprot.writeString(struct.gateKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, offlineRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.roleId = iprot.readI64();
          struct.setRoleIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sessionid = iprot.readI64();
          struct.setSessionidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.gateKey = iprot.readString();
          struct.setGateKeyIsSet(true);
        }
      }
    }

  }

  public static class offlineRole_result implements org.apache.thrift.TBase<offlineRole_result, offlineRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<offlineRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offlineRole_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new offlineRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new offlineRole_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offlineRole_result.class, metaDataMap);
    }

    public offlineRole_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offlineRole_result(offlineRole_result other) {
    }

    public offlineRole_result deepCopy() {
      return new offlineRole_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offlineRole_result)
        return this.equals((offlineRole_result)that);
      return false;
    }

    public boolean equals(offlineRole_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(offlineRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offlineRole_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class offlineRole_resultStandardSchemeFactory implements SchemeFactory {
      public offlineRole_resultStandardScheme getScheme() {
        return new offlineRole_resultStandardScheme();
      }
    }

    private static class offlineRole_resultStandardScheme extends StandardScheme<offlineRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, offlineRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, offlineRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class offlineRole_resultTupleSchemeFactory implements SchemeFactory {
      public offlineRole_resultTupleScheme getScheme() {
        return new offlineRole_resultTupleScheme();
      }
    }

    private static class offlineRole_resultTupleScheme extends TupleScheme<offlineRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, offlineRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, offlineRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class offlineAllRole_args implements org.apache.thrift.TBase<offlineAllRole_args, offlineAllRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<offlineAllRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offlineAllRole_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new offlineAllRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new offlineAllRole_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offlineAllRole_args.class, metaDataMap);
    }

    public offlineAllRole_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offlineAllRole_args(offlineAllRole_args other) {
    }

    public offlineAllRole_args deepCopy() {
      return new offlineAllRole_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offlineAllRole_args)
        return this.equals((offlineAllRole_args)that);
      return false;
    }

    public boolean equals(offlineAllRole_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(offlineAllRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offlineAllRole_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class offlineAllRole_argsStandardSchemeFactory implements SchemeFactory {
      public offlineAllRole_argsStandardScheme getScheme() {
        return new offlineAllRole_argsStandardScheme();
      }
    }

    private static class offlineAllRole_argsStandardScheme extends StandardScheme<offlineAllRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, offlineAllRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, offlineAllRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class offlineAllRole_argsTupleSchemeFactory implements SchemeFactory {
      public offlineAllRole_argsTupleScheme getScheme() {
        return new offlineAllRole_argsTupleScheme();
      }
    }

    private static class offlineAllRole_argsTupleScheme extends TupleScheme<offlineAllRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, offlineAllRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, offlineAllRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class offlineAllRole_result implements org.apache.thrift.TBase<offlineAllRole_result, offlineAllRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<offlineAllRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offlineAllRole_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new offlineAllRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new offlineAllRole_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offlineAllRole_result.class, metaDataMap);
    }

    public offlineAllRole_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offlineAllRole_result(offlineAllRole_result other) {
    }

    public offlineAllRole_result deepCopy() {
      return new offlineAllRole_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offlineAllRole_result)
        return this.equals((offlineAllRole_result)that);
      return false;
    }

    public boolean equals(offlineAllRole_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(offlineAllRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offlineAllRole_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class offlineAllRole_resultStandardSchemeFactory implements SchemeFactory {
      public offlineAllRole_resultStandardScheme getScheme() {
        return new offlineAllRole_resultStandardScheme();
      }
    }

    private static class offlineAllRole_resultStandardScheme extends StandardScheme<offlineAllRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, offlineAllRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, offlineAllRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class offlineAllRole_resultTupleSchemeFactory implements SchemeFactory {
      public offlineAllRole_resultTupleScheme getScheme() {
        return new offlineAllRole_resultTupleScheme();
      }
    }

    private static class offlineAllRole_resultTupleScheme extends TupleScheme<offlineAllRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, offlineAllRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, offlineAllRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class requestSpriteDetail_args implements org.apache.thrift.TBase<requestSpriteDetail_args, requestSpriteDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestSpriteDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestSpriteDetail_args");

    private static final org.apache.thrift.protocol.TField SPRITEID_FIELD_DESC = new org.apache.thrift.protocol.TField("spriteid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_ROLEID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestRoleid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField SERVER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("serverKey", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestSpriteDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestSpriteDetail_argsTupleSchemeFactory());
    }

    public long spriteid; // required
    public long requestRoleid; // required
    public int serverKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPRITEID((short)1, "spriteid"),
      REQUEST_ROLEID((short)2, "requestRoleid"),
      SERVER_KEY((short)3, "serverKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPRITEID
            return SPRITEID;
          case 2: // REQUEST_ROLEID
            return REQUEST_ROLEID;
          case 3: // SERVER_KEY
            return SERVER_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPRITEID_ISSET_ID = 0;
    private static final int __REQUESTROLEID_ISSET_ID = 1;
    private static final int __SERVERKEY_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPRITEID, new org.apache.thrift.meta_data.FieldMetaData("spriteid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.REQUEST_ROLEID, new org.apache.thrift.meta_data.FieldMetaData("requestRoleid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SERVER_KEY, new org.apache.thrift.meta_data.FieldMetaData("serverKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestSpriteDetail_args.class, metaDataMap);
    }

    public requestSpriteDetail_args() {
    }

    public requestSpriteDetail_args(
      long spriteid,
      long requestRoleid,
      int serverKey)
    {
      this();
      this.spriteid = spriteid;
      setSpriteidIsSet(true);
      this.requestRoleid = requestRoleid;
      setRequestRoleidIsSet(true);
      this.serverKey = serverKey;
      setServerKeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestSpriteDetail_args(requestSpriteDetail_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.spriteid = other.spriteid;
      this.requestRoleid = other.requestRoleid;
      this.serverKey = other.serverKey;
    }

    public requestSpriteDetail_args deepCopy() {
      return new requestSpriteDetail_args(this);
    }

    @Override
    public void clear() {
      setSpriteidIsSet(false);
      this.spriteid = 0;
      setRequestRoleidIsSet(false);
      this.requestRoleid = 0;
      setServerKeyIsSet(false);
      this.serverKey = 0;
    }

    public long getSpriteid() {
      return this.spriteid;
    }

    public requestSpriteDetail_args setSpriteid(long spriteid) {
      this.spriteid = spriteid;
      setSpriteidIsSet(true);
      return this;
    }

    public void unsetSpriteid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    /** Returns true if field spriteid is set (has been assigned a value) and false otherwise */
    public boolean isSetSpriteid() {
      return EncodingUtils.testBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    public void setSpriteidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPRITEID_ISSET_ID, value);
    }

    public long getRequestRoleid() {
      return this.requestRoleid;
    }

    public requestSpriteDetail_args setRequestRoleid(long requestRoleid) {
      this.requestRoleid = requestRoleid;
      setRequestRoleidIsSet(true);
      return this;
    }

    public void unsetRequestRoleid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTROLEID_ISSET_ID);
    }

    /** Returns true if field requestRoleid is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestRoleid() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTROLEID_ISSET_ID);
    }

    public void setRequestRoleidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTROLEID_ISSET_ID, value);
    }

    public int getServerKey() {
      return this.serverKey;
    }

    public requestSpriteDetail_args setServerKey(int serverKey) {
      this.serverKey = serverKey;
      setServerKeyIsSet(true);
      return this;
    }

    public void unsetServerKey() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERKEY_ISSET_ID);
    }

    /** Returns true if field serverKey is set (has been assigned a value) and false otherwise */
    public boolean isSetServerKey() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERKEY_ISSET_ID);
    }

    public void setServerKeyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPRITEID:
        if (value == null) {
          unsetSpriteid();
        } else {
          setSpriteid((Long)value);
        }
        break;

      case REQUEST_ROLEID:
        if (value == null) {
          unsetRequestRoleid();
        } else {
          setRequestRoleid((Long)value);
        }
        break;

      case SERVER_KEY:
        if (value == null) {
          unsetServerKey();
        } else {
          setServerKey((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPRITEID:
        return getSpriteid();

      case REQUEST_ROLEID:
        return getRequestRoleid();

      case SERVER_KEY:
        return getServerKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPRITEID:
        return isSetSpriteid();
      case REQUEST_ROLEID:
        return isSetRequestRoleid();
      case SERVER_KEY:
        return isSetServerKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestSpriteDetail_args)
        return this.equals((requestSpriteDetail_args)that);
      return false;
    }

    public boolean equals(requestSpriteDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_spriteid = true;
      boolean that_present_spriteid = true;
      if (this_present_spriteid || that_present_spriteid) {
        if (!(this_present_spriteid && that_present_spriteid))
          return false;
        if (this.spriteid != that.spriteid)
          return false;
      }

      boolean this_present_requestRoleid = true;
      boolean that_present_requestRoleid = true;
      if (this_present_requestRoleid || that_present_requestRoleid) {
        if (!(this_present_requestRoleid && that_present_requestRoleid))
          return false;
        if (this.requestRoleid != that.requestRoleid)
          return false;
      }

      boolean this_present_serverKey = true;
      boolean that_present_serverKey = true;
      if (this_present_serverKey || that_present_serverKey) {
        if (!(this_present_serverKey && that_present_serverKey))
          return false;
        if (this.serverKey != that.serverKey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_spriteid = true;
      list.add(present_spriteid);
      if (present_spriteid)
        list.add(spriteid);

      boolean present_requestRoleid = true;
      list.add(present_requestRoleid);
      if (present_requestRoleid)
        list.add(requestRoleid);

      boolean present_serverKey = true;
      list.add(present_serverKey);
      if (present_serverKey)
        list.add(serverKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(requestSpriteDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpriteid()).compareTo(other.isSetSpriteid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpriteid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spriteid, other.spriteid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestRoleid()).compareTo(other.isSetRequestRoleid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestRoleid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestRoleid, other.requestRoleid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerKey()).compareTo(other.isSetServerKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverKey, other.serverKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestSpriteDetail_args(");
      boolean first = true;

      sb.append("spriteid:");
      sb.append(this.spriteid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestRoleid:");
      sb.append(this.requestRoleid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverKey:");
      sb.append(this.serverKey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestSpriteDetail_argsStandardSchemeFactory implements SchemeFactory {
      public requestSpriteDetail_argsStandardScheme getScheme() {
        return new requestSpriteDetail_argsStandardScheme();
      }
    }

    private static class requestSpriteDetail_argsStandardScheme extends StandardScheme<requestSpriteDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestSpriteDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPRITEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.spriteid = iprot.readI64();
                struct.setSpriteidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST_ROLEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestRoleid = iprot.readI64();
                struct.setRequestRoleidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERVER_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverKey = iprot.readI32();
                struct.setServerKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestSpriteDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SPRITEID_FIELD_DESC);
        oprot.writeI64(struct.spriteid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REQUEST_ROLEID_FIELD_DESC);
        oprot.writeI64(struct.requestRoleid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SERVER_KEY_FIELD_DESC);
        oprot.writeI32(struct.serverKey);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestSpriteDetail_argsTupleSchemeFactory implements SchemeFactory {
      public requestSpriteDetail_argsTupleScheme getScheme() {
        return new requestSpriteDetail_argsTupleScheme();
      }
    }

    private static class requestSpriteDetail_argsTupleScheme extends TupleScheme<requestSpriteDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestSpriteDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpriteid()) {
          optionals.set(0);
        }
        if (struct.isSetRequestRoleid()) {
          optionals.set(1);
        }
        if (struct.isSetServerKey()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSpriteid()) {
          oprot.writeI64(struct.spriteid);
        }
        if (struct.isSetRequestRoleid()) {
          oprot.writeI64(struct.requestRoleid);
        }
        if (struct.isSetServerKey()) {
          oprot.writeI32(struct.serverKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestSpriteDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.spriteid = iprot.readI64();
          struct.setSpriteidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.requestRoleid = iprot.readI64();
          struct.setRequestRoleidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.serverKey = iprot.readI32();
          struct.setServerKeyIsSet(true);
        }
      }
    }

  }

  public static class requestSpriteDetail_result implements org.apache.thrift.TBase<requestSpriteDetail_result, requestSpriteDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestSpriteDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestSpriteDetail_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestSpriteDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestSpriteDetail_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestSpriteDetail_result.class, metaDataMap);
    }

    public requestSpriteDetail_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestSpriteDetail_result(requestSpriteDetail_result other) {
    }

    public requestSpriteDetail_result deepCopy() {
      return new requestSpriteDetail_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestSpriteDetail_result)
        return this.equals((requestSpriteDetail_result)that);
      return false;
    }

    public boolean equals(requestSpriteDetail_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(requestSpriteDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestSpriteDetail_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestSpriteDetail_resultStandardSchemeFactory implements SchemeFactory {
      public requestSpriteDetail_resultStandardScheme getScheme() {
        return new requestSpriteDetail_resultStandardScheme();
      }
    }

    private static class requestSpriteDetail_resultStandardScheme extends StandardScheme<requestSpriteDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestSpriteDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestSpriteDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestSpriteDetail_resultTupleSchemeFactory implements SchemeFactory {
      public requestSpriteDetail_resultTupleScheme getScheme() {
        return new requestSpriteDetail_resultTupleScheme();
      }
    }

    private static class requestSpriteDetail_resultTupleScheme extends TupleScheme<requestSpriteDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestSpriteDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestSpriteDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class reqResourceSimpleInfo_args implements org.apache.thrift.TBase<reqResourceSimpleInfo_args, reqResourceSimpleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqResourceSimpleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqResourceSimpleInfo_args");

    private static final org.apache.thrift.protocol.TField SPRITEID_FIELD_DESC = new org.apache.thrift.protocol.TField("spriteid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqResourceSimpleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqResourceSimpleInfo_argsTupleSchemeFactory());
    }

    public long spriteid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPRITEID((short)1, "spriteid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPRITEID
            return SPRITEID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPRITEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPRITEID, new org.apache.thrift.meta_data.FieldMetaData("spriteid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqResourceSimpleInfo_args.class, metaDataMap);
    }

    public reqResourceSimpleInfo_args() {
    }

    public reqResourceSimpleInfo_args(
      long spriteid)
    {
      this();
      this.spriteid = spriteid;
      setSpriteidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqResourceSimpleInfo_args(reqResourceSimpleInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.spriteid = other.spriteid;
    }

    public reqResourceSimpleInfo_args deepCopy() {
      return new reqResourceSimpleInfo_args(this);
    }

    @Override
    public void clear() {
      setSpriteidIsSet(false);
      this.spriteid = 0;
    }

    public long getSpriteid() {
      return this.spriteid;
    }

    public reqResourceSimpleInfo_args setSpriteid(long spriteid) {
      this.spriteid = spriteid;
      setSpriteidIsSet(true);
      return this;
    }

    public void unsetSpriteid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    /** Returns true if field spriteid is set (has been assigned a value) and false otherwise */
    public boolean isSetSpriteid() {
      return EncodingUtils.testBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    public void setSpriteidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPRITEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPRITEID:
        if (value == null) {
          unsetSpriteid();
        } else {
          setSpriteid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPRITEID:
        return getSpriteid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPRITEID:
        return isSetSpriteid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqResourceSimpleInfo_args)
        return this.equals((reqResourceSimpleInfo_args)that);
      return false;
    }

    public boolean equals(reqResourceSimpleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_spriteid = true;
      boolean that_present_spriteid = true;
      if (this_present_spriteid || that_present_spriteid) {
        if (!(this_present_spriteid && that_present_spriteid))
          return false;
        if (this.spriteid != that.spriteid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_spriteid = true;
      list.add(present_spriteid);
      if (present_spriteid)
        list.add(spriteid);

      return list.hashCode();
    }

    @Override
    public int compareTo(reqResourceSimpleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpriteid()).compareTo(other.isSetSpriteid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpriteid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spriteid, other.spriteid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqResourceSimpleInfo_args(");
      boolean first = true;

      sb.append("spriteid:");
      sb.append(this.spriteid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqResourceSimpleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public reqResourceSimpleInfo_argsStandardScheme getScheme() {
        return new reqResourceSimpleInfo_argsStandardScheme();
      }
    }

    private static class reqResourceSimpleInfo_argsStandardScheme extends StandardScheme<reqResourceSimpleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqResourceSimpleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPRITEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.spriteid = iprot.readI64();
                struct.setSpriteidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqResourceSimpleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SPRITEID_FIELD_DESC);
        oprot.writeI64(struct.spriteid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqResourceSimpleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public reqResourceSimpleInfo_argsTupleScheme getScheme() {
        return new reqResourceSimpleInfo_argsTupleScheme();
      }
    }

    private static class reqResourceSimpleInfo_argsTupleScheme extends TupleScheme<reqResourceSimpleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqResourceSimpleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpriteid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSpriteid()) {
          oprot.writeI64(struct.spriteid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqResourceSimpleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.spriteid = iprot.readI64();
          struct.setSpriteidIsSet(true);
        }
      }
    }

  }

  public static class reqResourceSimpleInfo_result implements org.apache.thrift.TBase<reqResourceSimpleInfo_result, reqResourceSimpleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqResourceSimpleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqResourceSimpleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqResourceSimpleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqResourceSimpleInfo_resultTupleSchemeFactory());
    }

    public L2WResourceSimpleSprite success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, L2WResourceSimpleSprite.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqResourceSimpleInfo_result.class, metaDataMap);
    }

    public reqResourceSimpleInfo_result() {
    }

    public reqResourceSimpleInfo_result(
      L2WResourceSimpleSprite success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqResourceSimpleInfo_result(reqResourceSimpleInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new L2WResourceSimpleSprite(other.success);
      }
    }

    public reqResourceSimpleInfo_result deepCopy() {
      return new reqResourceSimpleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public L2WResourceSimpleSprite getSuccess() {
      return this.success;
    }

    public reqResourceSimpleInfo_result setSuccess(L2WResourceSimpleSprite success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((L2WResourceSimpleSprite)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqResourceSimpleInfo_result)
        return this.equals((reqResourceSimpleInfo_result)that);
      return false;
    }

    public boolean equals(reqResourceSimpleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(reqResourceSimpleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqResourceSimpleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqResourceSimpleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public reqResourceSimpleInfo_resultStandardScheme getScheme() {
        return new reqResourceSimpleInfo_resultStandardScheme();
      }
    }

    private static class reqResourceSimpleInfo_resultStandardScheme extends StandardScheme<reqResourceSimpleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqResourceSimpleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new L2WResourceSimpleSprite();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqResourceSimpleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqResourceSimpleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public reqResourceSimpleInfo_resultTupleScheme getScheme() {
        return new reqResourceSimpleInfo_resultTupleScheme();
      }
    }

    private static class reqResourceSimpleInfo_resultTupleScheme extends TupleScheme<reqResourceSimpleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqResourceSimpleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqResourceSimpleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new L2WResourceSimpleSprite();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class resolveConflictResule_args implements org.apache.thrift.TBase<resolveConflictResule_args, resolveConflictResule_args._Fields>, java.io.Serializable, Cloneable, Comparable<resolveConflictResule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolveConflictResule_args");

    private static final org.apache.thrift.protocol.TField L2W_CONFLICT_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("l2wConflictResult", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolveConflictResule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolveConflictResule_argsTupleSchemeFactory());
    }

    public L2WConflictResult l2wConflictResult; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      L2W_CONFLICT_RESULT((short)1, "l2wConflictResult");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // L2W_CONFLICT_RESULT
            return L2W_CONFLICT_RESULT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.L2W_CONFLICT_RESULT, new org.apache.thrift.meta_data.FieldMetaData("l2wConflictResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, L2WConflictResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolveConflictResule_args.class, metaDataMap);
    }

    public resolveConflictResule_args() {
    }

    public resolveConflictResule_args(
      L2WConflictResult l2wConflictResult)
    {
      this();
      this.l2wConflictResult = l2wConflictResult;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolveConflictResule_args(resolveConflictResule_args other) {
      if (other.isSetL2wConflictResult()) {
        this.l2wConflictResult = new L2WConflictResult(other.l2wConflictResult);
      }
    }

    public resolveConflictResule_args deepCopy() {
      return new resolveConflictResule_args(this);
    }

    @Override
    public void clear() {
      this.l2wConflictResult = null;
    }

    public L2WConflictResult getL2wConflictResult() {
      return this.l2wConflictResult;
    }

    public resolveConflictResule_args setL2wConflictResult(L2WConflictResult l2wConflictResult) {
      this.l2wConflictResult = l2wConflictResult;
      return this;
    }

    public void unsetL2wConflictResult() {
      this.l2wConflictResult = null;
    }

    /** Returns true if field l2wConflictResult is set (has been assigned a value) and false otherwise */
    public boolean isSetL2wConflictResult() {
      return this.l2wConflictResult != null;
    }

    public void setL2wConflictResultIsSet(boolean value) {
      if (!value) {
        this.l2wConflictResult = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case L2W_CONFLICT_RESULT:
        if (value == null) {
          unsetL2wConflictResult();
        } else {
          setL2wConflictResult((L2WConflictResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case L2W_CONFLICT_RESULT:
        return getL2wConflictResult();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case L2W_CONFLICT_RESULT:
        return isSetL2wConflictResult();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolveConflictResule_args)
        return this.equals((resolveConflictResule_args)that);
      return false;
    }

    public boolean equals(resolveConflictResule_args that) {
      if (that == null)
        return false;

      boolean this_present_l2wConflictResult = true && this.isSetL2wConflictResult();
      boolean that_present_l2wConflictResult = true && that.isSetL2wConflictResult();
      if (this_present_l2wConflictResult || that_present_l2wConflictResult) {
        if (!(this_present_l2wConflictResult && that_present_l2wConflictResult))
          return false;
        if (!this.l2wConflictResult.equals(that.l2wConflictResult))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_l2wConflictResult = true && (isSetL2wConflictResult());
      list.add(present_l2wConflictResult);
      if (present_l2wConflictResult)
        list.add(l2wConflictResult);

      return list.hashCode();
    }

    @Override
    public int compareTo(resolveConflictResule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetL2wConflictResult()).compareTo(other.isSetL2wConflictResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetL2wConflictResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l2wConflictResult, other.l2wConflictResult);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolveConflictResule_args(");
      boolean first = true;

      sb.append("l2wConflictResult:");
      if (this.l2wConflictResult == null) {
        sb.append("null");
      } else {
        sb.append(this.l2wConflictResult);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (l2wConflictResult != null) {
        l2wConflictResult.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolveConflictResule_argsStandardSchemeFactory implements SchemeFactory {
      public resolveConflictResule_argsStandardScheme getScheme() {
        return new resolveConflictResule_argsStandardScheme();
      }
    }

    private static class resolveConflictResule_argsStandardScheme extends StandardScheme<resolveConflictResule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolveConflictResule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // L2W_CONFLICT_RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.l2wConflictResult = new L2WConflictResult();
                struct.l2wConflictResult.read(iprot);
                struct.setL2wConflictResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolveConflictResule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.l2wConflictResult != null) {
          oprot.writeFieldBegin(L2W_CONFLICT_RESULT_FIELD_DESC);
          struct.l2wConflictResult.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolveConflictResule_argsTupleSchemeFactory implements SchemeFactory {
      public resolveConflictResule_argsTupleScheme getScheme() {
        return new resolveConflictResule_argsTupleScheme();
      }
    }

    private static class resolveConflictResule_argsTupleScheme extends TupleScheme<resolveConflictResule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolveConflictResule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetL2wConflictResult()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetL2wConflictResult()) {
          struct.l2wConflictResult.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolveConflictResule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.l2wConflictResult = new L2WConflictResult();
          struct.l2wConflictResult.read(iprot);
          struct.setL2wConflictResultIsSet(true);
        }
      }
    }

  }

  public static class resolveConflictResule_result implements org.apache.thrift.TBase<resolveConflictResule_result, resolveConflictResule_result._Fields>, java.io.Serializable, Cloneable, Comparable<resolveConflictResule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolveConflictResule_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolveConflictResule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolveConflictResule_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolveConflictResule_result.class, metaDataMap);
    }

    public resolveConflictResule_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolveConflictResule_result(resolveConflictResule_result other) {
    }

    public resolveConflictResule_result deepCopy() {
      return new resolveConflictResule_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolveConflictResule_result)
        return this.equals((resolveConflictResule_result)that);
      return false;
    }

    public boolean equals(resolveConflictResule_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(resolveConflictResule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolveConflictResule_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolveConflictResule_resultStandardSchemeFactory implements SchemeFactory {
      public resolveConflictResule_resultStandardScheme getScheme() {
        return new resolveConflictResule_resultStandardScheme();
      }
    }

    private static class resolveConflictResule_resultStandardScheme extends StandardScheme<resolveConflictResule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolveConflictResule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolveConflictResule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolveConflictResule_resultTupleSchemeFactory implements SchemeFactory {
      public resolveConflictResule_resultTupleScheme getScheme() {
        return new resolveConflictResule_resultTupleScheme();
      }
    }

    private static class resolveConflictResule_resultTupleScheme extends TupleScheme<resolveConflictResule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolveConflictResule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolveConflictResule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getTroopInfo_args implements org.apache.thrift.TBase<getTroopInfo_args, getTroopInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTroopInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTroopInfo_args");

    private static final org.apache.thrift.protocol.TField SPRITEID_FIELD_DESC = new org.apache.thrift.protocol.TField("spriteid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTroopInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTroopInfo_argsTupleSchemeFactory());
    }

    public long spriteid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPRITEID((short)1, "spriteid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPRITEID
            return SPRITEID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPRITEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPRITEID, new org.apache.thrift.meta_data.FieldMetaData("spriteid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTroopInfo_args.class, metaDataMap);
    }

    public getTroopInfo_args() {
    }

    public getTroopInfo_args(
      long spriteid)
    {
      this();
      this.spriteid = spriteid;
      setSpriteidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTroopInfo_args(getTroopInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.spriteid = other.spriteid;
    }

    public getTroopInfo_args deepCopy() {
      return new getTroopInfo_args(this);
    }

    @Override
    public void clear() {
      setSpriteidIsSet(false);
      this.spriteid = 0;
    }

    public long getSpriteid() {
      return this.spriteid;
    }

    public getTroopInfo_args setSpriteid(long spriteid) {
      this.spriteid = spriteid;
      setSpriteidIsSet(true);
      return this;
    }

    public void unsetSpriteid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    /** Returns true if field spriteid is set (has been assigned a value) and false otherwise */
    public boolean isSetSpriteid() {
      return EncodingUtils.testBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    public void setSpriteidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPRITEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPRITEID:
        if (value == null) {
          unsetSpriteid();
        } else {
          setSpriteid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPRITEID:
        return getSpriteid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPRITEID:
        return isSetSpriteid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTroopInfo_args)
        return this.equals((getTroopInfo_args)that);
      return false;
    }

    public boolean equals(getTroopInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_spriteid = true;
      boolean that_present_spriteid = true;
      if (this_present_spriteid || that_present_spriteid) {
        if (!(this_present_spriteid && that_present_spriteid))
          return false;
        if (this.spriteid != that.spriteid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_spriteid = true;
      list.add(present_spriteid);
      if (present_spriteid)
        list.add(spriteid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTroopInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpriteid()).compareTo(other.isSetSpriteid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpriteid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spriteid, other.spriteid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTroopInfo_args(");
      boolean first = true;

      sb.append("spriteid:");
      sb.append(this.spriteid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTroopInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getTroopInfo_argsStandardScheme getScheme() {
        return new getTroopInfo_argsStandardScheme();
      }
    }

    private static class getTroopInfo_argsStandardScheme extends StandardScheme<getTroopInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTroopInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPRITEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.spriteid = iprot.readI64();
                struct.setSpriteidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTroopInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SPRITEID_FIELD_DESC);
        oprot.writeI64(struct.spriteid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTroopInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getTroopInfo_argsTupleScheme getScheme() {
        return new getTroopInfo_argsTupleScheme();
      }
    }

    private static class getTroopInfo_argsTupleScheme extends TupleScheme<getTroopInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTroopInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpriteid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSpriteid()) {
          oprot.writeI64(struct.spriteid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTroopInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.spriteid = iprot.readI64();
          struct.setSpriteidIsSet(true);
        }
      }
    }

  }

  public static class getTroopInfo_result implements org.apache.thrift.TBase<getTroopInfo_result, getTroopInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTroopInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTroopInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTroopInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTroopInfo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTroopInfo_result.class, metaDataMap);
    }

    public getTroopInfo_result() {
    }

    public getTroopInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTroopInfo_result(getTroopInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getTroopInfo_result deepCopy() {
      return new getTroopInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getTroopInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTroopInfo_result)
        return this.equals((getTroopInfo_result)that);
      return false;
    }

    public boolean equals(getTroopInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTroopInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTroopInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTroopInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getTroopInfo_resultStandardScheme getScheme() {
        return new getTroopInfo_resultStandardScheme();
      }
    }

    private static class getTroopInfo_resultStandardScheme extends StandardScheme<getTroopInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTroopInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTroopInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTroopInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getTroopInfo_resultTupleScheme getScheme() {
        return new getTroopInfo_resultTupleScheme();
      }
    }

    private static class getTroopInfo_resultTupleScheme extends TupleScheme<getTroopInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTroopInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTroopInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateSprite_args implements org.apache.thrift.TBase<updateSprite_args, updateSprite_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSprite_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSprite_args");

    private static final org.apache.thrift.protocol.TField SPRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("sprite", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSprite_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSprite_argsTupleSchemeFactory());
    }

    public RPC_Sprite sprite; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPRITE((short)-1, "sprite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // SPRITE
            return SPRITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPRITE, new org.apache.thrift.meta_data.FieldMetaData("sprite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC_Sprite.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSprite_args.class, metaDataMap);
    }

    public updateSprite_args() {
    }

    public updateSprite_args(
      RPC_Sprite sprite)
    {
      this();
      this.sprite = sprite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSprite_args(updateSprite_args other) {
      if (other.isSetSprite()) {
        this.sprite = new RPC_Sprite(other.sprite);
      }
    }

    public updateSprite_args deepCopy() {
      return new updateSprite_args(this);
    }

    @Override
    public void clear() {
      this.sprite = null;
    }

    public RPC_Sprite getSprite() {
      return this.sprite;
    }

    public updateSprite_args setSprite(RPC_Sprite sprite) {
      this.sprite = sprite;
      return this;
    }

    public void unsetSprite() {
      this.sprite = null;
    }

    /** Returns true if field sprite is set (has been assigned a value) and false otherwise */
    public boolean isSetSprite() {
      return this.sprite != null;
    }

    public void setSpriteIsSet(boolean value) {
      if (!value) {
        this.sprite = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPRITE:
        if (value == null) {
          unsetSprite();
        } else {
          setSprite((RPC_Sprite)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPRITE:
        return getSprite();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPRITE:
        return isSetSprite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSprite_args)
        return this.equals((updateSprite_args)that);
      return false;
    }

    public boolean equals(updateSprite_args that) {
      if (that == null)
        return false;

      boolean this_present_sprite = true && this.isSetSprite();
      boolean that_present_sprite = true && that.isSetSprite();
      if (this_present_sprite || that_present_sprite) {
        if (!(this_present_sprite && that_present_sprite))
          return false;
        if (!this.sprite.equals(that.sprite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sprite = true && (isSetSprite());
      list.add(present_sprite);
      if (present_sprite)
        list.add(sprite);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSprite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSprite()).compareTo(other.isSetSprite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSprite()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sprite, other.sprite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSprite_args(");
      boolean first = true;

      sb.append("sprite:");
      if (this.sprite == null) {
        sb.append("null");
      } else {
        sb.append(this.sprite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sprite != null) {
        sprite.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSprite_argsStandardSchemeFactory implements SchemeFactory {
      public updateSprite_argsStandardScheme getScheme() {
        return new updateSprite_argsStandardScheme();
      }
    }

    private static class updateSprite_argsStandardScheme extends StandardScheme<updateSprite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSprite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // SPRITE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sprite = new RPC_Sprite();
                struct.sprite.read(iprot);
                struct.setSpriteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSprite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sprite != null) {
          oprot.writeFieldBegin(SPRITE_FIELD_DESC);
          struct.sprite.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSprite_argsTupleSchemeFactory implements SchemeFactory {
      public updateSprite_argsTupleScheme getScheme() {
        return new updateSprite_argsTupleScheme();
      }
    }

    private static class updateSprite_argsTupleScheme extends TupleScheme<updateSprite_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSprite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSprite()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSprite()) {
          struct.sprite.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSprite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sprite = new RPC_Sprite();
          struct.sprite.read(iprot);
          struct.setSpriteIsSet(true);
        }
      }
    }

  }

  public static class updateSprite_result implements org.apache.thrift.TBase<updateSprite_result, updateSprite_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSprite_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSprite_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSprite_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSprite_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSprite_result.class, metaDataMap);
    }

    public updateSprite_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSprite_result(updateSprite_result other) {
    }

    public updateSprite_result deepCopy() {
      return new updateSprite_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSprite_result)
        return this.equals((updateSprite_result)that);
      return false;
    }

    public boolean equals(updateSprite_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSprite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSprite_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSprite_resultStandardSchemeFactory implements SchemeFactory {
      public updateSprite_resultStandardScheme getScheme() {
        return new updateSprite_resultStandardScheme();
      }
    }

    private static class updateSprite_resultStandardScheme extends StandardScheme<updateSprite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSprite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSprite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSprite_resultTupleSchemeFactory implements SchemeFactory {
      public updateSprite_resultTupleScheme getScheme() {
        return new updateSprite_resultTupleScheme();
      }
    }

    private static class updateSprite_resultTupleScheme extends TupleScheme<updateSprite_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSprite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSprite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
