/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xgame.framework.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-18")
public class W2lVectorInfo implements org.apache.thrift.TBase<W2lVectorInfo, W2lVectorInfo._Fields>, java.io.Serializable, Cloneable, Comparable<W2lVectorInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("W2lVectorInfo");

  private static final org.apache.thrift.protocol.TField SPRITE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("spriteName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField Y_FIELD_DESC = new org.apache.thrift.protocol.TField("y", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TX_FIELD_DESC = new org.apache.thrift.protocol.TField("tx", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TY_FIELD_DESC = new org.apache.thrift.protocol.TField("ty", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SELF_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("selfUid", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField LOCATE_X_FIELD_DESC = new org.apache.thrift.protocol.TField("locateX", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField LOCATE_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("locateY", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new W2lVectorInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new W2lVectorInfoTupleSchemeFactory());
  }

  public String spriteName; // required
  public long uid; // required 目标点id
  public int x; // required
  public int y; // required
  public int tx; // required
  public int ty; // required
  public int startTime; // required
  public int endTime; // required
  public long selfUid; // required 自己方的id
  public long taskId; // required
  public int locateX; // required
  public int locateY; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SPRITE_NAME((short)1, "spriteName"),
    UID((short)2, "uid"),
    X((short)3, "x"),
    Y((short)4, "y"),
    TX((short)5, "tx"),
    TY((short)6, "ty"),
    START_TIME((short)7, "startTime"),
    END_TIME((short)8, "endTime"),
    SELF_UID((short)9, "selfUid"),
    TASK_ID((short)10, "taskId"),
    LOCATE_X((short)11, "locateX"),
    LOCATE_Y((short)12, "locateY");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPRITE_NAME
          return SPRITE_NAME;
        case 2: // UID
          return UID;
        case 3: // X
          return X;
        case 4: // Y
          return Y;
        case 5: // TX
          return TX;
        case 6: // TY
          return TY;
        case 7: // START_TIME
          return START_TIME;
        case 8: // END_TIME
          return END_TIME;
        case 9: // SELF_UID
          return SELF_UID;
        case 10: // TASK_ID
          return TASK_ID;
        case 11: // LOCATE_X
          return LOCATE_X;
        case 12: // LOCATE_Y
          return LOCATE_Y;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UID_ISSET_ID = 0;
  private static final int __X_ISSET_ID = 1;
  private static final int __Y_ISSET_ID = 2;
  private static final int __TX_ISSET_ID = 3;
  private static final int __TY_ISSET_ID = 4;
  private static final int __STARTTIME_ISSET_ID = 5;
  private static final int __ENDTIME_ISSET_ID = 6;
  private static final int __SELFUID_ISSET_ID = 7;
  private static final int __TASKID_ISSET_ID = 8;
  private static final int __LOCATEX_ISSET_ID = 9;
  private static final int __LOCATEY_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPRITE_NAME, new org.apache.thrift.meta_data.FieldMetaData("spriteName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.Y, new org.apache.thrift.meta_data.FieldMetaData("y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TX, new org.apache.thrift.meta_data.FieldMetaData("tx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TY, new org.apache.thrift.meta_data.FieldMetaData("ty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELF_UID, new org.apache.thrift.meta_data.FieldMetaData("selfUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOCATE_X, new org.apache.thrift.meta_data.FieldMetaData("locateX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCATE_Y, new org.apache.thrift.meta_data.FieldMetaData("locateY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(W2lVectorInfo.class, metaDataMap);
  }

  public W2lVectorInfo() {
  }

  public W2lVectorInfo(
    String spriteName,
    long uid,
    int x,
    int y,
    int tx,
    int ty,
    int startTime,
    int endTime,
    long selfUid,
    long taskId,
    int locateX,
    int locateY)
  {
    this();
    this.spriteName = spriteName;
    this.uid = uid;
    setUidIsSet(true);
    this.x = x;
    setXIsSet(true);
    this.y = y;
    setYIsSet(true);
    this.tx = tx;
    setTxIsSet(true);
    this.ty = ty;
    setTyIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.selfUid = selfUid;
    setSelfUidIsSet(true);
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.locateX = locateX;
    setLocateXIsSet(true);
    this.locateY = locateY;
    setLocateYIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public W2lVectorInfo(W2lVectorInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSpriteName()) {
      this.spriteName = other.spriteName;
    }
    this.uid = other.uid;
    this.x = other.x;
    this.y = other.y;
    this.tx = other.tx;
    this.ty = other.ty;
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    this.selfUid = other.selfUid;
    this.taskId = other.taskId;
    this.locateX = other.locateX;
    this.locateY = other.locateY;
  }

  public W2lVectorInfo deepCopy() {
    return new W2lVectorInfo(this);
  }

  @Override
  public void clear() {
    this.spriteName = null;
    setUidIsSet(false);
    this.uid = 0;
    setXIsSet(false);
    this.x = 0;
    setYIsSet(false);
    this.y = 0;
    setTxIsSet(false);
    this.tx = 0;
    setTyIsSet(false);
    this.ty = 0;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    setSelfUidIsSet(false);
    this.selfUid = 0;
    setTaskIdIsSet(false);
    this.taskId = 0;
    setLocateXIsSet(false);
    this.locateX = 0;
    setLocateYIsSet(false);
    this.locateY = 0;
  }

  public String getSpriteName() {
    return this.spriteName;
  }

  public W2lVectorInfo setSpriteName(String spriteName) {
    this.spriteName = spriteName;
    return this;
  }

  public void unsetSpriteName() {
    this.spriteName = null;
  }

  /** Returns true if field spriteName is set (has been assigned a value) and false otherwise */
  public boolean isSetSpriteName() {
    return this.spriteName != null;
  }

  public void setSpriteNameIsSet(boolean value) {
    if (!value) {
      this.spriteName = null;
    }
  }

  public long getUid() {
    return this.uid;
  }

  public W2lVectorInfo setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public int getX() {
    return this.x;
  }

  public W2lVectorInfo setX(int x) {
    this.x = x;
    setXIsSet(true);
    return this;
  }

  public void unsetX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __X_ISSET_ID);
  }

  /** Returns true if field x is set (has been assigned a value) and false otherwise */
  public boolean isSetX() {
    return EncodingUtils.testBit(__isset_bitfield, __X_ISSET_ID);
  }

  public void setXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __X_ISSET_ID, value);
  }

  public int getY() {
    return this.y;
  }

  public W2lVectorInfo setY(int y) {
    this.y = y;
    setYIsSet(true);
    return this;
  }

  public void unsetY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __Y_ISSET_ID);
  }

  /** Returns true if field y is set (has been assigned a value) and false otherwise */
  public boolean isSetY() {
    return EncodingUtils.testBit(__isset_bitfield, __Y_ISSET_ID);
  }

  public void setYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __Y_ISSET_ID, value);
  }

  public int getTx() {
    return this.tx;
  }

  public W2lVectorInfo setTx(int tx) {
    this.tx = tx;
    setTxIsSet(true);
    return this;
  }

  public void unsetTx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TX_ISSET_ID);
  }

  /** Returns true if field tx is set (has been assigned a value) and false otherwise */
  public boolean isSetTx() {
    return EncodingUtils.testBit(__isset_bitfield, __TX_ISSET_ID);
  }

  public void setTxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TX_ISSET_ID, value);
  }

  public int getTy() {
    return this.ty;
  }

  public W2lVectorInfo setTy(int ty) {
    this.ty = ty;
    setTyIsSet(true);
    return this;
  }

  public void unsetTy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TY_ISSET_ID);
  }

  /** Returns true if field ty is set (has been assigned a value) and false otherwise */
  public boolean isSetTy() {
    return EncodingUtils.testBit(__isset_bitfield, __TY_ISSET_ID);
  }

  public void setTyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TY_ISSET_ID, value);
  }

  public int getStartTime() {
    return this.startTime;
  }

  public W2lVectorInfo setStartTime(int startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public int getEndTime() {
    return this.endTime;
  }

  public W2lVectorInfo setEndTime(int endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public long getSelfUid() {
    return this.selfUid;
  }

  public W2lVectorInfo setSelfUid(long selfUid) {
    this.selfUid = selfUid;
    setSelfUidIsSet(true);
    return this;
  }

  public void unsetSelfUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELFUID_ISSET_ID);
  }

  /** Returns true if field selfUid is set (has been assigned a value) and false otherwise */
  public boolean isSetSelfUid() {
    return EncodingUtils.testBit(__isset_bitfield, __SELFUID_ISSET_ID);
  }

  public void setSelfUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELFUID_ISSET_ID, value);
  }

  public long getTaskId() {
    return this.taskId;
  }

  public W2lVectorInfo setTaskId(long taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public int getLocateX() {
    return this.locateX;
  }

  public W2lVectorInfo setLocateX(int locateX) {
    this.locateX = locateX;
    setLocateXIsSet(true);
    return this;
  }

  public void unsetLocateX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCATEX_ISSET_ID);
  }

  /** Returns true if field locateX is set (has been assigned a value) and false otherwise */
  public boolean isSetLocateX() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCATEX_ISSET_ID);
  }

  public void setLocateXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCATEX_ISSET_ID, value);
  }

  public int getLocateY() {
    return this.locateY;
  }

  public W2lVectorInfo setLocateY(int locateY) {
    this.locateY = locateY;
    setLocateYIsSet(true);
    return this;
  }

  public void unsetLocateY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCATEY_ISSET_ID);
  }

  /** Returns true if field locateY is set (has been assigned a value) and false otherwise */
  public boolean isSetLocateY() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCATEY_ISSET_ID);
  }

  public void setLocateYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCATEY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SPRITE_NAME:
      if (value == null) {
        unsetSpriteName();
      } else {
        setSpriteName((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case X:
      if (value == null) {
        unsetX();
      } else {
        setX((Integer)value);
      }
      break;

    case Y:
      if (value == null) {
        unsetY();
      } else {
        setY((Integer)value);
      }
      break;

    case TX:
      if (value == null) {
        unsetTx();
      } else {
        setTx((Integer)value);
      }
      break;

    case TY:
      if (value == null) {
        unsetTy();
      } else {
        setTy((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Integer)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Integer)value);
      }
      break;

    case SELF_UID:
      if (value == null) {
        unsetSelfUid();
      } else {
        setSelfUid((Long)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Long)value);
      }
      break;

    case LOCATE_X:
      if (value == null) {
        unsetLocateX();
      } else {
        setLocateX((Integer)value);
      }
      break;

    case LOCATE_Y:
      if (value == null) {
        unsetLocateY();
      } else {
        setLocateY((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SPRITE_NAME:
      return getSpriteName();

    case UID:
      return getUid();

    case X:
      return getX();

    case Y:
      return getY();

    case TX:
      return getTx();

    case TY:
      return getTy();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case SELF_UID:
      return getSelfUid();

    case TASK_ID:
      return getTaskId();

    case LOCATE_X:
      return getLocateX();

    case LOCATE_Y:
      return getLocateY();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SPRITE_NAME:
      return isSetSpriteName();
    case UID:
      return isSetUid();
    case X:
      return isSetX();
    case Y:
      return isSetY();
    case TX:
      return isSetTx();
    case TY:
      return isSetTy();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case SELF_UID:
      return isSetSelfUid();
    case TASK_ID:
      return isSetTaskId();
    case LOCATE_X:
      return isSetLocateX();
    case LOCATE_Y:
      return isSetLocateY();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof W2lVectorInfo)
      return this.equals((W2lVectorInfo)that);
    return false;
  }

  public boolean equals(W2lVectorInfo that) {
    if (that == null)
      return false;

    boolean this_present_spriteName = true && this.isSetSpriteName();
    boolean that_present_spriteName = true && that.isSetSpriteName();
    if (this_present_spriteName || that_present_spriteName) {
      if (!(this_present_spriteName && that_present_spriteName))
        return false;
      if (!this.spriteName.equals(that.spriteName))
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_x = true;
    boolean that_present_x = true;
    if (this_present_x || that_present_x) {
      if (!(this_present_x && that_present_x))
        return false;
      if (this.x != that.x)
        return false;
    }

    boolean this_present_y = true;
    boolean that_present_y = true;
    if (this_present_y || that_present_y) {
      if (!(this_present_y && that_present_y))
        return false;
      if (this.y != that.y)
        return false;
    }

    boolean this_present_tx = true;
    boolean that_present_tx = true;
    if (this_present_tx || that_present_tx) {
      if (!(this_present_tx && that_present_tx))
        return false;
      if (this.tx != that.tx)
        return false;
    }

    boolean this_present_ty = true;
    boolean that_present_ty = true;
    if (this_present_ty || that_present_ty) {
      if (!(this_present_ty && that_present_ty))
        return false;
      if (this.ty != that.ty)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_selfUid = true;
    boolean that_present_selfUid = true;
    if (this_present_selfUid || that_present_selfUid) {
      if (!(this_present_selfUid && that_present_selfUid))
        return false;
      if (this.selfUid != that.selfUid)
        return false;
    }

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_locateX = true;
    boolean that_present_locateX = true;
    if (this_present_locateX || that_present_locateX) {
      if (!(this_present_locateX && that_present_locateX))
        return false;
      if (this.locateX != that.locateX)
        return false;
    }

    boolean this_present_locateY = true;
    boolean that_present_locateY = true;
    if (this_present_locateY || that_present_locateY) {
      if (!(this_present_locateY && that_present_locateY))
        return false;
      if (this.locateY != that.locateY)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_spriteName = true && (isSetSpriteName());
    list.add(present_spriteName);
    if (present_spriteName)
      list.add(spriteName);

    boolean present_uid = true;
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_x = true;
    list.add(present_x);
    if (present_x)
      list.add(x);

    boolean present_y = true;
    list.add(present_y);
    if (present_y)
      list.add(y);

    boolean present_tx = true;
    list.add(present_tx);
    if (present_tx)
      list.add(tx);

    boolean present_ty = true;
    list.add(present_ty);
    if (present_ty)
      list.add(ty);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true;
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_selfUid = true;
    list.add(present_selfUid);
    if (present_selfUid)
      list.add(selfUid);

    boolean present_taskId = true;
    list.add(present_taskId);
    if (present_taskId)
      list.add(taskId);

    boolean present_locateX = true;
    list.add(present_locateX);
    if (present_locateX)
      list.add(locateX);

    boolean present_locateY = true;
    list.add(present_locateY);
    if (present_locateY)
      list.add(locateY);

    return list.hashCode();
  }

  @Override
  public int compareTo(W2lVectorInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSpriteName()).compareTo(other.isSetSpriteName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpriteName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spriteName, other.spriteName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetX()).compareTo(other.isSetX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, other.x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetY()).compareTo(other.isSetY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.y, other.y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTx()).compareTo(other.isSetTx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tx, other.tx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTy()).compareTo(other.isSetTy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ty, other.ty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelfUid()).compareTo(other.isSetSelfUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelfUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selfUid, other.selfUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocateX()).compareTo(other.isSetLocateX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocateX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locateX, other.locateX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocateY()).compareTo(other.isSetLocateY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocateY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locateY, other.locateY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("W2lVectorInfo(");
    boolean first = true;

    sb.append("spriteName:");
    if (this.spriteName == null) {
      sb.append("null");
    } else {
      sb.append(this.spriteName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("x:");
    sb.append(this.x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("y:");
    sb.append(this.y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tx:");
    sb.append(this.tx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ty:");
    sb.append(this.ty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("selfUid:");
    sb.append(this.selfUid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locateX:");
    sb.append(this.locateX);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locateY:");
    sb.append(this.locateY);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class W2lVectorInfoStandardSchemeFactory implements SchemeFactory {
    public W2lVectorInfoStandardScheme getScheme() {
      return new W2lVectorInfoStandardScheme();
    }
  }

  private static class W2lVectorInfoStandardScheme extends StandardScheme<W2lVectorInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, W2lVectorInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPRITE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spriteName = iprot.readString();
              struct.setSpriteNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.x = iprot.readI32();
              struct.setXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.y = iprot.readI32();
              struct.setYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tx = iprot.readI32();
              struct.setTxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ty = iprot.readI32();
              struct.setTyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startTime = iprot.readI32();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endTime = iprot.readI32();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SELF_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.selfUid = iprot.readI64();
              struct.setSelfUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.taskId = iprot.readI64();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOCATE_X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.locateX = iprot.readI32();
              struct.setLocateXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOCATE_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.locateY = iprot.readI32();
              struct.setLocateYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, W2lVectorInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.spriteName != null) {
        oprot.writeFieldBegin(SPRITE_NAME_FIELD_DESC);
        oprot.writeString(struct.spriteName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(X_FIELD_DESC);
      oprot.writeI32(struct.x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Y_FIELD_DESC);
      oprot.writeI32(struct.y);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TX_FIELD_DESC);
      oprot.writeI32(struct.tx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TY_FIELD_DESC);
      oprot.writeI32(struct.ty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI32(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI32(struct.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELF_UID_FIELD_DESC);
      oprot.writeI64(struct.selfUid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI64(struct.taskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCATE_X_FIELD_DESC);
      oprot.writeI32(struct.locateX);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCATE_Y_FIELD_DESC);
      oprot.writeI32(struct.locateY);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class W2lVectorInfoTupleSchemeFactory implements SchemeFactory {
    public W2lVectorInfoTupleScheme getScheme() {
      return new W2lVectorInfoTupleScheme();
    }
  }

  private static class W2lVectorInfoTupleScheme extends TupleScheme<W2lVectorInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, W2lVectorInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSpriteName()) {
        optionals.set(0);
      }
      if (struct.isSetUid()) {
        optionals.set(1);
      }
      if (struct.isSetX()) {
        optionals.set(2);
      }
      if (struct.isSetY()) {
        optionals.set(3);
      }
      if (struct.isSetTx()) {
        optionals.set(4);
      }
      if (struct.isSetTy()) {
        optionals.set(5);
      }
      if (struct.isSetStartTime()) {
        optionals.set(6);
      }
      if (struct.isSetEndTime()) {
        optionals.set(7);
      }
      if (struct.isSetSelfUid()) {
        optionals.set(8);
      }
      if (struct.isSetTaskId()) {
        optionals.set(9);
      }
      if (struct.isSetLocateX()) {
        optionals.set(10);
      }
      if (struct.isSetLocateY()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetSpriteName()) {
        oprot.writeString(struct.spriteName);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetX()) {
        oprot.writeI32(struct.x);
      }
      if (struct.isSetY()) {
        oprot.writeI32(struct.y);
      }
      if (struct.isSetTx()) {
        oprot.writeI32(struct.tx);
      }
      if (struct.isSetTy()) {
        oprot.writeI32(struct.ty);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI32(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI32(struct.endTime);
      }
      if (struct.isSetSelfUid()) {
        oprot.writeI64(struct.selfUid);
      }
      if (struct.isSetTaskId()) {
        oprot.writeI64(struct.taskId);
      }
      if (struct.isSetLocateX()) {
        oprot.writeI32(struct.locateX);
      }
      if (struct.isSetLocateY()) {
        oprot.writeI32(struct.locateY);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, W2lVectorInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.spriteName = iprot.readString();
        struct.setSpriteNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.x = iprot.readI32();
        struct.setXIsSet(true);
      }
      if (incoming.get(3)) {
        struct.y = iprot.readI32();
        struct.setYIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tx = iprot.readI32();
        struct.setTxIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ty = iprot.readI32();
        struct.setTyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.startTime = iprot.readI32();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.endTime = iprot.readI32();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.selfUid = iprot.readI64();
        struct.setSelfUidIsSet(true);
      }
      if (incoming.get(9)) {
        struct.taskId = iprot.readI64();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.locateX = iprot.readI32();
        struct.setLocateXIsSet(true);
      }
      if (incoming.get(11)) {
        struct.locateY = iprot.readI32();
        struct.setLocateYIsSet(true);
      }
    }
  }

}

