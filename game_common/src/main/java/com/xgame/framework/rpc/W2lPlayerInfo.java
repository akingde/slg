/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xgame.framework.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-22")
public class W2lPlayerInfo implements org.apache.thrift.TBase<W2lPlayerInfo, W2lPlayerInfo._Fields>, java.io.Serializable, Cloneable, Comparable<W2lPlayerInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("W2lPlayerInfo");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SELF_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("selfUid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SPRITE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("spriteName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GANG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("gangName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField Y_FIELD_DESC = new org.apache.thrift.protocol.TField("y", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TRIGGER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerTime", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SOLDIER_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("soldierJson", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new W2lPlayerInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new W2lPlayerInfoTupleSchemeFactory());
  }

  public long uid; // required
  public long selfUid; // required
  public String spriteName; // required
  public String gangName; // required
  public int x; // required
  public int y; // required
  public int startTime; // required
  public int time; // required
  public int triggerTime; // required
  public String soldierJson; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    SELF_UID((short)2, "selfUid"),
    SPRITE_NAME((short)3, "spriteName"),
    GANG_NAME((short)4, "gangName"),
    X((short)5, "x"),
    Y((short)6, "y"),
    START_TIME((short)7, "startTime"),
    TIME((short)8, "time"),
    TRIGGER_TIME((short)9, "triggerTime"),
    SOLDIER_JSON((short)10, "soldierJson");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // SELF_UID
          return SELF_UID;
        case 3: // SPRITE_NAME
          return SPRITE_NAME;
        case 4: // GANG_NAME
          return GANG_NAME;
        case 5: // X
          return X;
        case 6: // Y
          return Y;
        case 7: // START_TIME
          return START_TIME;
        case 8: // TIME
          return TIME;
        case 9: // TRIGGER_TIME
          return TRIGGER_TIME;
        case 10: // SOLDIER_JSON
          return SOLDIER_JSON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UID_ISSET_ID = 0;
  private static final int __SELFUID_ISSET_ID = 1;
  private static final int __X_ISSET_ID = 2;
  private static final int __Y_ISSET_ID = 3;
  private static final int __STARTTIME_ISSET_ID = 4;
  private static final int __TIME_ISSET_ID = 5;
  private static final int __TRIGGERTIME_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SELF_UID, new org.apache.thrift.meta_data.FieldMetaData("selfUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPRITE_NAME, new org.apache.thrift.meta_data.FieldMetaData("spriteName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GANG_NAME, new org.apache.thrift.meta_data.FieldMetaData("gangName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.Y, new org.apache.thrift.meta_data.FieldMetaData("y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRIGGER_TIME, new org.apache.thrift.meta_data.FieldMetaData("triggerTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOLDIER_JSON, new org.apache.thrift.meta_data.FieldMetaData("soldierJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(W2lPlayerInfo.class, metaDataMap);
  }

  public W2lPlayerInfo() {
  }

  public W2lPlayerInfo(
    long uid,
    long selfUid,
    String spriteName,
    String gangName,
    int x,
    int y,
    int startTime,
    int time,
    int triggerTime,
    String soldierJson)
  {
    this();
    this.uid = uid;
    setUidIsSet(true);
    this.selfUid = selfUid;
    setSelfUidIsSet(true);
    this.spriteName = spriteName;
    this.gangName = gangName;
    this.x = x;
    setXIsSet(true);
    this.y = y;
    setYIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.time = time;
    setTimeIsSet(true);
    this.triggerTime = triggerTime;
    setTriggerTimeIsSet(true);
    this.soldierJson = soldierJson;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public W2lPlayerInfo(W2lPlayerInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.uid = other.uid;
    this.selfUid = other.selfUid;
    if (other.isSetSpriteName()) {
      this.spriteName = other.spriteName;
    }
    if (other.isSetGangName()) {
      this.gangName = other.gangName;
    }
    this.x = other.x;
    this.y = other.y;
    this.startTime = other.startTime;
    this.time = other.time;
    this.triggerTime = other.triggerTime;
    if (other.isSetSoldierJson()) {
      this.soldierJson = other.soldierJson;
    }
  }

  public W2lPlayerInfo deepCopy() {
    return new W2lPlayerInfo(this);
  }

  @Override
  public void clear() {
    setUidIsSet(false);
    this.uid = 0;
    setSelfUidIsSet(false);
    this.selfUid = 0;
    this.spriteName = null;
    this.gangName = null;
    setXIsSet(false);
    this.x = 0;
    setYIsSet(false);
    this.y = 0;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setTimeIsSet(false);
    this.time = 0;
    setTriggerTimeIsSet(false);
    this.triggerTime = 0;
    this.soldierJson = null;
  }

  public long getUid() {
    return this.uid;
  }

  public W2lPlayerInfo setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public long getSelfUid() {
    return this.selfUid;
  }

  public W2lPlayerInfo setSelfUid(long selfUid) {
    this.selfUid = selfUid;
    setSelfUidIsSet(true);
    return this;
  }

  public void unsetSelfUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELFUID_ISSET_ID);
  }

  /** Returns true if field selfUid is set (has been assigned a value) and false otherwise */
  public boolean isSetSelfUid() {
    return EncodingUtils.testBit(__isset_bitfield, __SELFUID_ISSET_ID);
  }

  public void setSelfUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELFUID_ISSET_ID, value);
  }

  public String getSpriteName() {
    return this.spriteName;
  }

  public W2lPlayerInfo setSpriteName(String spriteName) {
    this.spriteName = spriteName;
    return this;
  }

  public void unsetSpriteName() {
    this.spriteName = null;
  }

  /** Returns true if field spriteName is set (has been assigned a value) and false otherwise */
  public boolean isSetSpriteName() {
    return this.spriteName != null;
  }

  public void setSpriteNameIsSet(boolean value) {
    if (!value) {
      this.spriteName = null;
    }
  }

  public String getGangName() {
    return this.gangName;
  }

  public W2lPlayerInfo setGangName(String gangName) {
    this.gangName = gangName;
    return this;
  }

  public void unsetGangName() {
    this.gangName = null;
  }

  /** Returns true if field gangName is set (has been assigned a value) and false otherwise */
  public boolean isSetGangName() {
    return this.gangName != null;
  }

  public void setGangNameIsSet(boolean value) {
    if (!value) {
      this.gangName = null;
    }
  }

  public int getX() {
    return this.x;
  }

  public W2lPlayerInfo setX(int x) {
    this.x = x;
    setXIsSet(true);
    return this;
  }

  public void unsetX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __X_ISSET_ID);
  }

  /** Returns true if field x is set (has been assigned a value) and false otherwise */
  public boolean isSetX() {
    return EncodingUtils.testBit(__isset_bitfield, __X_ISSET_ID);
  }

  public void setXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __X_ISSET_ID, value);
  }

  public int getY() {
    return this.y;
  }

  public W2lPlayerInfo setY(int y) {
    this.y = y;
    setYIsSet(true);
    return this;
  }

  public void unsetY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __Y_ISSET_ID);
  }

  /** Returns true if field y is set (has been assigned a value) and false otherwise */
  public boolean isSetY() {
    return EncodingUtils.testBit(__isset_bitfield, __Y_ISSET_ID);
  }

  public void setYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __Y_ISSET_ID, value);
  }

  public int getStartTime() {
    return this.startTime;
  }

  public W2lPlayerInfo setStartTime(int startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public int getTime() {
    return this.time;
  }

  public W2lPlayerInfo setTime(int time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public int getTriggerTime() {
    return this.triggerTime;
  }

  public W2lPlayerInfo setTriggerTime(int triggerTime) {
    this.triggerTime = triggerTime;
    setTriggerTimeIsSet(true);
    return this;
  }

  public void unsetTriggerTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRIGGERTIME_ISSET_ID);
  }

  /** Returns true if field triggerTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggerTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TRIGGERTIME_ISSET_ID);
  }

  public void setTriggerTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRIGGERTIME_ISSET_ID, value);
  }

  public String getSoldierJson() {
    return this.soldierJson;
  }

  public W2lPlayerInfo setSoldierJson(String soldierJson) {
    this.soldierJson = soldierJson;
    return this;
  }

  public void unsetSoldierJson() {
    this.soldierJson = null;
  }

  /** Returns true if field soldierJson is set (has been assigned a value) and false otherwise */
  public boolean isSetSoldierJson() {
    return this.soldierJson != null;
  }

  public void setSoldierJsonIsSet(boolean value) {
    if (!value) {
      this.soldierJson = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case SELF_UID:
      if (value == null) {
        unsetSelfUid();
      } else {
        setSelfUid((Long)value);
      }
      break;

    case SPRITE_NAME:
      if (value == null) {
        unsetSpriteName();
      } else {
        setSpriteName((String)value);
      }
      break;

    case GANG_NAME:
      if (value == null) {
        unsetGangName();
      } else {
        setGangName((String)value);
      }
      break;

    case X:
      if (value == null) {
        unsetX();
      } else {
        setX((Integer)value);
      }
      break;

    case Y:
      if (value == null) {
        unsetY();
      } else {
        setY((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Integer)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Integer)value);
      }
      break;

    case TRIGGER_TIME:
      if (value == null) {
        unsetTriggerTime();
      } else {
        setTriggerTime((Integer)value);
      }
      break;

    case SOLDIER_JSON:
      if (value == null) {
        unsetSoldierJson();
      } else {
        setSoldierJson((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case SELF_UID:
      return getSelfUid();

    case SPRITE_NAME:
      return getSpriteName();

    case GANG_NAME:
      return getGangName();

    case X:
      return getX();

    case Y:
      return getY();

    case START_TIME:
      return getStartTime();

    case TIME:
      return getTime();

    case TRIGGER_TIME:
      return getTriggerTime();

    case SOLDIER_JSON:
      return getSoldierJson();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case SELF_UID:
      return isSetSelfUid();
    case SPRITE_NAME:
      return isSetSpriteName();
    case GANG_NAME:
      return isSetGangName();
    case X:
      return isSetX();
    case Y:
      return isSetY();
    case START_TIME:
      return isSetStartTime();
    case TIME:
      return isSetTime();
    case TRIGGER_TIME:
      return isSetTriggerTime();
    case SOLDIER_JSON:
      return isSetSoldierJson();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof W2lPlayerInfo)
      return this.equals((W2lPlayerInfo)that);
    return false;
  }

  public boolean equals(W2lPlayerInfo that) {
    if (that == null)
      return false;

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_selfUid = true;
    boolean that_present_selfUid = true;
    if (this_present_selfUid || that_present_selfUid) {
      if (!(this_present_selfUid && that_present_selfUid))
        return false;
      if (this.selfUid != that.selfUid)
        return false;
    }

    boolean this_present_spriteName = true && this.isSetSpriteName();
    boolean that_present_spriteName = true && that.isSetSpriteName();
    if (this_present_spriteName || that_present_spriteName) {
      if (!(this_present_spriteName && that_present_spriteName))
        return false;
      if (!this.spriteName.equals(that.spriteName))
        return false;
    }

    boolean this_present_gangName = true && this.isSetGangName();
    boolean that_present_gangName = true && that.isSetGangName();
    if (this_present_gangName || that_present_gangName) {
      if (!(this_present_gangName && that_present_gangName))
        return false;
      if (!this.gangName.equals(that.gangName))
        return false;
    }

    boolean this_present_x = true;
    boolean that_present_x = true;
    if (this_present_x || that_present_x) {
      if (!(this_present_x && that_present_x))
        return false;
      if (this.x != that.x)
        return false;
    }

    boolean this_present_y = true;
    boolean that_present_y = true;
    if (this_present_y || that_present_y) {
      if (!(this_present_y && that_present_y))
        return false;
      if (this.y != that.y)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_triggerTime = true;
    boolean that_present_triggerTime = true;
    if (this_present_triggerTime || that_present_triggerTime) {
      if (!(this_present_triggerTime && that_present_triggerTime))
        return false;
      if (this.triggerTime != that.triggerTime)
        return false;
    }

    boolean this_present_soldierJson = true && this.isSetSoldierJson();
    boolean that_present_soldierJson = true && that.isSetSoldierJson();
    if (this_present_soldierJson || that_present_soldierJson) {
      if (!(this_present_soldierJson && that_present_soldierJson))
        return false;
      if (!this.soldierJson.equals(that.soldierJson))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid = true;
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_selfUid = true;
    list.add(present_selfUid);
    if (present_selfUid)
      list.add(selfUid);

    boolean present_spriteName = true && (isSetSpriteName());
    list.add(present_spriteName);
    if (present_spriteName)
      list.add(spriteName);

    boolean present_gangName = true && (isSetGangName());
    list.add(present_gangName);
    if (present_gangName)
      list.add(gangName);

    boolean present_x = true;
    list.add(present_x);
    if (present_x)
      list.add(x);

    boolean present_y = true;
    list.add(present_y);
    if (present_y)
      list.add(y);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_time = true;
    list.add(present_time);
    if (present_time)
      list.add(time);

    boolean present_triggerTime = true;
    list.add(present_triggerTime);
    if (present_triggerTime)
      list.add(triggerTime);

    boolean present_soldierJson = true && (isSetSoldierJson());
    list.add(present_soldierJson);
    if (present_soldierJson)
      list.add(soldierJson);

    return list.hashCode();
  }

  @Override
  public int compareTo(W2lPlayerInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelfUid()).compareTo(other.isSetSelfUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelfUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selfUid, other.selfUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpriteName()).compareTo(other.isSetSpriteName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpriteName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spriteName, other.spriteName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGangName()).compareTo(other.isSetGangName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGangName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gangName, other.gangName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetX()).compareTo(other.isSetX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, other.x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetY()).compareTo(other.isSetY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.y, other.y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggerTime()).compareTo(other.isSetTriggerTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggerTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerTime, other.triggerTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSoldierJson()).compareTo(other.isSetSoldierJson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSoldierJson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.soldierJson, other.soldierJson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("W2lPlayerInfo(");
    boolean first = true;

    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("selfUid:");
    sb.append(this.selfUid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spriteName:");
    if (this.spriteName == null) {
      sb.append("null");
    } else {
      sb.append(this.spriteName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gangName:");
    if (this.gangName == null) {
      sb.append("null");
    } else {
      sb.append(this.gangName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("x:");
    sb.append(this.x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("y:");
    sb.append(this.y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("triggerTime:");
    sb.append(this.triggerTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("soldierJson:");
    if (this.soldierJson == null) {
      sb.append("null");
    } else {
      sb.append(this.soldierJson);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class W2lPlayerInfoStandardSchemeFactory implements SchemeFactory {
    public W2lPlayerInfoStandardScheme getScheme() {
      return new W2lPlayerInfoStandardScheme();
    }
  }

  private static class W2lPlayerInfoStandardScheme extends StandardScheme<W2lPlayerInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, W2lPlayerInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SELF_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.selfUid = iprot.readI64();
              struct.setSelfUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPRITE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spriteName = iprot.readString();
              struct.setSpriteNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GANG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gangName = iprot.readString();
              struct.setGangNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.x = iprot.readI32();
              struct.setXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.y = iprot.readI32();
              struct.setYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startTime = iprot.readI32();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.time = iprot.readI32();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRIGGER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.triggerTime = iprot.readI32();
              struct.setTriggerTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SOLDIER_JSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.soldierJson = iprot.readString();
              struct.setSoldierJsonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, W2lPlayerInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELF_UID_FIELD_DESC);
      oprot.writeI64(struct.selfUid);
      oprot.writeFieldEnd();
      if (struct.spriteName != null) {
        oprot.writeFieldBegin(SPRITE_NAME_FIELD_DESC);
        oprot.writeString(struct.spriteName);
        oprot.writeFieldEnd();
      }
      if (struct.gangName != null) {
        oprot.writeFieldBegin(GANG_NAME_FIELD_DESC);
        oprot.writeString(struct.gangName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(X_FIELD_DESC);
      oprot.writeI32(struct.x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Y_FIELD_DESC);
      oprot.writeI32(struct.y);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI32(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI32(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRIGGER_TIME_FIELD_DESC);
      oprot.writeI32(struct.triggerTime);
      oprot.writeFieldEnd();
      if (struct.soldierJson != null) {
        oprot.writeFieldBegin(SOLDIER_JSON_FIELD_DESC);
        oprot.writeString(struct.soldierJson);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class W2lPlayerInfoTupleSchemeFactory implements SchemeFactory {
    public W2lPlayerInfoTupleScheme getScheme() {
      return new W2lPlayerInfoTupleScheme();
    }
  }

  private static class W2lPlayerInfoTupleScheme extends TupleScheme<W2lPlayerInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, W2lPlayerInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetSelfUid()) {
        optionals.set(1);
      }
      if (struct.isSetSpriteName()) {
        optionals.set(2);
      }
      if (struct.isSetGangName()) {
        optionals.set(3);
      }
      if (struct.isSetX()) {
        optionals.set(4);
      }
      if (struct.isSetY()) {
        optionals.set(5);
      }
      if (struct.isSetStartTime()) {
        optionals.set(6);
      }
      if (struct.isSetTime()) {
        optionals.set(7);
      }
      if (struct.isSetTriggerTime()) {
        optionals.set(8);
      }
      if (struct.isSetSoldierJson()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetSelfUid()) {
        oprot.writeI64(struct.selfUid);
      }
      if (struct.isSetSpriteName()) {
        oprot.writeString(struct.spriteName);
      }
      if (struct.isSetGangName()) {
        oprot.writeString(struct.gangName);
      }
      if (struct.isSetX()) {
        oprot.writeI32(struct.x);
      }
      if (struct.isSetY()) {
        oprot.writeI32(struct.y);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI32(struct.startTime);
      }
      if (struct.isSetTime()) {
        oprot.writeI32(struct.time);
      }
      if (struct.isSetTriggerTime()) {
        oprot.writeI32(struct.triggerTime);
      }
      if (struct.isSetSoldierJson()) {
        oprot.writeString(struct.soldierJson);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, W2lPlayerInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.selfUid = iprot.readI64();
        struct.setSelfUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.spriteName = iprot.readString();
        struct.setSpriteNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gangName = iprot.readString();
        struct.setGangNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.x = iprot.readI32();
        struct.setXIsSet(true);
      }
      if (incoming.get(5)) {
        struct.y = iprot.readI32();
        struct.setYIsSet(true);
      }
      if (incoming.get(6)) {
        struct.startTime = iprot.readI32();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.time = iprot.readI32();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.triggerTime = iprot.readI32();
        struct.setTriggerTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.soldierJson = iprot.readString();
        struct.setSoldierJsonIsSet(true);
      }
    }
  }

}

