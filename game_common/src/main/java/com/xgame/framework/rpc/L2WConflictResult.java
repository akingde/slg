/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xgame.framework.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-18")
public class L2WConflictResult implements org.apache.thrift.TBase<L2WConflictResult, L2WConflictResult._Fields>, java.io.Serializable, Cloneable, Comparable<L2WConflictResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("L2WConflictResult");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DESTROY_SOLDIER_FIELD_DESC = new org.apache.thrift.protocol.TField("destroySoldier", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField MOD_SOLDIER_FIELD_DESC = new org.apache.thrift.protocol.TField("modSoldier", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new L2WConflictResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new L2WConflictResultTupleSchemeFactory());
  }

  public long taskId; // required
  public int index; // required
  public int result; // required
  public List<String> destroySoldier; // required
  public List<String> modSoldier; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskId"),
    INDEX((short)2, "index"),
    RESULT((short)3, "result"),
    DESTROY_SOLDIER((short)4, "destroySoldier"),
    MOD_SOLDIER((short)5, "modSoldier");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // INDEX
          return INDEX;
        case 3: // RESULT
          return RESULT;
        case 4: // DESTROY_SOLDIER
          return DESTROY_SOLDIER;
        case 5: // MOD_SOLDIER
          return MOD_SOLDIER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASKID_ISSET_ID = 0;
  private static final int __INDEX_ISSET_ID = 1;
  private static final int __RESULT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESTROY_SOLDIER, new org.apache.thrift.meta_data.FieldMetaData("destroySoldier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MOD_SOLDIER, new org.apache.thrift.meta_data.FieldMetaData("modSoldier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(L2WConflictResult.class, metaDataMap);
  }

  public L2WConflictResult() {
  }

  public L2WConflictResult(
    long taskId,
    int index,
    int result,
    List<String> destroySoldier,
    List<String> modSoldier)
  {
    this();
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.index = index;
    setIndexIsSet(true);
    this.result = result;
    setResultIsSet(true);
    this.destroySoldier = destroySoldier;
    this.modSoldier = modSoldier;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public L2WConflictResult(L2WConflictResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.taskId = other.taskId;
    this.index = other.index;
    this.result = other.result;
    if (other.isSetDestroySoldier()) {
      List<String> __this__destroySoldier = new ArrayList<String>(other.destroySoldier);
      this.destroySoldier = __this__destroySoldier;
    }
    if (other.isSetModSoldier()) {
      List<String> __this__modSoldier = new ArrayList<String>(other.modSoldier);
      this.modSoldier = __this__modSoldier;
    }
  }

  public L2WConflictResult deepCopy() {
    return new L2WConflictResult(this);
  }

  @Override
  public void clear() {
    setTaskIdIsSet(false);
    this.taskId = 0;
    setIndexIsSet(false);
    this.index = 0;
    setResultIsSet(false);
    this.result = 0;
    this.destroySoldier = null;
    this.modSoldier = null;
  }

  public long getTaskId() {
    return this.taskId;
  }

  public L2WConflictResult setTaskId(long taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public int getIndex() {
    return this.index;
  }

  public L2WConflictResult setIndex(int index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public int getResult() {
    return this.result;
  }

  public L2WConflictResult setResult(int result) {
    this.result = result;
    setResultIsSet(true);
    return this;
  }

  public void unsetResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  public void setResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULT_ISSET_ID, value);
  }

  public int getDestroySoldierSize() {
    return (this.destroySoldier == null) ? 0 : this.destroySoldier.size();
  }

  public java.util.Iterator<String> getDestroySoldierIterator() {
    return (this.destroySoldier == null) ? null : this.destroySoldier.iterator();
  }

  public void addToDestroySoldier(String elem) {
    if (this.destroySoldier == null) {
      this.destroySoldier = new ArrayList<String>();
    }
    this.destroySoldier.add(elem);
  }

  public List<String> getDestroySoldier() {
    return this.destroySoldier;
  }

  public L2WConflictResult setDestroySoldier(List<String> destroySoldier) {
    this.destroySoldier = destroySoldier;
    return this;
  }

  public void unsetDestroySoldier() {
    this.destroySoldier = null;
  }

  /** Returns true if field destroySoldier is set (has been assigned a value) and false otherwise */
  public boolean isSetDestroySoldier() {
    return this.destroySoldier != null;
  }

  public void setDestroySoldierIsSet(boolean value) {
    if (!value) {
      this.destroySoldier = null;
    }
  }

  public int getModSoldierSize() {
    return (this.modSoldier == null) ? 0 : this.modSoldier.size();
  }

  public java.util.Iterator<String> getModSoldierIterator() {
    return (this.modSoldier == null) ? null : this.modSoldier.iterator();
  }

  public void addToModSoldier(String elem) {
    if (this.modSoldier == null) {
      this.modSoldier = new ArrayList<String>();
    }
    this.modSoldier.add(elem);
  }

  public List<String> getModSoldier() {
    return this.modSoldier;
  }

  public L2WConflictResult setModSoldier(List<String> modSoldier) {
    this.modSoldier = modSoldier;
    return this;
  }

  public void unsetModSoldier() {
    this.modSoldier = null;
  }

  /** Returns true if field modSoldier is set (has been assigned a value) and false otherwise */
  public boolean isSetModSoldier() {
    return this.modSoldier != null;
  }

  public void setModSoldierIsSet(boolean value) {
    if (!value) {
      this.modSoldier = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Long)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Integer)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((Integer)value);
      }
      break;

    case DESTROY_SOLDIER:
      if (value == null) {
        unsetDestroySoldier();
      } else {
        setDestroySoldier((List<String>)value);
      }
      break;

    case MOD_SOLDIER:
      if (value == null) {
        unsetModSoldier();
      } else {
        setModSoldier((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return getTaskId();

    case INDEX:
      return getIndex();

    case RESULT:
      return getResult();

    case DESTROY_SOLDIER:
      return getDestroySoldier();

    case MOD_SOLDIER:
      return getModSoldier();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskId();
    case INDEX:
      return isSetIndex();
    case RESULT:
      return isSetResult();
    case DESTROY_SOLDIER:
      return isSetDestroySoldier();
    case MOD_SOLDIER:
      return isSetModSoldier();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof L2WConflictResult)
      return this.equals((L2WConflictResult)that);
    return false;
  }

  public boolean equals(L2WConflictResult that) {
    if (that == null)
      return false;

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_result = true;
    boolean that_present_result = true;
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (this.result != that.result)
        return false;
    }

    boolean this_present_destroySoldier = true && this.isSetDestroySoldier();
    boolean that_present_destroySoldier = true && that.isSetDestroySoldier();
    if (this_present_destroySoldier || that_present_destroySoldier) {
      if (!(this_present_destroySoldier && that_present_destroySoldier))
        return false;
      if (!this.destroySoldier.equals(that.destroySoldier))
        return false;
    }

    boolean this_present_modSoldier = true && this.isSetModSoldier();
    boolean that_present_modSoldier = true && that.isSetModSoldier();
    if (this_present_modSoldier || that_present_modSoldier) {
      if (!(this_present_modSoldier && that_present_modSoldier))
        return false;
      if (!this.modSoldier.equals(that.modSoldier))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_taskId = true;
    list.add(present_taskId);
    if (present_taskId)
      list.add(taskId);

    boolean present_index = true;
    list.add(present_index);
    if (present_index)
      list.add(index);

    boolean present_result = true;
    list.add(present_result);
    if (present_result)
      list.add(result);

    boolean present_destroySoldier = true && (isSetDestroySoldier());
    list.add(present_destroySoldier);
    if (present_destroySoldier)
      list.add(destroySoldier);

    boolean present_modSoldier = true && (isSetModSoldier());
    list.add(present_modSoldier);
    if (present_modSoldier)
      list.add(modSoldier);

    return list.hashCode();
  }

  @Override
  public int compareTo(L2WConflictResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestroySoldier()).compareTo(other.isSetDestroySoldier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestroySoldier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destroySoldier, other.destroySoldier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModSoldier()).compareTo(other.isSetModSoldier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModSoldier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modSoldier, other.modSoldier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("L2WConflictResult(");
    boolean first = true;

    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("index:");
    sb.append(this.index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("result:");
    sb.append(this.result);
    first = false;
    if (!first) sb.append(", ");
    sb.append("destroySoldier:");
    if (this.destroySoldier == null) {
      sb.append("null");
    } else {
      sb.append(this.destroySoldier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modSoldier:");
    if (this.modSoldier == null) {
      sb.append("null");
    } else {
      sb.append(this.modSoldier);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class L2WConflictResultStandardSchemeFactory implements SchemeFactory {
    public L2WConflictResultStandardScheme getScheme() {
      return new L2WConflictResultStandardScheme();
    }
  }

  private static class L2WConflictResultStandardScheme extends StandardScheme<L2WConflictResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, L2WConflictResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.taskId = iprot.readI64();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.index = iprot.readI32();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.result = iprot.readI32();
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESTROY_SOLDIER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.destroySoldier = new ArrayList<String>(_list36.size);
                String _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = iprot.readString();
                  struct.destroySoldier.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setDestroySoldierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MOD_SOLDIER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.modSoldier = new ArrayList<String>(_list39.size);
                String _elem40;
                for (int _i41 = 0; _i41 < _list39.size; ++_i41)
                {
                  _elem40 = iprot.readString();
                  struct.modSoldier.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setModSoldierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, L2WConflictResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI64(struct.taskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeI32(struct.index);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      oprot.writeI32(struct.result);
      oprot.writeFieldEnd();
      if (struct.destroySoldier != null) {
        oprot.writeFieldBegin(DESTROY_SOLDIER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.destroySoldier.size()));
          for (String _iter42 : struct.destroySoldier)
          {
            oprot.writeString(_iter42);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.modSoldier != null) {
        oprot.writeFieldBegin(MOD_SOLDIER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.modSoldier.size()));
          for (String _iter43 : struct.modSoldier)
          {
            oprot.writeString(_iter43);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class L2WConflictResultTupleSchemeFactory implements SchemeFactory {
    public L2WConflictResultTupleScheme getScheme() {
      return new L2WConflictResultTupleScheme();
    }
  }

  private static class L2WConflictResultTupleScheme extends TupleScheme<L2WConflictResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, L2WConflictResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTaskId()) {
        optionals.set(0);
      }
      if (struct.isSetIndex()) {
        optionals.set(1);
      }
      if (struct.isSetResult()) {
        optionals.set(2);
      }
      if (struct.isSetDestroySoldier()) {
        optionals.set(3);
      }
      if (struct.isSetModSoldier()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTaskId()) {
        oprot.writeI64(struct.taskId);
      }
      if (struct.isSetIndex()) {
        oprot.writeI32(struct.index);
      }
      if (struct.isSetResult()) {
        oprot.writeI32(struct.result);
      }
      if (struct.isSetDestroySoldier()) {
        {
          oprot.writeI32(struct.destroySoldier.size());
          for (String _iter44 : struct.destroySoldier)
          {
            oprot.writeString(_iter44);
          }
        }
      }
      if (struct.isSetModSoldier()) {
        {
          oprot.writeI32(struct.modSoldier.size());
          for (String _iter45 : struct.modSoldier)
          {
            oprot.writeString(_iter45);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, L2WConflictResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.taskId = iprot.readI64();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.index = iprot.readI32();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(2)) {
        struct.result = iprot.readI32();
        struct.setResultIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list46 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.destroySoldier = new ArrayList<String>(_list46.size);
          String _elem47;
          for (int _i48 = 0; _i48 < _list46.size; ++_i48)
          {
            _elem47 = iprot.readString();
            struct.destroySoldier.add(_elem47);
          }
        }
        struct.setDestroySoldierIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.modSoldier = new ArrayList<String>(_list49.size);
          String _elem50;
          for (int _i51 = 0; _i51 < _list49.size; ++_i51)
          {
            _elem50 = iprot.readString();
            struct.modSoldier.add(_elem50);
          }
        }
        struct.setModSoldierIsSet(true);
      }
    }
  }

}

