/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xgame.framework.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-19")
public class W2lConflictGoback implements org.apache.thrift.TBase<W2lConflictGoback, W2lConflictGoback._Fields>, java.io.Serializable, Cloneable, Comparable<W2lConflictGoback> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("W2lConflictGoback");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RESOURCE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SOLDIER_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("soldierJson", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new W2lConflictGobackStandardSchemeFactory());
    schemes.put(TupleScheme.class, new W2lConflictGobackTupleSchemeFactory());
  }

  public long uid; // required
  public int type; // required
  public int resourceNum; // required
  public String soldierJson; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    TYPE((short)2, "type"),
    RESOURCE_NUM((short)3, "resourceNum"),
    SOLDIER_JSON((short)4, "soldierJson");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // TYPE
          return TYPE;
        case 3: // RESOURCE_NUM
          return RESOURCE_NUM;
        case 4: // SOLDIER_JSON
          return SOLDIER_JSON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __RESOURCENUM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESOURCE_NUM, new org.apache.thrift.meta_data.FieldMetaData("resourceNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOLDIER_JSON, new org.apache.thrift.meta_data.FieldMetaData("soldierJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(W2lConflictGoback.class, metaDataMap);
  }

  public W2lConflictGoback() {
  }

  public W2lConflictGoback(
    long uid,
    int type,
    int resourceNum,
    String soldierJson)
  {
    this();
    this.uid = uid;
    setUidIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.resourceNum = resourceNum;
    setResourceNumIsSet(true);
    this.soldierJson = soldierJson;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public W2lConflictGoback(W2lConflictGoback other) {
    __isset_bitfield = other.__isset_bitfield;
    this.uid = other.uid;
    this.type = other.type;
    this.resourceNum = other.resourceNum;
    if (other.isSetSoldierJson()) {
      this.soldierJson = other.soldierJson;
    }
  }

  public W2lConflictGoback deepCopy() {
    return new W2lConflictGoback(this);
  }

  @Override
  public void clear() {
    setUidIsSet(false);
    this.uid = 0;
    setTypeIsSet(false);
    this.type = 0;
    setResourceNumIsSet(false);
    this.resourceNum = 0;
    this.soldierJson = null;
  }

  public long getUid() {
    return this.uid;
  }

  public W2lConflictGoback setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public W2lConflictGoback setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getResourceNum() {
    return this.resourceNum;
  }

  public W2lConflictGoback setResourceNum(int resourceNum) {
    this.resourceNum = resourceNum;
    setResourceNumIsSet(true);
    return this;
  }

  public void unsetResourceNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCENUM_ISSET_ID);
  }

  /** Returns true if field resourceNum is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceNum() {
    return EncodingUtils.testBit(__isset_bitfield, __RESOURCENUM_ISSET_ID);
  }

  public void setResourceNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCENUM_ISSET_ID, value);
  }

  public String getSoldierJson() {
    return this.soldierJson;
  }

  public W2lConflictGoback setSoldierJson(String soldierJson) {
    this.soldierJson = soldierJson;
    return this;
  }

  public void unsetSoldierJson() {
    this.soldierJson = null;
  }

  /** Returns true if field soldierJson is set (has been assigned a value) and false otherwise */
  public boolean isSetSoldierJson() {
    return this.soldierJson != null;
  }

  public void setSoldierJsonIsSet(boolean value) {
    if (!value) {
      this.soldierJson = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case RESOURCE_NUM:
      if (value == null) {
        unsetResourceNum();
      } else {
        setResourceNum((Integer)value);
      }
      break;

    case SOLDIER_JSON:
      if (value == null) {
        unsetSoldierJson();
      } else {
        setSoldierJson((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case TYPE:
      return getType();

    case RESOURCE_NUM:
      return getResourceNum();

    case SOLDIER_JSON:
      return getSoldierJson();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case TYPE:
      return isSetType();
    case RESOURCE_NUM:
      return isSetResourceNum();
    case SOLDIER_JSON:
      return isSetSoldierJson();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof W2lConflictGoback)
      return this.equals((W2lConflictGoback)that);
    return false;
  }

  public boolean equals(W2lConflictGoback that) {
    if (that == null)
      return false;

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_resourceNum = true;
    boolean that_present_resourceNum = true;
    if (this_present_resourceNum || that_present_resourceNum) {
      if (!(this_present_resourceNum && that_present_resourceNum))
        return false;
      if (this.resourceNum != that.resourceNum)
        return false;
    }

    boolean this_present_soldierJson = true && this.isSetSoldierJson();
    boolean that_present_soldierJson = true && that.isSetSoldierJson();
    if (this_present_soldierJson || that_present_soldierJson) {
      if (!(this_present_soldierJson && that_present_soldierJson))
        return false;
      if (!this.soldierJson.equals(that.soldierJson))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid = true;
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_resourceNum = true;
    list.add(present_resourceNum);
    if (present_resourceNum)
      list.add(resourceNum);

    boolean present_soldierJson = true && (isSetSoldierJson());
    list.add(present_soldierJson);
    if (present_soldierJson)
      list.add(soldierJson);

    return list.hashCode();
  }

  @Override
  public int compareTo(W2lConflictGoback other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceNum()).compareTo(other.isSetResourceNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceNum, other.resourceNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSoldierJson()).compareTo(other.isSetSoldierJson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSoldierJson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.soldierJson, other.soldierJson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("W2lConflictGoback(");
    boolean first = true;

    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceNum:");
    sb.append(this.resourceNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("soldierJson:");
    if (this.soldierJson == null) {
      sb.append("null");
    } else {
      sb.append(this.soldierJson);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class W2lConflictGobackStandardSchemeFactory implements SchemeFactory {
    public W2lConflictGobackStandardScheme getScheme() {
      return new W2lConflictGobackStandardScheme();
    }
  }

  private static class W2lConflictGobackStandardScheme extends StandardScheme<W2lConflictGoback> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, W2lConflictGoback struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESOURCE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resourceNum = iprot.readI32();
              struct.setResourceNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOLDIER_JSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.soldierJson = iprot.readString();
              struct.setSoldierJsonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, W2lConflictGoback struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESOURCE_NUM_FIELD_DESC);
      oprot.writeI32(struct.resourceNum);
      oprot.writeFieldEnd();
      if (struct.soldierJson != null) {
        oprot.writeFieldBegin(SOLDIER_JSON_FIELD_DESC);
        oprot.writeString(struct.soldierJson);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class W2lConflictGobackTupleSchemeFactory implements SchemeFactory {
    public W2lConflictGobackTupleScheme getScheme() {
      return new W2lConflictGobackTupleScheme();
    }
  }

  private static class W2lConflictGobackTupleScheme extends TupleScheme<W2lConflictGoback> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, W2lConflictGoback struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetResourceNum()) {
        optionals.set(2);
      }
      if (struct.isSetSoldierJson()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetResourceNum()) {
        oprot.writeI32(struct.resourceNum);
      }
      if (struct.isSetSoldierJson()) {
        oprot.writeString(struct.soldierJson);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, W2lConflictGoback struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.resourceNum = iprot.readI32();
        struct.setResourceNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.soldierJson = iprot.readString();
        struct.setSoldierJsonIsSet(true);
      }
    }
  }

}

