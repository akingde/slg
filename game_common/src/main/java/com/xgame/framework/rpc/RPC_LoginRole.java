/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xgame.framework.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-18")
public class RPC_LoginRole implements org.apache.thrift.TBase<RPC_LoginRole, RPC_LoginRole._Fields>, java.io.Serializable, Cloneable, Comparable<RPC_LoginRole> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RPC_LoginRole");

  private static final org.apache.thrift.protocol.TField UNIQUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uniqueId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TX_FIELD_DESC = new org.apache.thrift.protocol.TField("tx", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TY_FIELD_DESC = new org.apache.thrift.protocol.TField("ty", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ROLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roleName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RPC_LoginRoleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RPC_LoginRoleTupleSchemeFactory());
  }

  public long uniqueId; // required
  public int tx; // required
  public int ty; // required
  public String roleName; // required
  public int level; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UNIQUE_ID((short)1, "uniqueId"),
    TX((short)2, "tx"),
    TY((short)3, "ty"),
    ROLE_NAME((short)4, "roleName"),
    LEVEL((short)5, "level");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UNIQUE_ID
          return UNIQUE_ID;
        case 2: // TX
          return TX;
        case 3: // TY
          return TY;
        case 4: // ROLE_NAME
          return ROLE_NAME;
        case 5: // LEVEL
          return LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UNIQUEID_ISSET_ID = 0;
  private static final int __TX_ISSET_ID = 1;
  private static final int __TY_ISSET_ID = 2;
  private static final int __LEVEL_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UNIQUE_ID, new org.apache.thrift.meta_data.FieldMetaData("uniqueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TX, new org.apache.thrift.meta_data.FieldMetaData("tx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TY, new org.apache.thrift.meta_data.FieldMetaData("ty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("roleName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RPC_LoginRole.class, metaDataMap);
  }

  public RPC_LoginRole() {
  }

  public RPC_LoginRole(
    long uniqueId,
    int tx,
    int ty,
    String roleName,
    int level)
  {
    this();
    this.uniqueId = uniqueId;
    setUniqueIdIsSet(true);
    this.tx = tx;
    setTxIsSet(true);
    this.ty = ty;
    setTyIsSet(true);
    this.roleName = roleName;
    this.level = level;
    setLevelIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RPC_LoginRole(RPC_LoginRole other) {
    __isset_bitfield = other.__isset_bitfield;
    this.uniqueId = other.uniqueId;
    this.tx = other.tx;
    this.ty = other.ty;
    if (other.isSetRoleName()) {
      this.roleName = other.roleName;
    }
    this.level = other.level;
  }

  public RPC_LoginRole deepCopy() {
    return new RPC_LoginRole(this);
  }

  @Override
  public void clear() {
    setUniqueIdIsSet(false);
    this.uniqueId = 0;
    setTxIsSet(false);
    this.tx = 0;
    setTyIsSet(false);
    this.ty = 0;
    this.roleName = null;
    setLevelIsSet(false);
    this.level = 0;
  }

  public long getUniqueId() {
    return this.uniqueId;
  }

  public RPC_LoginRole setUniqueId(long uniqueId) {
    this.uniqueId = uniqueId;
    setUniqueIdIsSet(true);
    return this;
  }

  public void unsetUniqueId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNIQUEID_ISSET_ID);
  }

  /** Returns true if field uniqueId is set (has been assigned a value) and false otherwise */
  public boolean isSetUniqueId() {
    return EncodingUtils.testBit(__isset_bitfield, __UNIQUEID_ISSET_ID);
  }

  public void setUniqueIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNIQUEID_ISSET_ID, value);
  }

  public int getTx() {
    return this.tx;
  }

  public RPC_LoginRole setTx(int tx) {
    this.tx = tx;
    setTxIsSet(true);
    return this;
  }

  public void unsetTx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TX_ISSET_ID);
  }

  /** Returns true if field tx is set (has been assigned a value) and false otherwise */
  public boolean isSetTx() {
    return EncodingUtils.testBit(__isset_bitfield, __TX_ISSET_ID);
  }

  public void setTxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TX_ISSET_ID, value);
  }

  public int getTy() {
    return this.ty;
  }

  public RPC_LoginRole setTy(int ty) {
    this.ty = ty;
    setTyIsSet(true);
    return this;
  }

  public void unsetTy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TY_ISSET_ID);
  }

  /** Returns true if field ty is set (has been assigned a value) and false otherwise */
  public boolean isSetTy() {
    return EncodingUtils.testBit(__isset_bitfield, __TY_ISSET_ID);
  }

  public void setTyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TY_ISSET_ID, value);
  }

  public String getRoleName() {
    return this.roleName;
  }

  public RPC_LoginRole setRoleName(String roleName) {
    this.roleName = roleName;
    return this;
  }

  public void unsetRoleName() {
    this.roleName = null;
  }

  /** Returns true if field roleName is set (has been assigned a value) and false otherwise */
  public boolean isSetRoleName() {
    return this.roleName != null;
  }

  public void setRoleNameIsSet(boolean value) {
    if (!value) {
      this.roleName = null;
    }
  }

  public int getLevel() {
    return this.level;
  }

  public RPC_LoginRole setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UNIQUE_ID:
      if (value == null) {
        unsetUniqueId();
      } else {
        setUniqueId((Long)value);
      }
      break;

    case TX:
      if (value == null) {
        unsetTx();
      } else {
        setTx((Integer)value);
      }
      break;

    case TY:
      if (value == null) {
        unsetTy();
      } else {
        setTy((Integer)value);
      }
      break;

    case ROLE_NAME:
      if (value == null) {
        unsetRoleName();
      } else {
        setRoleName((String)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UNIQUE_ID:
      return getUniqueId();

    case TX:
      return getTx();

    case TY:
      return getTy();

    case ROLE_NAME:
      return getRoleName();

    case LEVEL:
      return getLevel();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UNIQUE_ID:
      return isSetUniqueId();
    case TX:
      return isSetTx();
    case TY:
      return isSetTy();
    case ROLE_NAME:
      return isSetRoleName();
    case LEVEL:
      return isSetLevel();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RPC_LoginRole)
      return this.equals((RPC_LoginRole)that);
    return false;
  }

  public boolean equals(RPC_LoginRole that) {
    if (that == null)
      return false;

    boolean this_present_uniqueId = true;
    boolean that_present_uniqueId = true;
    if (this_present_uniqueId || that_present_uniqueId) {
      if (!(this_present_uniqueId && that_present_uniqueId))
        return false;
      if (this.uniqueId != that.uniqueId)
        return false;
    }

    boolean this_present_tx = true;
    boolean that_present_tx = true;
    if (this_present_tx || that_present_tx) {
      if (!(this_present_tx && that_present_tx))
        return false;
      if (this.tx != that.tx)
        return false;
    }

    boolean this_present_ty = true;
    boolean that_present_ty = true;
    if (this_present_ty || that_present_ty) {
      if (!(this_present_ty && that_present_ty))
        return false;
      if (this.ty != that.ty)
        return false;
    }

    boolean this_present_roleName = true && this.isSetRoleName();
    boolean that_present_roleName = true && that.isSetRoleName();
    if (this_present_roleName || that_present_roleName) {
      if (!(this_present_roleName && that_present_roleName))
        return false;
      if (!this.roleName.equals(that.roleName))
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uniqueId = true;
    list.add(present_uniqueId);
    if (present_uniqueId)
      list.add(uniqueId);

    boolean present_tx = true;
    list.add(present_tx);
    if (present_tx)
      list.add(tx);

    boolean present_ty = true;
    list.add(present_ty);
    if (present_ty)
      list.add(ty);

    boolean present_roleName = true && (isSetRoleName());
    list.add(present_roleName);
    if (present_roleName)
      list.add(roleName);

    boolean present_level = true;
    list.add(present_level);
    if (present_level)
      list.add(level);

    return list.hashCode();
  }

  @Override
  public int compareTo(RPC_LoginRole other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUniqueId()).compareTo(other.isSetUniqueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUniqueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniqueId, other.uniqueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTx()).compareTo(other.isSetTx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tx, other.tx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTy()).compareTo(other.isSetTy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ty, other.ty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoleName()).compareTo(other.isSetRoleName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoleName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleName, other.roleName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RPC_LoginRole(");
    boolean first = true;

    sb.append("uniqueId:");
    sb.append(this.uniqueId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tx:");
    sb.append(this.tx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ty:");
    sb.append(this.ty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("roleName:");
    if (this.roleName == null) {
      sb.append("null");
    } else {
      sb.append(this.roleName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RPC_LoginRoleStandardSchemeFactory implements SchemeFactory {
    public RPC_LoginRoleStandardScheme getScheme() {
      return new RPC_LoginRoleStandardScheme();
    }
  }

  private static class RPC_LoginRoleStandardScheme extends StandardScheme<RPC_LoginRole> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RPC_LoginRole struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UNIQUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uniqueId = iprot.readI64();
              struct.setUniqueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tx = iprot.readI32();
              struct.setTxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ty = iprot.readI32();
              struct.setTyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roleName = iprot.readString();
              struct.setRoleNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RPC_LoginRole struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UNIQUE_ID_FIELD_DESC);
      oprot.writeI64(struct.uniqueId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TX_FIELD_DESC);
      oprot.writeI32(struct.tx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TY_FIELD_DESC);
      oprot.writeI32(struct.ty);
      oprot.writeFieldEnd();
      if (struct.roleName != null) {
        oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
        oprot.writeString(struct.roleName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.level);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RPC_LoginRoleTupleSchemeFactory implements SchemeFactory {
    public RPC_LoginRoleTupleScheme getScheme() {
      return new RPC_LoginRoleTupleScheme();
    }
  }

  private static class RPC_LoginRoleTupleScheme extends TupleScheme<RPC_LoginRole> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RPC_LoginRole struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUniqueId()) {
        optionals.set(0);
      }
      if (struct.isSetTx()) {
        optionals.set(1);
      }
      if (struct.isSetTy()) {
        optionals.set(2);
      }
      if (struct.isSetRoleName()) {
        optionals.set(3);
      }
      if (struct.isSetLevel()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetUniqueId()) {
        oprot.writeI64(struct.uniqueId);
      }
      if (struct.isSetTx()) {
        oprot.writeI32(struct.tx);
      }
      if (struct.isSetTy()) {
        oprot.writeI32(struct.ty);
      }
      if (struct.isSetRoleName()) {
        oprot.writeString(struct.roleName);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RPC_LoginRole struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.uniqueId = iprot.readI64();
        struct.setUniqueIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tx = iprot.readI32();
        struct.setTxIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ty = iprot.readI32();
        struct.setTyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.roleName = iprot.readString();
        struct.setRoleNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
    }
  }

}

