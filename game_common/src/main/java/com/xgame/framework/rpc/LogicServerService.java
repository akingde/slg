/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xgame.framework.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-23")
public class LogicServerService {

  public interface Iface {

    public void addSprite(RPC_Sprite sprite, long noticeSpriteId) throws org.apache.thrift.TException;

    public void removeSprite(long spriteId, long noticeSpriteId) throws org.apache.thrift.TException;

    public void runTask(W2L_TaskRunData task) throws org.apache.thrift.TException;

    public void updateSpriteInfo(RPC_Sprite sprite, long spriteId) throws org.apache.thrift.TException;

    public void removeTimerTask(W2L_TaskRunData task) throws org.apache.thrift.TException;

    public void playerEnterNewServer(long roleid, int newServerKey) throws org.apache.thrift.TException;

    public void playerExitSuccess(long roleid) throws org.apache.thrift.TException;

    public void initPlayer(ByteBuffer roleList) throws org.apache.thrift.TException;

    public void offlineRole(long roleId) throws org.apache.thrift.TException;

    public ByteBuffer requestSpriteDetail(long spriteid, int spritetype) throws org.apache.thrift.TException;

    public void responseSpriteDetail(long requestRoleid, long spriteid, int spritetype, ByteBuffer spriteData) throws org.apache.thrift.TException;

    public void destinationForMe(W2lPlayerInfo w2lPlayerInfo) throws org.apache.thrift.TException;

    public void resVectorInfo(W2lVectorInfo w2lVectorInfo) throws org.apache.thrift.TException;

    public void resolveConflict(W2lResolveConflict w2lResolveConflict) throws org.apache.thrift.TException;

    public void conflictGoback(W2lConflictGoback w2lConflictGoback) throws org.apache.thrift.TException;

    public void updataSprite(RPC_Sprite viewSprites) throws org.apache.thrift.TException;

    public void deleteSprite(long uid) throws org.apache.thrift.TException;

    public void worldRegisterSuccess(W2lSpaceInfo w2lSpaceInfo) throws org.apache.thrift.TException;

    public void ping() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addSprite(RPC_Sprite sprite, long noticeSpriteId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeSprite(long spriteId, long noticeSpriteId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void runTask(W2L_TaskRunData task, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSpriteInfo(RPC_Sprite sprite, long spriteId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeTimerTask(W2L_TaskRunData task, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void playerEnterNewServer(long roleid, int newServerKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void playerExitSuccess(long roleid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void initPlayer(ByteBuffer roleList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void offlineRole(long roleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void requestSpriteDetail(long spriteid, int spritetype, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void responseSpriteDetail(long requestRoleid, long spriteid, int spritetype, ByteBuffer spriteData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void destinationForMe(W2lPlayerInfo w2lPlayerInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resVectorInfo(W2lVectorInfo w2lVectorInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resolveConflict(W2lResolveConflict w2lResolveConflict, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void conflictGoback(W2lConflictGoback w2lConflictGoback, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updataSprite(RPC_Sprite viewSprites, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteSprite(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void worldRegisterSuccess(W2lSpaceInfo w2lSpaceInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addSprite(RPC_Sprite sprite, long noticeSpriteId) throws org.apache.thrift.TException
    {
      send_addSprite(sprite, noticeSpriteId);
      recv_addSprite();
    }

    public void send_addSprite(RPC_Sprite sprite, long noticeSpriteId) throws org.apache.thrift.TException
    {
      addSprite_args args = new addSprite_args();
      args.setSprite(sprite);
      args.setNoticeSpriteId(noticeSpriteId);
      sendBase("addSprite", args);
    }

    public void recv_addSprite() throws org.apache.thrift.TException
    {
      addSprite_result result = new addSprite_result();
      receiveBase(result, "addSprite");
      return;
    }

    public void removeSprite(long spriteId, long noticeSpriteId) throws org.apache.thrift.TException
    {
      send_removeSprite(spriteId, noticeSpriteId);
      recv_removeSprite();
    }

    public void send_removeSprite(long spriteId, long noticeSpriteId) throws org.apache.thrift.TException
    {
      removeSprite_args args = new removeSprite_args();
      args.setSpriteId(spriteId);
      args.setNoticeSpriteId(noticeSpriteId);
      sendBase("removeSprite", args);
    }

    public void recv_removeSprite() throws org.apache.thrift.TException
    {
      removeSprite_result result = new removeSprite_result();
      receiveBase(result, "removeSprite");
      return;
    }

    public void runTask(W2L_TaskRunData task) throws org.apache.thrift.TException
    {
      send_runTask(task);
      recv_runTask();
    }

    public void send_runTask(W2L_TaskRunData task) throws org.apache.thrift.TException
    {
      runTask_args args = new runTask_args();
      args.setTask(task);
      sendBase("runTask", args);
    }

    public void recv_runTask() throws org.apache.thrift.TException
    {
      runTask_result result = new runTask_result();
      receiveBase(result, "runTask");
      return;
    }

    public void updateSpriteInfo(RPC_Sprite sprite, long spriteId) throws org.apache.thrift.TException
    {
      send_updateSpriteInfo(sprite, spriteId);
      recv_updateSpriteInfo();
    }

    public void send_updateSpriteInfo(RPC_Sprite sprite, long spriteId) throws org.apache.thrift.TException
    {
      updateSpriteInfo_args args = new updateSpriteInfo_args();
      args.setSprite(sprite);
      args.setSpriteId(spriteId);
      sendBase("updateSpriteInfo", args);
    }

    public void recv_updateSpriteInfo() throws org.apache.thrift.TException
    {
      updateSpriteInfo_result result = new updateSpriteInfo_result();
      receiveBase(result, "updateSpriteInfo");
      return;
    }

    public void removeTimerTask(W2L_TaskRunData task) throws org.apache.thrift.TException
    {
      send_removeTimerTask(task);
      recv_removeTimerTask();
    }

    public void send_removeTimerTask(W2L_TaskRunData task) throws org.apache.thrift.TException
    {
      removeTimerTask_args args = new removeTimerTask_args();
      args.setTask(task);
      sendBase("removeTimerTask", args);
    }

    public void recv_removeTimerTask() throws org.apache.thrift.TException
    {
      removeTimerTask_result result = new removeTimerTask_result();
      receiveBase(result, "removeTimerTask");
      return;
    }

    public void playerEnterNewServer(long roleid, int newServerKey) throws org.apache.thrift.TException
    {
      send_playerEnterNewServer(roleid, newServerKey);
      recv_playerEnterNewServer();
    }

    public void send_playerEnterNewServer(long roleid, int newServerKey) throws org.apache.thrift.TException
    {
      playerEnterNewServer_args args = new playerEnterNewServer_args();
      args.setRoleid(roleid);
      args.setNewServerKey(newServerKey);
      sendBase("playerEnterNewServer", args);
    }

    public void recv_playerEnterNewServer() throws org.apache.thrift.TException
    {
      playerEnterNewServer_result result = new playerEnterNewServer_result();
      receiveBase(result, "playerEnterNewServer");
      return;
    }

    public void playerExitSuccess(long roleid) throws org.apache.thrift.TException
    {
      send_playerExitSuccess(roleid);
      recv_playerExitSuccess();
    }

    public void send_playerExitSuccess(long roleid) throws org.apache.thrift.TException
    {
      playerExitSuccess_args args = new playerExitSuccess_args();
      args.setRoleid(roleid);
      sendBase("playerExitSuccess", args);
    }

    public void recv_playerExitSuccess() throws org.apache.thrift.TException
    {
      playerExitSuccess_result result = new playerExitSuccess_result();
      receiveBase(result, "playerExitSuccess");
      return;
    }

    public void initPlayer(ByteBuffer roleList) throws org.apache.thrift.TException
    {
      send_initPlayer(roleList);
      recv_initPlayer();
    }

    public void send_initPlayer(ByteBuffer roleList) throws org.apache.thrift.TException
    {
      initPlayer_args args = new initPlayer_args();
      args.setRoleList(roleList);
      sendBase("initPlayer", args);
    }

    public void recv_initPlayer() throws org.apache.thrift.TException
    {
      initPlayer_result result = new initPlayer_result();
      receiveBase(result, "initPlayer");
      return;
    }

    public void offlineRole(long roleId) throws org.apache.thrift.TException
    {
      send_offlineRole(roleId);
      recv_offlineRole();
    }

    public void send_offlineRole(long roleId) throws org.apache.thrift.TException
    {
      offlineRole_args args = new offlineRole_args();
      args.setRoleId(roleId);
      sendBase("offlineRole", args);
    }

    public void recv_offlineRole() throws org.apache.thrift.TException
    {
      offlineRole_result result = new offlineRole_result();
      receiveBase(result, "offlineRole");
      return;
    }

    public ByteBuffer requestSpriteDetail(long spriteid, int spritetype) throws org.apache.thrift.TException
    {
      send_requestSpriteDetail(spriteid, spritetype);
      return recv_requestSpriteDetail();
    }

    public void send_requestSpriteDetail(long spriteid, int spritetype) throws org.apache.thrift.TException
    {
      requestSpriteDetail_args args = new requestSpriteDetail_args();
      args.setSpriteid(spriteid);
      args.setSpritetype(spritetype);
      sendBase("requestSpriteDetail", args);
    }

    public ByteBuffer recv_requestSpriteDetail() throws org.apache.thrift.TException
    {
      requestSpriteDetail_result result = new requestSpriteDetail_result();
      receiveBase(result, "requestSpriteDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestSpriteDetail failed: unknown result");
    }

    public void responseSpriteDetail(long requestRoleid, long spriteid, int spritetype, ByteBuffer spriteData) throws org.apache.thrift.TException
    {
      send_responseSpriteDetail(requestRoleid, spriteid, spritetype, spriteData);
      recv_responseSpriteDetail();
    }

    public void send_responseSpriteDetail(long requestRoleid, long spriteid, int spritetype, ByteBuffer spriteData) throws org.apache.thrift.TException
    {
      responseSpriteDetail_args args = new responseSpriteDetail_args();
      args.setRequestRoleid(requestRoleid);
      args.setSpriteid(spriteid);
      args.setSpritetype(spritetype);
      args.setSpriteData(spriteData);
      sendBase("responseSpriteDetail", args);
    }

    public void recv_responseSpriteDetail() throws org.apache.thrift.TException
    {
      responseSpriteDetail_result result = new responseSpriteDetail_result();
      receiveBase(result, "responseSpriteDetail");
      return;
    }

    public void destinationForMe(W2lPlayerInfo w2lPlayerInfo) throws org.apache.thrift.TException
    {
      send_destinationForMe(w2lPlayerInfo);
      recv_destinationForMe();
    }

    public void send_destinationForMe(W2lPlayerInfo w2lPlayerInfo) throws org.apache.thrift.TException
    {
      destinationForMe_args args = new destinationForMe_args();
      args.setW2lPlayerInfo(w2lPlayerInfo);
      sendBase("destinationForMe", args);
    }

    public void recv_destinationForMe() throws org.apache.thrift.TException
    {
      destinationForMe_result result = new destinationForMe_result();
      receiveBase(result, "destinationForMe");
      return;
    }

    public void resVectorInfo(W2lVectorInfo w2lVectorInfo) throws org.apache.thrift.TException
    {
      send_resVectorInfo(w2lVectorInfo);
      recv_resVectorInfo();
    }

    public void send_resVectorInfo(W2lVectorInfo w2lVectorInfo) throws org.apache.thrift.TException
    {
      resVectorInfo_args args = new resVectorInfo_args();
      args.setW2lVectorInfo(w2lVectorInfo);
      sendBase("resVectorInfo", args);
    }

    public void recv_resVectorInfo() throws org.apache.thrift.TException
    {
      resVectorInfo_result result = new resVectorInfo_result();
      receiveBase(result, "resVectorInfo");
      return;
    }

    public void resolveConflict(W2lResolveConflict w2lResolveConflict) throws org.apache.thrift.TException
    {
      send_resolveConflict(w2lResolveConflict);
      recv_resolveConflict();
    }

    public void send_resolveConflict(W2lResolveConflict w2lResolveConflict) throws org.apache.thrift.TException
    {
      resolveConflict_args args = new resolveConflict_args();
      args.setW2lResolveConflict(w2lResolveConflict);
      sendBase("resolveConflict", args);
    }

    public void recv_resolveConflict() throws org.apache.thrift.TException
    {
      resolveConflict_result result = new resolveConflict_result();
      receiveBase(result, "resolveConflict");
      return;
    }

    public void conflictGoback(W2lConflictGoback w2lConflictGoback) throws org.apache.thrift.TException
    {
      send_conflictGoback(w2lConflictGoback);
      recv_conflictGoback();
    }

    public void send_conflictGoback(W2lConflictGoback w2lConflictGoback) throws org.apache.thrift.TException
    {
      conflictGoback_args args = new conflictGoback_args();
      args.setW2lConflictGoback(w2lConflictGoback);
      sendBase("conflictGoback", args);
    }

    public void recv_conflictGoback() throws org.apache.thrift.TException
    {
      conflictGoback_result result = new conflictGoback_result();
      receiveBase(result, "conflictGoback");
      return;
    }

    public void updataSprite(RPC_Sprite viewSprites) throws org.apache.thrift.TException
    {
      send_updataSprite(viewSprites);
      recv_updataSprite();
    }

    public void send_updataSprite(RPC_Sprite viewSprites) throws org.apache.thrift.TException
    {
      updataSprite_args args = new updataSprite_args();
      args.setViewSprites(viewSprites);
      sendBase("updataSprite", args);
    }

    public void recv_updataSprite() throws org.apache.thrift.TException
    {
      updataSprite_result result = new updataSprite_result();
      receiveBase(result, "updataSprite");
      return;
    }

    public void deleteSprite(long uid) throws org.apache.thrift.TException
    {
      send_deleteSprite(uid);
      recv_deleteSprite();
    }

    public void send_deleteSprite(long uid) throws org.apache.thrift.TException
    {
      deleteSprite_args args = new deleteSprite_args();
      args.setUid(uid);
      sendBase("deleteSprite", args);
    }

    public void recv_deleteSprite() throws org.apache.thrift.TException
    {
      deleteSprite_result result = new deleteSprite_result();
      receiveBase(result, "deleteSprite");
      return;
    }

    public void worldRegisterSuccess(W2lSpaceInfo w2lSpaceInfo) throws org.apache.thrift.TException
    {
      send_worldRegisterSuccess(w2lSpaceInfo);
      recv_worldRegisterSuccess();
    }

    public void send_worldRegisterSuccess(W2lSpaceInfo w2lSpaceInfo) throws org.apache.thrift.TException
    {
      worldRegisterSuccess_args args = new worldRegisterSuccess_args();
      args.setW2lSpaceInfo(w2lSpaceInfo);
      sendBase("worldRegisterSuccess", args);
    }

    public void recv_worldRegisterSuccess() throws org.apache.thrift.TException
    {
      worldRegisterSuccess_result result = new worldRegisterSuccess_result();
      receiveBase(result, "worldRegisterSuccess");
      return;
    }

    public void ping() throws org.apache.thrift.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addSprite(RPC_Sprite sprite, long noticeSpriteId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSprite_call method_call = new addSprite_call(sprite, noticeSpriteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSprite_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RPC_Sprite sprite;
      private long noticeSpriteId;
      public addSprite_call(RPC_Sprite sprite, long noticeSpriteId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sprite = sprite;
        this.noticeSpriteId = noticeSpriteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSprite", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSprite_args args = new addSprite_args();
        args.setSprite(sprite);
        args.setNoticeSpriteId(noticeSpriteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addSprite();
      }
    }

    public void removeSprite(long spriteId, long noticeSpriteId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeSprite_call method_call = new removeSprite_call(spriteId, noticeSpriteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeSprite_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long spriteId;
      private long noticeSpriteId;
      public removeSprite_call(long spriteId, long noticeSpriteId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spriteId = spriteId;
        this.noticeSpriteId = noticeSpriteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeSprite", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeSprite_args args = new removeSprite_args();
        args.setSpriteId(spriteId);
        args.setNoticeSpriteId(noticeSpriteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeSprite();
      }
    }

    public void runTask(W2L_TaskRunData task, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      System.out.println("*******runTask  rpc*********"+resultHandler);
      runTask_call method_call = new runTask_call(task, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class runTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private W2L_TaskRunData task;
      public runTask_call(W2L_TaskRunData task, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.task = task;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("runTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        runTask_args args = new runTask_args();
        args.setTask(task);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_runTask();
      }
    }

    public void updateSpriteInfo(RPC_Sprite sprite, long spriteId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSpriteInfo_call method_call = new updateSpriteInfo_call(sprite, spriteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSpriteInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RPC_Sprite sprite;
      private long spriteId;
      public updateSpriteInfo_call(RPC_Sprite sprite, long spriteId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sprite = sprite;
        this.spriteId = spriteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSpriteInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSpriteInfo_args args = new updateSpriteInfo_args();
        args.setSprite(sprite);
        args.setSpriteId(spriteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateSpriteInfo();
      }
    }

    public void removeTimerTask(W2L_TaskRunData task, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeTimerTask_call method_call = new removeTimerTask_call(task, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeTimerTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private W2L_TaskRunData task;
      public removeTimerTask_call(W2L_TaskRunData task, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.task = task;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeTimerTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeTimerTask_args args = new removeTimerTask_args();
        args.setTask(task);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeTimerTask();
      }
    }

    public void playerEnterNewServer(long roleid, int newServerKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      playerEnterNewServer_call method_call = new playerEnterNewServer_call(roleid, newServerKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class playerEnterNewServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long roleid;
      private int newServerKey;
      public playerEnterNewServer_call(long roleid, int newServerKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleid = roleid;
        this.newServerKey = newServerKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("playerEnterNewServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        playerEnterNewServer_args args = new playerEnterNewServer_args();
        args.setRoleid(roleid);
        args.setNewServerKey(newServerKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_playerEnterNewServer();
      }
    }

    public void playerExitSuccess(long roleid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      playerExitSuccess_call method_call = new playerExitSuccess_call(roleid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class playerExitSuccess_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long roleid;
      public playerExitSuccess_call(long roleid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleid = roleid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("playerExitSuccess", org.apache.thrift.protocol.TMessageType.CALL, 0));
        playerExitSuccess_args args = new playerExitSuccess_args();
        args.setRoleid(roleid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_playerExitSuccess();
      }
    }

    public void initPlayer(ByteBuffer roleList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initPlayer_call method_call = new initPlayer_call(roleList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initPlayer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer roleList;
      public initPlayer_call(ByteBuffer roleList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleList = roleList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initPlayer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initPlayer_args args = new initPlayer_args();
        args.setRoleList(roleList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_initPlayer();
      }
    }

    public void offlineRole(long roleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      offlineRole_call method_call = new offlineRole_call(roleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class offlineRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long roleId;
      public offlineRole_call(long roleId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleId = roleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("offlineRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        offlineRole_args args = new offlineRole_args();
        args.setRoleId(roleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_offlineRole();
      }
    }

    public void requestSpriteDetail(long spriteid, int spritetype, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestSpriteDetail_call method_call = new requestSpriteDetail_call(spriteid, spritetype, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestSpriteDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long spriteid;
      private int spritetype;
      public requestSpriteDetail_call(long spriteid, int spritetype, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spriteid = spriteid;
        this.spritetype = spritetype;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestSpriteDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestSpriteDetail_args args = new requestSpriteDetail_args();
        args.setSpriteid(spriteid);
        args.setSpritetype(spritetype);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestSpriteDetail();
      }
    }

    public void responseSpriteDetail(long requestRoleid, long spriteid, int spritetype, ByteBuffer spriteData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      responseSpriteDetail_call method_call = new responseSpriteDetail_call(requestRoleid, spriteid, spritetype, spriteData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class responseSpriteDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long requestRoleid;
      private long spriteid;
      private int spritetype;
      private ByteBuffer spriteData;
      public responseSpriteDetail_call(long requestRoleid, long spriteid, int spritetype, ByteBuffer spriteData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestRoleid = requestRoleid;
        this.spriteid = spriteid;
        this.spritetype = spritetype;
        this.spriteData = spriteData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("responseSpriteDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        responseSpriteDetail_args args = new responseSpriteDetail_args();
        args.setRequestRoleid(requestRoleid);
        args.setSpriteid(spriteid);
        args.setSpritetype(spritetype);
        args.setSpriteData(spriteData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_responseSpriteDetail();
      }
    }

    public void destinationForMe(W2lPlayerInfo w2lPlayerInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      destinationForMe_call method_call = new destinationForMe_call(w2lPlayerInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class destinationForMe_call extends org.apache.thrift.async.TAsyncMethodCall {
      private W2lPlayerInfo w2lPlayerInfo;
      public destinationForMe_call(W2lPlayerInfo w2lPlayerInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.w2lPlayerInfo = w2lPlayerInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("destinationForMe", org.apache.thrift.protocol.TMessageType.CALL, 0));
        destinationForMe_args args = new destinationForMe_args();
        args.setW2lPlayerInfo(w2lPlayerInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_destinationForMe();
      }
    }

    public void resVectorInfo(W2lVectorInfo w2lVectorInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resVectorInfo_call method_call = new resVectorInfo_call(w2lVectorInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resVectorInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private W2lVectorInfo w2lVectorInfo;
      public resVectorInfo_call(W2lVectorInfo w2lVectorInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.w2lVectorInfo = w2lVectorInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resVectorInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resVectorInfo_args args = new resVectorInfo_args();
        args.setW2lVectorInfo(w2lVectorInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_resVectorInfo();
      }
    }

    public void resolveConflict(W2lResolveConflict w2lResolveConflict, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resolveConflict_call method_call = new resolveConflict_call(w2lResolveConflict, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resolveConflict_call extends org.apache.thrift.async.TAsyncMethodCall {
      private W2lResolveConflict w2lResolveConflict;
      public resolveConflict_call(W2lResolveConflict w2lResolveConflict, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.w2lResolveConflict = w2lResolveConflict;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resolveConflict", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resolveConflict_args args = new resolveConflict_args();
        args.setW2lResolveConflict(w2lResolveConflict);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_resolveConflict();
      }
    }

    public void conflictGoback(W2lConflictGoback w2lConflictGoback, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      conflictGoback_call method_call = new conflictGoback_call(w2lConflictGoback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class conflictGoback_call extends org.apache.thrift.async.TAsyncMethodCall {
      private W2lConflictGoback w2lConflictGoback;
      public conflictGoback_call(W2lConflictGoback w2lConflictGoback, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.w2lConflictGoback = w2lConflictGoback;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("conflictGoback", org.apache.thrift.protocol.TMessageType.CALL, 0));
        conflictGoback_args args = new conflictGoback_args();
        args.setW2lConflictGoback(w2lConflictGoback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_conflictGoback();
      }
    }

    public void updataSprite(RPC_Sprite viewSprites, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updataSprite_call method_call = new updataSprite_call(viewSprites, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updataSprite_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RPC_Sprite viewSprites;
      public updataSprite_call(RPC_Sprite viewSprites, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.viewSprites = viewSprites;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updataSprite", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updataSprite_args args = new updataSprite_args();
        args.setViewSprites(viewSprites);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updataSprite();
      }
    }

    public void deleteSprite(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSprite_call method_call = new deleteSprite_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSprite_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public deleteSprite_call(long uid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSprite", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSprite_args args = new deleteSprite_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteSprite();
      }
    }

    public void worldRegisterSuccess(W2lSpaceInfo w2lSpaceInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      worldRegisterSuccess_call method_call = new worldRegisterSuccess_call(w2lSpaceInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class worldRegisterSuccess_call extends org.apache.thrift.async.TAsyncMethodCall {
      private W2lSpaceInfo w2lSpaceInfo;
      public worldRegisterSuccess_call(W2lSpaceInfo w2lSpaceInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.w2lSpaceInfo = w2lSpaceInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("worldRegisterSuccess", org.apache.thrift.protocol.TMessageType.CALL, 0));
        worldRegisterSuccess_args args = new worldRegisterSuccess_args();
        args.setW2lSpaceInfo(w2lSpaceInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_worldRegisterSuccess();
      }
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ping();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addSprite", new addSprite());
      processMap.put("removeSprite", new removeSprite());
      processMap.put("runTask", new runTask());
      processMap.put("updateSpriteInfo", new updateSpriteInfo());
      processMap.put("removeTimerTask", new removeTimerTask());
      processMap.put("playerEnterNewServer", new playerEnterNewServer());
      processMap.put("playerExitSuccess", new playerExitSuccess());
      processMap.put("initPlayer", new initPlayer());
      processMap.put("offlineRole", new offlineRole());
      processMap.put("requestSpriteDetail", new requestSpriteDetail());
      processMap.put("responseSpriteDetail", new responseSpriteDetail());
      processMap.put("destinationForMe", new destinationForMe());
      processMap.put("resVectorInfo", new resVectorInfo());
      processMap.put("resolveConflict", new resolveConflict());
      processMap.put("conflictGoback", new conflictGoback());
      processMap.put("updataSprite", new updataSprite());
      processMap.put("deleteSprite", new deleteSprite());
      processMap.put("worldRegisterSuccess", new worldRegisterSuccess());
      processMap.put("ping", new ping());
      return processMap;
    }

    public static class addSprite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSprite_args> {
      public addSprite() {
        super("addSprite");
      }

      public addSprite_args getEmptyArgsInstance() {
        return new addSprite_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSprite_result getResult(I iface, addSprite_args args) throws org.apache.thrift.TException {
        addSprite_result result = new addSprite_result();
        iface.addSprite(args.sprite, args.noticeSpriteId);
        return result;
      }
    }

    public static class removeSprite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeSprite_args> {
      public removeSprite() {
        super("removeSprite");
      }

      public removeSprite_args getEmptyArgsInstance() {
        return new removeSprite_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeSprite_result getResult(I iface, removeSprite_args args) throws org.apache.thrift.TException {
        removeSprite_result result = new removeSprite_result();
        iface.removeSprite(args.spriteId, args.noticeSpriteId);
        return result;
      }
    }

    public static class runTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, runTask_args> {
      public runTask() {
        super("runTask");
      }

      public runTask_args getEmptyArgsInstance() {
        return new runTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public runTask_result getResult(I iface, runTask_args args) throws org.apache.thrift.TException {
        runTask_result result = new runTask_result();
        iface.runTask(args.task);
        return result;
      }
    }

    public static class updateSpriteInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSpriteInfo_args> {
      public updateSpriteInfo() {
        super("updateSpriteInfo");
      }

      public updateSpriteInfo_args getEmptyArgsInstance() {
        return new updateSpriteInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSpriteInfo_result getResult(I iface, updateSpriteInfo_args args) throws org.apache.thrift.TException {
        updateSpriteInfo_result result = new updateSpriteInfo_result();
        iface.updateSpriteInfo(args.sprite, args.spriteId);
        return result;
      }
    }

    public static class removeTimerTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeTimerTask_args> {
      public removeTimerTask() {
        super("removeTimerTask");
      }

      public removeTimerTask_args getEmptyArgsInstance() {
        return new removeTimerTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeTimerTask_result getResult(I iface, removeTimerTask_args args) throws org.apache.thrift.TException {
        removeTimerTask_result result = new removeTimerTask_result();
        iface.removeTimerTask(args.task);
        return result;
      }
    }

    public static class playerEnterNewServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, playerEnterNewServer_args> {
      public playerEnterNewServer() {
        super("playerEnterNewServer");
      }

      public playerEnterNewServer_args getEmptyArgsInstance() {
        return new playerEnterNewServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public playerEnterNewServer_result getResult(I iface, playerEnterNewServer_args args) throws org.apache.thrift.TException {
        playerEnterNewServer_result result = new playerEnterNewServer_result();
        iface.playerEnterNewServer(args.roleid, args.newServerKey);
        return result;
      }
    }

    public static class playerExitSuccess<I extends Iface> extends org.apache.thrift.ProcessFunction<I, playerExitSuccess_args> {
      public playerExitSuccess() {
        super("playerExitSuccess");
      }

      public playerExitSuccess_args getEmptyArgsInstance() {
        return new playerExitSuccess_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public playerExitSuccess_result getResult(I iface, playerExitSuccess_args args) throws org.apache.thrift.TException {
        playerExitSuccess_result result = new playerExitSuccess_result();
        iface.playerExitSuccess(args.roleid);
        return result;
      }
    }

    public static class initPlayer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initPlayer_args> {
      public initPlayer() {
        super("initPlayer");
      }

      public initPlayer_args getEmptyArgsInstance() {
        return new initPlayer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public initPlayer_result getResult(I iface, initPlayer_args args) throws org.apache.thrift.TException {
        initPlayer_result result = new initPlayer_result();
        iface.initPlayer(args.roleList);
        return result;
      }
    }

    public static class offlineRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, offlineRole_args> {
      public offlineRole() {
        super("offlineRole");
      }

      public offlineRole_args getEmptyArgsInstance() {
        return new offlineRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public offlineRole_result getResult(I iface, offlineRole_args args) throws org.apache.thrift.TException {
        offlineRole_result result = new offlineRole_result();
        iface.offlineRole(args.roleId);
        return result;
      }
    }

    public static class requestSpriteDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestSpriteDetail_args> {
      public requestSpriteDetail() {
        super("requestSpriteDetail");
      }

      public requestSpriteDetail_args getEmptyArgsInstance() {
        return new requestSpriteDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public requestSpriteDetail_result getResult(I iface, requestSpriteDetail_args args) throws org.apache.thrift.TException {
        requestSpriteDetail_result result = new requestSpriteDetail_result();
        result.success = iface.requestSpriteDetail(args.spriteid, args.spritetype);
        return result;
      }
    }

    public static class responseSpriteDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, responseSpriteDetail_args> {
      public responseSpriteDetail() {
        super("responseSpriteDetail");
      }

      public responseSpriteDetail_args getEmptyArgsInstance() {
        return new responseSpriteDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public responseSpriteDetail_result getResult(I iface, responseSpriteDetail_args args) throws org.apache.thrift.TException {
        responseSpriteDetail_result result = new responseSpriteDetail_result();
        iface.responseSpriteDetail(args.requestRoleid, args.spriteid, args.spritetype, args.spriteData);
        return result;
      }
    }

    public static class destinationForMe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, destinationForMe_args> {
      public destinationForMe() {
        super("destinationForMe");
      }

      public destinationForMe_args getEmptyArgsInstance() {
        return new destinationForMe_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public destinationForMe_result getResult(I iface, destinationForMe_args args) throws org.apache.thrift.TException {
        destinationForMe_result result = new destinationForMe_result();
        iface.destinationForMe(args.w2lPlayerInfo);
        return result;
      }
    }

    public static class resVectorInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resVectorInfo_args> {
      public resVectorInfo() {
        super("resVectorInfo");
      }

      public resVectorInfo_args getEmptyArgsInstance() {
        return new resVectorInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resVectorInfo_result getResult(I iface, resVectorInfo_args args) throws org.apache.thrift.TException {
        resVectorInfo_result result = new resVectorInfo_result();
        iface.resVectorInfo(args.w2lVectorInfo);
        return result;
      }
    }

    public static class resolveConflict<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resolveConflict_args> {
      public resolveConflict() {
        super("resolveConflict");
      }

      public resolveConflict_args getEmptyArgsInstance() {
        return new resolveConflict_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resolveConflict_result getResult(I iface, resolveConflict_args args) throws org.apache.thrift.TException {
        resolveConflict_result result = new resolveConflict_result();
        iface.resolveConflict(args.w2lResolveConflict);
        return result;
      }
    }

    public static class conflictGoback<I extends Iface> extends org.apache.thrift.ProcessFunction<I, conflictGoback_args> {
      public conflictGoback() {
        super("conflictGoback");
      }

      public conflictGoback_args getEmptyArgsInstance() {
        return new conflictGoback_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public conflictGoback_result getResult(I iface, conflictGoback_args args) throws org.apache.thrift.TException {
        conflictGoback_result result = new conflictGoback_result();
        iface.conflictGoback(args.w2lConflictGoback);
        return result;
      }
    }

    public static class updataSprite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updataSprite_args> {
      public updataSprite() {
        super("updataSprite");
      }

      public updataSprite_args getEmptyArgsInstance() {
        return new updataSprite_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updataSprite_result getResult(I iface, updataSprite_args args) throws org.apache.thrift.TException {
        updataSprite_result result = new updataSprite_result();
        iface.updataSprite(args.viewSprites);
        return result;
      }
    }

    public static class deleteSprite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSprite_args> {
      public deleteSprite() {
        super("deleteSprite");
      }

      public deleteSprite_args getEmptyArgsInstance() {
        return new deleteSprite_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSprite_result getResult(I iface, deleteSprite_args args) throws org.apache.thrift.TException {
        deleteSprite_result result = new deleteSprite_result();
        iface.deleteSprite(args.uid);
        return result;
      }
    }

    public static class worldRegisterSuccess<I extends Iface> extends org.apache.thrift.ProcessFunction<I, worldRegisterSuccess_args> {
      public worldRegisterSuccess() {
        super("worldRegisterSuccess");
      }

      public worldRegisterSuccess_args getEmptyArgsInstance() {
        return new worldRegisterSuccess_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public worldRegisterSuccess_result getResult(I iface, worldRegisterSuccess_args args) throws org.apache.thrift.TException {
        worldRegisterSuccess_result result = new worldRegisterSuccess_result();
        iface.worldRegisterSuccess(args.w2lSpaceInfo);
        return result;
      }
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        iface.ping();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addSprite", new addSprite());
      processMap.put("removeSprite", new removeSprite());
      processMap.put("runTask", new runTask());
      processMap.put("updateSpriteInfo", new updateSpriteInfo());
      processMap.put("removeTimerTask", new removeTimerTask());
      processMap.put("playerEnterNewServer", new playerEnterNewServer());
      processMap.put("playerExitSuccess", new playerExitSuccess());
      processMap.put("initPlayer", new initPlayer());
      processMap.put("offlineRole", new offlineRole());
      processMap.put("requestSpriteDetail", new requestSpriteDetail());
      processMap.put("responseSpriteDetail", new responseSpriteDetail());
      processMap.put("destinationForMe", new destinationForMe());
      processMap.put("resVectorInfo", new resVectorInfo());
      processMap.put("resolveConflict", new resolveConflict());
      processMap.put("conflictGoback", new conflictGoback());
      processMap.put("updataSprite", new updataSprite());
      processMap.put("deleteSprite", new deleteSprite());
      processMap.put("worldRegisterSuccess", new worldRegisterSuccess());
      processMap.put("ping", new ping());
      return processMap;
    }

    public static class addSprite<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSprite_args, Void> {
      public addSprite() {
        super("addSprite");
      }

      public addSprite_args getEmptyArgsInstance() {
        return new addSprite_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addSprite_result result = new addSprite_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSprite_result result = new addSprite_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSprite_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addSprite(args.sprite, args.noticeSpriteId,resultHandler);
      }
    }

    public static class removeSprite<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeSprite_args, Void> {
      public removeSprite() {
        super("removeSprite");
      }

      public removeSprite_args getEmptyArgsInstance() {
        return new removeSprite_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeSprite_result result = new removeSprite_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeSprite_result result = new removeSprite_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeSprite_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeSprite(args.spriteId, args.noticeSpriteId,resultHandler);
      }
    }

    public static class runTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, runTask_args, Void> {
      public runTask() {
        super("runTask");
      }

      public runTask_args getEmptyArgsInstance() {
        return new runTask_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            runTask_result result = new runTask_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            runTask_result result = new runTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, runTask_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.runTask(args.task,resultHandler);
      }
    }

    public static class updateSpriteInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSpriteInfo_args, Void> {
      public updateSpriteInfo() {
        super("updateSpriteInfo");
      }

      public updateSpriteInfo_args getEmptyArgsInstance() {
        return new updateSpriteInfo_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateSpriteInfo_result result = new updateSpriteInfo_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSpriteInfo_result result = new updateSpriteInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSpriteInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateSpriteInfo(args.sprite, args.spriteId,resultHandler);
      }
    }

    public static class removeTimerTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeTimerTask_args, Void> {
      public removeTimerTask() {
        super("removeTimerTask");
      }

      public removeTimerTask_args getEmptyArgsInstance() {
        return new removeTimerTask_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeTimerTask_result result = new removeTimerTask_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeTimerTask_result result = new removeTimerTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeTimerTask_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeTimerTask(args.task,resultHandler);
      }
    }

    public static class playerEnterNewServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, playerEnterNewServer_args, Void> {
      public playerEnterNewServer() {
        super("playerEnterNewServer");
      }

      public playerEnterNewServer_args getEmptyArgsInstance() {
        return new playerEnterNewServer_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            playerEnterNewServer_result result = new playerEnterNewServer_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            playerEnterNewServer_result result = new playerEnterNewServer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, playerEnterNewServer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.playerEnterNewServer(args.roleid, args.newServerKey,resultHandler);
      }
    }

    public static class playerExitSuccess<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, playerExitSuccess_args, Void> {
      public playerExitSuccess() {
        super("playerExitSuccess");
      }

      public playerExitSuccess_args getEmptyArgsInstance() {
        return new playerExitSuccess_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            playerExitSuccess_result result = new playerExitSuccess_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            playerExitSuccess_result result = new playerExitSuccess_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, playerExitSuccess_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.playerExitSuccess(args.roleid,resultHandler);
      }
    }

    public static class initPlayer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initPlayer_args, Void> {
      public initPlayer() {
        super("initPlayer");
      }

      public initPlayer_args getEmptyArgsInstance() {
        return new initPlayer_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            initPlayer_result result = new initPlayer_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            initPlayer_result result = new initPlayer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, initPlayer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.initPlayer(args.roleList,resultHandler);
      }
    }

    public static class offlineRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, offlineRole_args, Void> {
      public offlineRole() {
        super("offlineRole");
      }

      public offlineRole_args getEmptyArgsInstance() {
        return new offlineRole_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            offlineRole_result result = new offlineRole_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            offlineRole_result result = new offlineRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, offlineRole_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.offlineRole(args.roleId,resultHandler);
      }
    }

    public static class requestSpriteDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestSpriteDetail_args, ByteBuffer> {
      public requestSpriteDetail() {
        super("requestSpriteDetail");
      }

      public requestSpriteDetail_args getEmptyArgsInstance() {
        return new requestSpriteDetail_args();
      }

      public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ByteBuffer>() { 
          public void onComplete(ByteBuffer o) {
            requestSpriteDetail_result result = new requestSpriteDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            requestSpriteDetail_result result = new requestSpriteDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, requestSpriteDetail_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
        iface.requestSpriteDetail(args.spriteid, args.spritetype,resultHandler);
      }
    }

    public static class responseSpriteDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, responseSpriteDetail_args, Void> {
      public responseSpriteDetail() {
        super("responseSpriteDetail");
      }

      public responseSpriteDetail_args getEmptyArgsInstance() {
        return new responseSpriteDetail_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            responseSpriteDetail_result result = new responseSpriteDetail_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            responseSpriteDetail_result result = new responseSpriteDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, responseSpriteDetail_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.responseSpriteDetail(args.requestRoleid, args.spriteid, args.spritetype, args.spriteData,resultHandler);
      }
    }

    public static class destinationForMe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, destinationForMe_args, Void> {
      public destinationForMe() {
        super("destinationForMe");
      }

      public destinationForMe_args getEmptyArgsInstance() {
        return new destinationForMe_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            destinationForMe_result result = new destinationForMe_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            destinationForMe_result result = new destinationForMe_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, destinationForMe_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.destinationForMe(args.w2lPlayerInfo,resultHandler);
      }
    }

    public static class resVectorInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resVectorInfo_args, Void> {
      public resVectorInfo() {
        super("resVectorInfo");
      }

      public resVectorInfo_args getEmptyArgsInstance() {
        return new resVectorInfo_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            resVectorInfo_result result = new resVectorInfo_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resVectorInfo_result result = new resVectorInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resVectorInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.resVectorInfo(args.w2lVectorInfo,resultHandler);
      }
    }

    public static class resolveConflict<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resolveConflict_args, Void> {
      public resolveConflict() {
        super("resolveConflict");
      }

      public resolveConflict_args getEmptyArgsInstance() {
        return new resolveConflict_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            resolveConflict_result result = new resolveConflict_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resolveConflict_result result = new resolveConflict_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resolveConflict_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.resolveConflict(args.w2lResolveConflict,resultHandler);
      }
    }

    public static class conflictGoback<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, conflictGoback_args, Void> {
      public conflictGoback() {
        super("conflictGoback");
      }

      public conflictGoback_args getEmptyArgsInstance() {
        return new conflictGoback_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            conflictGoback_result result = new conflictGoback_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            conflictGoback_result result = new conflictGoback_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, conflictGoback_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.conflictGoback(args.w2lConflictGoback,resultHandler);
      }
    }

    public static class updataSprite<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updataSprite_args, Void> {
      public updataSprite() {
        super("updataSprite");
      }

      public updataSprite_args getEmptyArgsInstance() {
        return new updataSprite_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updataSprite_result result = new updataSprite_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updataSprite_result result = new updataSprite_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updataSprite_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updataSprite(args.viewSprites,resultHandler);
      }
    }

    public static class deleteSprite<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSprite_args, Void> {
      public deleteSprite() {
        super("deleteSprite");
      }

      public deleteSprite_args getEmptyArgsInstance() {
        return new deleteSprite_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteSprite_result result = new deleteSprite_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteSprite_result result = new deleteSprite_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSprite_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteSprite(args.uid,resultHandler);
      }
    }

    public static class worldRegisterSuccess<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, worldRegisterSuccess_args, Void> {
      public worldRegisterSuccess() {
        super("worldRegisterSuccess");
      }

      public worldRegisterSuccess_args getEmptyArgsInstance() {
        return new worldRegisterSuccess_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            worldRegisterSuccess_result result = new worldRegisterSuccess_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            worldRegisterSuccess_result result = new worldRegisterSuccess_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, worldRegisterSuccess_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.worldRegisterSuccess(args.w2lSpaceInfo,resultHandler);
      }
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.ping(resultHandler);
      }
    }

  }

  public static class addSprite_args implements org.apache.thrift.TBase<addSprite_args, addSprite_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSprite_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSprite_args");

    private static final org.apache.thrift.protocol.TField SPRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("sprite", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NOTICE_SPRITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("noticeSpriteId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSprite_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSprite_argsTupleSchemeFactory());
    }

    public RPC_Sprite sprite; // required
    public long noticeSpriteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPRITE((short)1, "sprite"),
      NOTICE_SPRITE_ID((short)2, "noticeSpriteId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPRITE
            return SPRITE;
          case 2: // NOTICE_SPRITE_ID
            return NOTICE_SPRITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOTICESPRITEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPRITE, new org.apache.thrift.meta_data.FieldMetaData("sprite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC_Sprite.class)));
      tmpMap.put(_Fields.NOTICE_SPRITE_ID, new org.apache.thrift.meta_data.FieldMetaData("noticeSpriteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSprite_args.class, metaDataMap);
    }

    public addSprite_args() {
    }

    public addSprite_args(
      RPC_Sprite sprite,
      long noticeSpriteId)
    {
      this();
      this.sprite = sprite;
      this.noticeSpriteId = noticeSpriteId;
      setNoticeSpriteIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSprite_args(addSprite_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSprite()) {
        this.sprite = new RPC_Sprite(other.sprite);
      }
      this.noticeSpriteId = other.noticeSpriteId;
    }

    public addSprite_args deepCopy() {
      return new addSprite_args(this);
    }

    @Override
    public void clear() {
      this.sprite = null;
      setNoticeSpriteIdIsSet(false);
      this.noticeSpriteId = 0;
    }

    public RPC_Sprite getSprite() {
      return this.sprite;
    }

    public addSprite_args setSprite(RPC_Sprite sprite) {
      this.sprite = sprite;
      return this;
    }

    public void unsetSprite() {
      this.sprite = null;
    }

    /** Returns true if field sprite is set (has been assigned a value) and false otherwise */
    public boolean isSetSprite() {
      return this.sprite != null;
    }

    public void setSpriteIsSet(boolean value) {
      if (!value) {
        this.sprite = null;
      }
    }

    public long getNoticeSpriteId() {
      return this.noticeSpriteId;
    }

    public addSprite_args setNoticeSpriteId(long noticeSpriteId) {
      this.noticeSpriteId = noticeSpriteId;
      setNoticeSpriteIdIsSet(true);
      return this;
    }

    public void unsetNoticeSpriteId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTICESPRITEID_ISSET_ID);
    }

    /** Returns true if field noticeSpriteId is set (has been assigned a value) and false otherwise */
    public boolean isSetNoticeSpriteId() {
      return EncodingUtils.testBit(__isset_bitfield, __NOTICESPRITEID_ISSET_ID);
    }

    public void setNoticeSpriteIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTICESPRITEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPRITE:
        if (value == null) {
          unsetSprite();
        } else {
          setSprite((RPC_Sprite)value);
        }
        break;

      case NOTICE_SPRITE_ID:
        if (value == null) {
          unsetNoticeSpriteId();
        } else {
          setNoticeSpriteId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPRITE:
        return getSprite();

      case NOTICE_SPRITE_ID:
        return getNoticeSpriteId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPRITE:
        return isSetSprite();
      case NOTICE_SPRITE_ID:
        return isSetNoticeSpriteId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSprite_args)
        return this.equals((addSprite_args)that);
      return false;
    }

    public boolean equals(addSprite_args that) {
      if (that == null)
        return false;

      boolean this_present_sprite = true && this.isSetSprite();
      boolean that_present_sprite = true && that.isSetSprite();
      if (this_present_sprite || that_present_sprite) {
        if (!(this_present_sprite && that_present_sprite))
          return false;
        if (!this.sprite.equals(that.sprite))
          return false;
      }

      boolean this_present_noticeSpriteId = true;
      boolean that_present_noticeSpriteId = true;
      if (this_present_noticeSpriteId || that_present_noticeSpriteId) {
        if (!(this_present_noticeSpriteId && that_present_noticeSpriteId))
          return false;
        if (this.noticeSpriteId != that.noticeSpriteId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sprite = true && (isSetSprite());
      list.add(present_sprite);
      if (present_sprite)
        list.add(sprite);

      boolean present_noticeSpriteId = true;
      list.add(present_noticeSpriteId);
      if (present_noticeSpriteId)
        list.add(noticeSpriteId);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSprite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSprite()).compareTo(other.isSetSprite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSprite()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sprite, other.sprite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoticeSpriteId()).compareTo(other.isSetNoticeSpriteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoticeSpriteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noticeSpriteId, other.noticeSpriteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSprite_args(");
      boolean first = true;

      sb.append("sprite:");
      if (this.sprite == null) {
        sb.append("null");
      } else {
        sb.append(this.sprite);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noticeSpriteId:");
      sb.append(this.noticeSpriteId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sprite != null) {
        sprite.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSprite_argsStandardSchemeFactory implements SchemeFactory {
      public addSprite_argsStandardScheme getScheme() {
        return new addSprite_argsStandardScheme();
      }
    }

    private static class addSprite_argsStandardScheme extends StandardScheme<addSprite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSprite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPRITE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sprite = new RPC_Sprite();
                struct.sprite.read(iprot);
                struct.setSpriteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOTICE_SPRITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.noticeSpriteId = iprot.readI64();
                struct.setNoticeSpriteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSprite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sprite != null) {
          oprot.writeFieldBegin(SPRITE_FIELD_DESC);
          struct.sprite.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NOTICE_SPRITE_ID_FIELD_DESC);
        oprot.writeI64(struct.noticeSpriteId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSprite_argsTupleSchemeFactory implements SchemeFactory {
      public addSprite_argsTupleScheme getScheme() {
        return new addSprite_argsTupleScheme();
      }
    }

    private static class addSprite_argsTupleScheme extends TupleScheme<addSprite_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSprite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSprite()) {
          optionals.set(0);
        }
        if (struct.isSetNoticeSpriteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSprite()) {
          struct.sprite.write(oprot);
        }
        if (struct.isSetNoticeSpriteId()) {
          oprot.writeI64(struct.noticeSpriteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSprite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sprite = new RPC_Sprite();
          struct.sprite.read(iprot);
          struct.setSpriteIsSet(true);
        }
        if (incoming.get(1)) {
          struct.noticeSpriteId = iprot.readI64();
          struct.setNoticeSpriteIdIsSet(true);
        }
      }
    }

  }

  public static class addSprite_result implements org.apache.thrift.TBase<addSprite_result, addSprite_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSprite_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSprite_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSprite_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSprite_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSprite_result.class, metaDataMap);
    }

    public addSprite_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSprite_result(addSprite_result other) {
    }

    public addSprite_result deepCopy() {
      return new addSprite_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSprite_result)
        return this.equals((addSprite_result)that);
      return false;
    }

    public boolean equals(addSprite_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(addSprite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSprite_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSprite_resultStandardSchemeFactory implements SchemeFactory {
      public addSprite_resultStandardScheme getScheme() {
        return new addSprite_resultStandardScheme();
      }
    }

    private static class addSprite_resultStandardScheme extends StandardScheme<addSprite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSprite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSprite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSprite_resultTupleSchemeFactory implements SchemeFactory {
      public addSprite_resultTupleScheme getScheme() {
        return new addSprite_resultTupleScheme();
      }
    }

    private static class addSprite_resultTupleScheme extends TupleScheme<addSprite_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSprite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSprite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class removeSprite_args implements org.apache.thrift.TBase<removeSprite_args, removeSprite_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeSprite_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSprite_args");

    private static final org.apache.thrift.protocol.TField SPRITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spriteId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NOTICE_SPRITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("noticeSpriteId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeSprite_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeSprite_argsTupleSchemeFactory());
    }

    public long spriteId; // required
    public long noticeSpriteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPRITE_ID((short)1, "spriteId"),
      NOTICE_SPRITE_ID((short)2, "noticeSpriteId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPRITE_ID
            return SPRITE_ID;
          case 2: // NOTICE_SPRITE_ID
            return NOTICE_SPRITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPRITEID_ISSET_ID = 0;
    private static final int __NOTICESPRITEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPRITE_ID, new org.apache.thrift.meta_data.FieldMetaData("spriteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NOTICE_SPRITE_ID, new org.apache.thrift.meta_data.FieldMetaData("noticeSpriteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSprite_args.class, metaDataMap);
    }

    public removeSprite_args() {
    }

    public removeSprite_args(
      long spriteId,
      long noticeSpriteId)
    {
      this();
      this.spriteId = spriteId;
      setSpriteIdIsSet(true);
      this.noticeSpriteId = noticeSpriteId;
      setNoticeSpriteIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSprite_args(removeSprite_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.spriteId = other.spriteId;
      this.noticeSpriteId = other.noticeSpriteId;
    }

    public removeSprite_args deepCopy() {
      return new removeSprite_args(this);
    }

    @Override
    public void clear() {
      setSpriteIdIsSet(false);
      this.spriteId = 0;
      setNoticeSpriteIdIsSet(false);
      this.noticeSpriteId = 0;
    }

    public long getSpriteId() {
      return this.spriteId;
    }

    public removeSprite_args setSpriteId(long spriteId) {
      this.spriteId = spriteId;
      setSpriteIdIsSet(true);
      return this;
    }

    public void unsetSpriteId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    /** Returns true if field spriteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSpriteId() {
      return EncodingUtils.testBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    public void setSpriteIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPRITEID_ISSET_ID, value);
    }

    public long getNoticeSpriteId() {
      return this.noticeSpriteId;
    }

    public removeSprite_args setNoticeSpriteId(long noticeSpriteId) {
      this.noticeSpriteId = noticeSpriteId;
      setNoticeSpriteIdIsSet(true);
      return this;
    }

    public void unsetNoticeSpriteId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTICESPRITEID_ISSET_ID);
    }

    /** Returns true if field noticeSpriteId is set (has been assigned a value) and false otherwise */
    public boolean isSetNoticeSpriteId() {
      return EncodingUtils.testBit(__isset_bitfield, __NOTICESPRITEID_ISSET_ID);
    }

    public void setNoticeSpriteIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTICESPRITEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPRITE_ID:
        if (value == null) {
          unsetSpriteId();
        } else {
          setSpriteId((Long)value);
        }
        break;

      case NOTICE_SPRITE_ID:
        if (value == null) {
          unsetNoticeSpriteId();
        } else {
          setNoticeSpriteId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPRITE_ID:
        return getSpriteId();

      case NOTICE_SPRITE_ID:
        return getNoticeSpriteId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPRITE_ID:
        return isSetSpriteId();
      case NOTICE_SPRITE_ID:
        return isSetNoticeSpriteId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSprite_args)
        return this.equals((removeSprite_args)that);
      return false;
    }

    public boolean equals(removeSprite_args that) {
      if (that == null)
        return false;

      boolean this_present_spriteId = true;
      boolean that_present_spriteId = true;
      if (this_present_spriteId || that_present_spriteId) {
        if (!(this_present_spriteId && that_present_spriteId))
          return false;
        if (this.spriteId != that.spriteId)
          return false;
      }

      boolean this_present_noticeSpriteId = true;
      boolean that_present_noticeSpriteId = true;
      if (this_present_noticeSpriteId || that_present_noticeSpriteId) {
        if (!(this_present_noticeSpriteId && that_present_noticeSpriteId))
          return false;
        if (this.noticeSpriteId != that.noticeSpriteId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_spriteId = true;
      list.add(present_spriteId);
      if (present_spriteId)
        list.add(spriteId);

      boolean present_noticeSpriteId = true;
      list.add(present_noticeSpriteId);
      if (present_noticeSpriteId)
        list.add(noticeSpriteId);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeSprite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpriteId()).compareTo(other.isSetSpriteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpriteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spriteId, other.spriteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoticeSpriteId()).compareTo(other.isSetNoticeSpriteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoticeSpriteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noticeSpriteId, other.noticeSpriteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSprite_args(");
      boolean first = true;

      sb.append("spriteId:");
      sb.append(this.spriteId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("noticeSpriteId:");
      sb.append(this.noticeSpriteId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSprite_argsStandardSchemeFactory implements SchemeFactory {
      public removeSprite_argsStandardScheme getScheme() {
        return new removeSprite_argsStandardScheme();
      }
    }

    private static class removeSprite_argsStandardScheme extends StandardScheme<removeSprite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSprite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPRITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.spriteId = iprot.readI64();
                struct.setSpriteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOTICE_SPRITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.noticeSpriteId = iprot.readI64();
                struct.setNoticeSpriteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSprite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SPRITE_ID_FIELD_DESC);
        oprot.writeI64(struct.spriteId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NOTICE_SPRITE_ID_FIELD_DESC);
        oprot.writeI64(struct.noticeSpriteId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSprite_argsTupleSchemeFactory implements SchemeFactory {
      public removeSprite_argsTupleScheme getScheme() {
        return new removeSprite_argsTupleScheme();
      }
    }

    private static class removeSprite_argsTupleScheme extends TupleScheme<removeSprite_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSprite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpriteId()) {
          optionals.set(0);
        }
        if (struct.isSetNoticeSpriteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSpriteId()) {
          oprot.writeI64(struct.spriteId);
        }
        if (struct.isSetNoticeSpriteId()) {
          oprot.writeI64(struct.noticeSpriteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSprite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.spriteId = iprot.readI64();
          struct.setSpriteIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.noticeSpriteId = iprot.readI64();
          struct.setNoticeSpriteIdIsSet(true);
        }
      }
    }

  }

  public static class removeSprite_result implements org.apache.thrift.TBase<removeSprite_result, removeSprite_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeSprite_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSprite_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeSprite_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeSprite_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSprite_result.class, metaDataMap);
    }

    public removeSprite_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSprite_result(removeSprite_result other) {
    }

    public removeSprite_result deepCopy() {
      return new removeSprite_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSprite_result)
        return this.equals((removeSprite_result)that);
      return false;
    }

    public boolean equals(removeSprite_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(removeSprite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSprite_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeSprite_resultStandardSchemeFactory implements SchemeFactory {
      public removeSprite_resultStandardScheme getScheme() {
        return new removeSprite_resultStandardScheme();
      }
    }

    private static class removeSprite_resultStandardScheme extends StandardScheme<removeSprite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSprite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSprite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSprite_resultTupleSchemeFactory implements SchemeFactory {
      public removeSprite_resultTupleScheme getScheme() {
        return new removeSprite_resultTupleScheme();
      }
    }

    private static class removeSprite_resultTupleScheme extends TupleScheme<removeSprite_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSprite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSprite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class runTask_args implements org.apache.thrift.TBase<runTask_args, runTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<runTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runTask_args");

    private static final org.apache.thrift.protocol.TField TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("task", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new runTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new runTask_argsTupleSchemeFactory());
    }

    public W2L_TaskRunData task; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK((short)1, "task");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK
            return TASK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK, new org.apache.thrift.meta_data.FieldMetaData("task", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, W2L_TaskRunData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runTask_args.class, metaDataMap);
    }

    public runTask_args() {
    }

    public runTask_args(
      W2L_TaskRunData task)
    {
      this();
      this.task = task;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runTask_args(runTask_args other) {
      if (other.isSetTask()) {
        this.task = new W2L_TaskRunData(other.task);
      }
    }

    public runTask_args deepCopy() {
      return new runTask_args(this);
    }

    @Override
    public void clear() {
      this.task = null;
    }

    public W2L_TaskRunData getTask() {
      return this.task;
    }

    public runTask_args setTask(W2L_TaskRunData task) {
      this.task = task;
      return this;
    }

    public void unsetTask() {
      this.task = null;
    }

    /** Returns true if field task is set (has been assigned a value) and false otherwise */
    public boolean isSetTask() {
      return this.task != null;
    }

    public void setTaskIsSet(boolean value) {
      if (!value) {
        this.task = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK:
        if (value == null) {
          unsetTask();
        } else {
          setTask((W2L_TaskRunData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK:
        return getTask();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK:
        return isSetTask();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof runTask_args)
        return this.equals((runTask_args)that);
      return false;
    }

    public boolean equals(runTask_args that) {
      if (that == null)
        return false;

      boolean this_present_task = true && this.isSetTask();
      boolean that_present_task = true && that.isSetTask();
      if (this_present_task || that_present_task) {
        if (!(this_present_task && that_present_task))
          return false;
        if (!this.task.equals(that.task))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_task = true && (isSetTask());
      list.add(present_task);
      if (present_task)
        list.add(task);

      return list.hashCode();
    }

    @Override
    public int compareTo(runTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTask()).compareTo(other.isSetTask());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task, other.task);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("runTask_args(");
      boolean first = true;

      sb.append("task:");
      if (this.task == null) {
        sb.append("null");
      } else {
        sb.append(this.task);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (task != null) {
        task.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runTask_argsStandardSchemeFactory implements SchemeFactory {
      public runTask_argsStandardScheme getScheme() {
        return new runTask_argsStandardScheme();
      }
    }

    private static class runTask_argsStandardScheme extends StandardScheme<runTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.task = new W2L_TaskRunData();
                struct.task.read(iprot);
                struct.setTaskIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.task != null) {
          oprot.writeFieldBegin(TASK_FIELD_DESC);
          struct.task.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runTask_argsTupleSchemeFactory implements SchemeFactory {
      public runTask_argsTupleScheme getScheme() {
        return new runTask_argsTupleScheme();
      }
    }

    private static class runTask_argsTupleScheme extends TupleScheme<runTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTask()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTask()) {
          struct.task.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.task = new W2L_TaskRunData();
          struct.task.read(iprot);
          struct.setTaskIsSet(true);
        }
      }
    }

  }

  public static class runTask_result implements org.apache.thrift.TBase<runTask_result, runTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<runTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runTask_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new runTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new runTask_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runTask_result.class, metaDataMap);
    }

    public runTask_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runTask_result(runTask_result other) {
    }

    public runTask_result deepCopy() {
      return new runTask_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof runTask_result)
        return this.equals((runTask_result)that);
      return false;
    }

    public boolean equals(runTask_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(runTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("runTask_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runTask_resultStandardSchemeFactory implements SchemeFactory {
      public runTask_resultStandardScheme getScheme() {
        return new runTask_resultStandardScheme();
      }
    }

    private static class runTask_resultStandardScheme extends StandardScheme<runTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runTask_resultTupleSchemeFactory implements SchemeFactory {
      public runTask_resultTupleScheme getScheme() {
        return new runTask_resultTupleScheme();
      }
    }

    private static class runTask_resultTupleScheme extends TupleScheme<runTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateSpriteInfo_args implements org.apache.thrift.TBase<updateSpriteInfo_args, updateSpriteInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSpriteInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSpriteInfo_args");

    private static final org.apache.thrift.protocol.TField SPRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("sprite", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SPRITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spriteId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSpriteInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSpriteInfo_argsTupleSchemeFactory());
    }

    public RPC_Sprite sprite; // required
    public long spriteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPRITE((short)1, "sprite"),
      SPRITE_ID((short)2, "spriteId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPRITE
            return SPRITE;
          case 2: // SPRITE_ID
            return SPRITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPRITEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPRITE, new org.apache.thrift.meta_data.FieldMetaData("sprite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC_Sprite.class)));
      tmpMap.put(_Fields.SPRITE_ID, new org.apache.thrift.meta_data.FieldMetaData("spriteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSpriteInfo_args.class, metaDataMap);
    }

    public updateSpriteInfo_args() {
    }

    public updateSpriteInfo_args(
      RPC_Sprite sprite,
      long spriteId)
    {
      this();
      this.sprite = sprite;
      this.spriteId = spriteId;
      setSpriteIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSpriteInfo_args(updateSpriteInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSprite()) {
        this.sprite = new RPC_Sprite(other.sprite);
      }
      this.spriteId = other.spriteId;
    }

    public updateSpriteInfo_args deepCopy() {
      return new updateSpriteInfo_args(this);
    }

    @Override
    public void clear() {
      this.sprite = null;
      setSpriteIdIsSet(false);
      this.spriteId = 0;
    }

    public RPC_Sprite getSprite() {
      return this.sprite;
    }

    public updateSpriteInfo_args setSprite(RPC_Sprite sprite) {
      this.sprite = sprite;
      return this;
    }

    public void unsetSprite() {
      this.sprite = null;
    }

    /** Returns true if field sprite is set (has been assigned a value) and false otherwise */
    public boolean isSetSprite() {
      return this.sprite != null;
    }

    public void setSpriteIsSet(boolean value) {
      if (!value) {
        this.sprite = null;
      }
    }

    public long getSpriteId() {
      return this.spriteId;
    }

    public updateSpriteInfo_args setSpriteId(long spriteId) {
      this.spriteId = spriteId;
      setSpriteIdIsSet(true);
      return this;
    }

    public void unsetSpriteId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    /** Returns true if field spriteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSpriteId() {
      return EncodingUtils.testBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    public void setSpriteIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPRITEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPRITE:
        if (value == null) {
          unsetSprite();
        } else {
          setSprite((RPC_Sprite)value);
        }
        break;

      case SPRITE_ID:
        if (value == null) {
          unsetSpriteId();
        } else {
          setSpriteId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPRITE:
        return getSprite();

      case SPRITE_ID:
        return getSpriteId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPRITE:
        return isSetSprite();
      case SPRITE_ID:
        return isSetSpriteId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSpriteInfo_args)
        return this.equals((updateSpriteInfo_args)that);
      return false;
    }

    public boolean equals(updateSpriteInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_sprite = true && this.isSetSprite();
      boolean that_present_sprite = true && that.isSetSprite();
      if (this_present_sprite || that_present_sprite) {
        if (!(this_present_sprite && that_present_sprite))
          return false;
        if (!this.sprite.equals(that.sprite))
          return false;
      }

      boolean this_present_spriteId = true;
      boolean that_present_spriteId = true;
      if (this_present_spriteId || that_present_spriteId) {
        if (!(this_present_spriteId && that_present_spriteId))
          return false;
        if (this.spriteId != that.spriteId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sprite = true && (isSetSprite());
      list.add(present_sprite);
      if (present_sprite)
        list.add(sprite);

      boolean present_spriteId = true;
      list.add(present_spriteId);
      if (present_spriteId)
        list.add(spriteId);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSpriteInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSprite()).compareTo(other.isSetSprite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSprite()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sprite, other.sprite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpriteId()).compareTo(other.isSetSpriteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpriteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spriteId, other.spriteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSpriteInfo_args(");
      boolean first = true;

      sb.append("sprite:");
      if (this.sprite == null) {
        sb.append("null");
      } else {
        sb.append(this.sprite);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("spriteId:");
      sb.append(this.spriteId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sprite != null) {
        sprite.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSpriteInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateSpriteInfo_argsStandardScheme getScheme() {
        return new updateSpriteInfo_argsStandardScheme();
      }
    }

    private static class updateSpriteInfo_argsStandardScheme extends StandardScheme<updateSpriteInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSpriteInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPRITE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sprite = new RPC_Sprite();
                struct.sprite.read(iprot);
                struct.setSpriteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPRITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.spriteId = iprot.readI64();
                struct.setSpriteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSpriteInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sprite != null) {
          oprot.writeFieldBegin(SPRITE_FIELD_DESC);
          struct.sprite.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SPRITE_ID_FIELD_DESC);
        oprot.writeI64(struct.spriteId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSpriteInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateSpriteInfo_argsTupleScheme getScheme() {
        return new updateSpriteInfo_argsTupleScheme();
      }
    }

    private static class updateSpriteInfo_argsTupleScheme extends TupleScheme<updateSpriteInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSpriteInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSprite()) {
          optionals.set(0);
        }
        if (struct.isSetSpriteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSprite()) {
          struct.sprite.write(oprot);
        }
        if (struct.isSetSpriteId()) {
          oprot.writeI64(struct.spriteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSpriteInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sprite = new RPC_Sprite();
          struct.sprite.read(iprot);
          struct.setSpriteIsSet(true);
        }
        if (incoming.get(1)) {
          struct.spriteId = iprot.readI64();
          struct.setSpriteIdIsSet(true);
        }
      }
    }

  }

  public static class updateSpriteInfo_result implements org.apache.thrift.TBase<updateSpriteInfo_result, updateSpriteInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSpriteInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSpriteInfo_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSpriteInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSpriteInfo_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSpriteInfo_result.class, metaDataMap);
    }

    public updateSpriteInfo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSpriteInfo_result(updateSpriteInfo_result other) {
    }

    public updateSpriteInfo_result deepCopy() {
      return new updateSpriteInfo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSpriteInfo_result)
        return this.equals((updateSpriteInfo_result)that);
      return false;
    }

    public boolean equals(updateSpriteInfo_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSpriteInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSpriteInfo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSpriteInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateSpriteInfo_resultStandardScheme getScheme() {
        return new updateSpriteInfo_resultStandardScheme();
      }
    }

    private static class updateSpriteInfo_resultStandardScheme extends StandardScheme<updateSpriteInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSpriteInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSpriteInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSpriteInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateSpriteInfo_resultTupleScheme getScheme() {
        return new updateSpriteInfo_resultTupleScheme();
      }
    }

    private static class updateSpriteInfo_resultTupleScheme extends TupleScheme<updateSpriteInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSpriteInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSpriteInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class removeTimerTask_args implements org.apache.thrift.TBase<removeTimerTask_args, removeTimerTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeTimerTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeTimerTask_args");

    private static final org.apache.thrift.protocol.TField TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("task", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeTimerTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeTimerTask_argsTupleSchemeFactory());
    }

    public W2L_TaskRunData task; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK((short)1, "task");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK
            return TASK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK, new org.apache.thrift.meta_data.FieldMetaData("task", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, W2L_TaskRunData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeTimerTask_args.class, metaDataMap);
    }

    public removeTimerTask_args() {
    }

    public removeTimerTask_args(
      W2L_TaskRunData task)
    {
      this();
      this.task = task;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeTimerTask_args(removeTimerTask_args other) {
      if (other.isSetTask()) {
        this.task = new W2L_TaskRunData(other.task);
      }
    }

    public removeTimerTask_args deepCopy() {
      return new removeTimerTask_args(this);
    }

    @Override
    public void clear() {
      this.task = null;
    }

    public W2L_TaskRunData getTask() {
      return this.task;
    }

    public removeTimerTask_args setTask(W2L_TaskRunData task) {
      this.task = task;
      return this;
    }

    public void unsetTask() {
      this.task = null;
    }

    /** Returns true if field task is set (has been assigned a value) and false otherwise */
    public boolean isSetTask() {
      return this.task != null;
    }

    public void setTaskIsSet(boolean value) {
      if (!value) {
        this.task = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK:
        if (value == null) {
          unsetTask();
        } else {
          setTask((W2L_TaskRunData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK:
        return getTask();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK:
        return isSetTask();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTimerTask_args)
        return this.equals((removeTimerTask_args)that);
      return false;
    }

    public boolean equals(removeTimerTask_args that) {
      if (that == null)
        return false;

      boolean this_present_task = true && this.isSetTask();
      boolean that_present_task = true && that.isSetTask();
      if (this_present_task || that_present_task) {
        if (!(this_present_task && that_present_task))
          return false;
        if (!this.task.equals(that.task))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_task = true && (isSetTask());
      list.add(present_task);
      if (present_task)
        list.add(task);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeTimerTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTask()).compareTo(other.isSetTask());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task, other.task);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeTimerTask_args(");
      boolean first = true;

      sb.append("task:");
      if (this.task == null) {
        sb.append("null");
      } else {
        sb.append(this.task);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (task != null) {
        task.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeTimerTask_argsStandardSchemeFactory implements SchemeFactory {
      public removeTimerTask_argsStandardScheme getScheme() {
        return new removeTimerTask_argsStandardScheme();
      }
    }

    private static class removeTimerTask_argsStandardScheme extends StandardScheme<removeTimerTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeTimerTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.task = new W2L_TaskRunData();
                struct.task.read(iprot);
                struct.setTaskIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeTimerTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.task != null) {
          oprot.writeFieldBegin(TASK_FIELD_DESC);
          struct.task.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeTimerTask_argsTupleSchemeFactory implements SchemeFactory {
      public removeTimerTask_argsTupleScheme getScheme() {
        return new removeTimerTask_argsTupleScheme();
      }
    }

    private static class removeTimerTask_argsTupleScheme extends TupleScheme<removeTimerTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeTimerTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTask()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTask()) {
          struct.task.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeTimerTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.task = new W2L_TaskRunData();
          struct.task.read(iprot);
          struct.setTaskIsSet(true);
        }
      }
    }

  }

  public static class removeTimerTask_result implements org.apache.thrift.TBase<removeTimerTask_result, removeTimerTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeTimerTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeTimerTask_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeTimerTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeTimerTask_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeTimerTask_result.class, metaDataMap);
    }

    public removeTimerTask_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeTimerTask_result(removeTimerTask_result other) {
    }

    public removeTimerTask_result deepCopy() {
      return new removeTimerTask_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTimerTask_result)
        return this.equals((removeTimerTask_result)that);
      return false;
    }

    public boolean equals(removeTimerTask_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(removeTimerTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeTimerTask_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeTimerTask_resultStandardSchemeFactory implements SchemeFactory {
      public removeTimerTask_resultStandardScheme getScheme() {
        return new removeTimerTask_resultStandardScheme();
      }
    }

    private static class removeTimerTask_resultStandardScheme extends StandardScheme<removeTimerTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeTimerTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeTimerTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeTimerTask_resultTupleSchemeFactory implements SchemeFactory {
      public removeTimerTask_resultTupleScheme getScheme() {
        return new removeTimerTask_resultTupleScheme();
      }
    }

    private static class removeTimerTask_resultTupleScheme extends TupleScheme<removeTimerTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeTimerTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeTimerTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class playerEnterNewServer_args implements org.apache.thrift.TBase<playerEnterNewServer_args, playerEnterNewServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<playerEnterNewServer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("playerEnterNewServer_args");

    private static final org.apache.thrift.protocol.TField ROLEID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_SERVER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("newServerKey", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new playerEnterNewServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new playerEnterNewServer_argsTupleSchemeFactory());
    }

    public long roleid; // required
    public int newServerKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLEID((short)1, "roleid"),
      NEW_SERVER_KEY((short)2, "newServerKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLEID
            return ROLEID;
          case 2: // NEW_SERVER_KEY
            return NEW_SERVER_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROLEID_ISSET_ID = 0;
    private static final int __NEWSERVERKEY_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLEID, new org.apache.thrift.meta_data.FieldMetaData("roleid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NEW_SERVER_KEY, new org.apache.thrift.meta_data.FieldMetaData("newServerKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(playerEnterNewServer_args.class, metaDataMap);
    }

    public playerEnterNewServer_args() {
    }

    public playerEnterNewServer_args(
      long roleid,
      int newServerKey)
    {
      this();
      this.roleid = roleid;
      setRoleidIsSet(true);
      this.newServerKey = newServerKey;
      setNewServerKeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public playerEnterNewServer_args(playerEnterNewServer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roleid = other.roleid;
      this.newServerKey = other.newServerKey;
    }

    public playerEnterNewServer_args deepCopy() {
      return new playerEnterNewServer_args(this);
    }

    @Override
    public void clear() {
      setRoleidIsSet(false);
      this.roleid = 0;
      setNewServerKeyIsSet(false);
      this.newServerKey = 0;
    }

    public long getRoleid() {
      return this.roleid;
    }

    public playerEnterNewServer_args setRoleid(long roleid) {
      this.roleid = roleid;
      setRoleidIsSet(true);
      return this;
    }

    public void unsetRoleid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    /** Returns true if field roleid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleid() {
      return EncodingUtils.testBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    public void setRoleidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLEID_ISSET_ID, value);
    }

    public int getNewServerKey() {
      return this.newServerKey;
    }

    public playerEnterNewServer_args setNewServerKey(int newServerKey) {
      this.newServerKey = newServerKey;
      setNewServerKeyIsSet(true);
      return this;
    }

    public void unsetNewServerKey() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWSERVERKEY_ISSET_ID);
    }

    /** Returns true if field newServerKey is set (has been assigned a value) and false otherwise */
    public boolean isSetNewServerKey() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWSERVERKEY_ISSET_ID);
    }

    public void setNewServerKeyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWSERVERKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLEID:
        if (value == null) {
          unsetRoleid();
        } else {
          setRoleid((Long)value);
        }
        break;

      case NEW_SERVER_KEY:
        if (value == null) {
          unsetNewServerKey();
        } else {
          setNewServerKey((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLEID:
        return getRoleid();

      case NEW_SERVER_KEY:
        return getNewServerKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLEID:
        return isSetRoleid();
      case NEW_SERVER_KEY:
        return isSetNewServerKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof playerEnterNewServer_args)
        return this.equals((playerEnterNewServer_args)that);
      return false;
    }

    public boolean equals(playerEnterNewServer_args that) {
      if (that == null)
        return false;

      boolean this_present_roleid = true;
      boolean that_present_roleid = true;
      if (this_present_roleid || that_present_roleid) {
        if (!(this_present_roleid && that_present_roleid))
          return false;
        if (this.roleid != that.roleid)
          return false;
      }

      boolean this_present_newServerKey = true;
      boolean that_present_newServerKey = true;
      if (this_present_newServerKey || that_present_newServerKey) {
        if (!(this_present_newServerKey && that_present_newServerKey))
          return false;
        if (this.newServerKey != that.newServerKey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roleid = true;
      list.add(present_roleid);
      if (present_roleid)
        list.add(roleid);

      boolean present_newServerKey = true;
      list.add(present_newServerKey);
      if (present_newServerKey)
        list.add(newServerKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(playerEnterNewServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoleid()).compareTo(other.isSetRoleid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleid, other.roleid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewServerKey()).compareTo(other.isSetNewServerKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewServerKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newServerKey, other.newServerKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("playerEnterNewServer_args(");
      boolean first = true;

      sb.append("roleid:");
      sb.append(this.roleid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newServerKey:");
      sb.append(this.newServerKey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class playerEnterNewServer_argsStandardSchemeFactory implements SchemeFactory {
      public playerEnterNewServer_argsStandardScheme getScheme() {
        return new playerEnterNewServer_argsStandardScheme();
      }
    }

    private static class playerEnterNewServer_argsStandardScheme extends StandardScheme<playerEnterNewServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, playerEnterNewServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.roleid = iprot.readI64();
                struct.setRoleidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_SERVER_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newServerKey = iprot.readI32();
                struct.setNewServerKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, playerEnterNewServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROLEID_FIELD_DESC);
        oprot.writeI64(struct.roleid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NEW_SERVER_KEY_FIELD_DESC);
        oprot.writeI32(struct.newServerKey);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class playerEnterNewServer_argsTupleSchemeFactory implements SchemeFactory {
      public playerEnterNewServer_argsTupleScheme getScheme() {
        return new playerEnterNewServer_argsTupleScheme();
      }
    }

    private static class playerEnterNewServer_argsTupleScheme extends TupleScheme<playerEnterNewServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, playerEnterNewServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoleid()) {
          optionals.set(0);
        }
        if (struct.isSetNewServerKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRoleid()) {
          oprot.writeI64(struct.roleid);
        }
        if (struct.isSetNewServerKey()) {
          oprot.writeI32(struct.newServerKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, playerEnterNewServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.roleid = iprot.readI64();
          struct.setRoleidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newServerKey = iprot.readI32();
          struct.setNewServerKeyIsSet(true);
        }
      }
    }

  }

  public static class playerEnterNewServer_result implements org.apache.thrift.TBase<playerEnterNewServer_result, playerEnterNewServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<playerEnterNewServer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("playerEnterNewServer_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new playerEnterNewServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new playerEnterNewServer_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(playerEnterNewServer_result.class, metaDataMap);
    }

    public playerEnterNewServer_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public playerEnterNewServer_result(playerEnterNewServer_result other) {
    }

    public playerEnterNewServer_result deepCopy() {
      return new playerEnterNewServer_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof playerEnterNewServer_result)
        return this.equals((playerEnterNewServer_result)that);
      return false;
    }

    public boolean equals(playerEnterNewServer_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(playerEnterNewServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("playerEnterNewServer_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class playerEnterNewServer_resultStandardSchemeFactory implements SchemeFactory {
      public playerEnterNewServer_resultStandardScheme getScheme() {
        return new playerEnterNewServer_resultStandardScheme();
      }
    }

    private static class playerEnterNewServer_resultStandardScheme extends StandardScheme<playerEnterNewServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, playerEnterNewServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, playerEnterNewServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class playerEnterNewServer_resultTupleSchemeFactory implements SchemeFactory {
      public playerEnterNewServer_resultTupleScheme getScheme() {
        return new playerEnterNewServer_resultTupleScheme();
      }
    }

    private static class playerEnterNewServer_resultTupleScheme extends TupleScheme<playerEnterNewServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, playerEnterNewServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, playerEnterNewServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class playerExitSuccess_args implements org.apache.thrift.TBase<playerExitSuccess_args, playerExitSuccess_args._Fields>, java.io.Serializable, Cloneable, Comparable<playerExitSuccess_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("playerExitSuccess_args");

    private static final org.apache.thrift.protocol.TField ROLEID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new playerExitSuccess_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new playerExitSuccess_argsTupleSchemeFactory());
    }

    public long roleid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLEID((short)1, "roleid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLEID
            return ROLEID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROLEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLEID, new org.apache.thrift.meta_data.FieldMetaData("roleid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(playerExitSuccess_args.class, metaDataMap);
    }

    public playerExitSuccess_args() {
    }

    public playerExitSuccess_args(
      long roleid)
    {
      this();
      this.roleid = roleid;
      setRoleidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public playerExitSuccess_args(playerExitSuccess_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roleid = other.roleid;
    }

    public playerExitSuccess_args deepCopy() {
      return new playerExitSuccess_args(this);
    }

    @Override
    public void clear() {
      setRoleidIsSet(false);
      this.roleid = 0;
    }

    public long getRoleid() {
      return this.roleid;
    }

    public playerExitSuccess_args setRoleid(long roleid) {
      this.roleid = roleid;
      setRoleidIsSet(true);
      return this;
    }

    public void unsetRoleid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    /** Returns true if field roleid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleid() {
      return EncodingUtils.testBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    public void setRoleidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLEID:
        if (value == null) {
          unsetRoleid();
        } else {
          setRoleid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLEID:
        return getRoleid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLEID:
        return isSetRoleid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof playerExitSuccess_args)
        return this.equals((playerExitSuccess_args)that);
      return false;
    }

    public boolean equals(playerExitSuccess_args that) {
      if (that == null)
        return false;

      boolean this_present_roleid = true;
      boolean that_present_roleid = true;
      if (this_present_roleid || that_present_roleid) {
        if (!(this_present_roleid && that_present_roleid))
          return false;
        if (this.roleid != that.roleid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roleid = true;
      list.add(present_roleid);
      if (present_roleid)
        list.add(roleid);

      return list.hashCode();
    }

    @Override
    public int compareTo(playerExitSuccess_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoleid()).compareTo(other.isSetRoleid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleid, other.roleid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("playerExitSuccess_args(");
      boolean first = true;

      sb.append("roleid:");
      sb.append(this.roleid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class playerExitSuccess_argsStandardSchemeFactory implements SchemeFactory {
      public playerExitSuccess_argsStandardScheme getScheme() {
        return new playerExitSuccess_argsStandardScheme();
      }
    }

    private static class playerExitSuccess_argsStandardScheme extends StandardScheme<playerExitSuccess_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, playerExitSuccess_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.roleid = iprot.readI64();
                struct.setRoleidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, playerExitSuccess_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROLEID_FIELD_DESC);
        oprot.writeI64(struct.roleid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class playerExitSuccess_argsTupleSchemeFactory implements SchemeFactory {
      public playerExitSuccess_argsTupleScheme getScheme() {
        return new playerExitSuccess_argsTupleScheme();
      }
    }

    private static class playerExitSuccess_argsTupleScheme extends TupleScheme<playerExitSuccess_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, playerExitSuccess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoleid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoleid()) {
          oprot.writeI64(struct.roleid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, playerExitSuccess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roleid = iprot.readI64();
          struct.setRoleidIsSet(true);
        }
      }
    }

  }

  public static class playerExitSuccess_result implements org.apache.thrift.TBase<playerExitSuccess_result, playerExitSuccess_result._Fields>, java.io.Serializable, Cloneable, Comparable<playerExitSuccess_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("playerExitSuccess_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new playerExitSuccess_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new playerExitSuccess_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(playerExitSuccess_result.class, metaDataMap);
    }

    public playerExitSuccess_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public playerExitSuccess_result(playerExitSuccess_result other) {
    }

    public playerExitSuccess_result deepCopy() {
      return new playerExitSuccess_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof playerExitSuccess_result)
        return this.equals((playerExitSuccess_result)that);
      return false;
    }

    public boolean equals(playerExitSuccess_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(playerExitSuccess_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("playerExitSuccess_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class playerExitSuccess_resultStandardSchemeFactory implements SchemeFactory {
      public playerExitSuccess_resultStandardScheme getScheme() {
        return new playerExitSuccess_resultStandardScheme();
      }
    }

    private static class playerExitSuccess_resultStandardScheme extends StandardScheme<playerExitSuccess_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, playerExitSuccess_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, playerExitSuccess_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class playerExitSuccess_resultTupleSchemeFactory implements SchemeFactory {
      public playerExitSuccess_resultTupleScheme getScheme() {
        return new playerExitSuccess_resultTupleScheme();
      }
    }

    private static class playerExitSuccess_resultTupleScheme extends TupleScheme<playerExitSuccess_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, playerExitSuccess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, playerExitSuccess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class initPlayer_args implements org.apache.thrift.TBase<initPlayer_args, initPlayer_args._Fields>, java.io.Serializable, Cloneable, Comparable<initPlayer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initPlayer_args");

    private static final org.apache.thrift.protocol.TField ROLE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("roleList", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initPlayer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initPlayer_argsTupleSchemeFactory());
    }

    public ByteBuffer roleList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLE_LIST((short)1, "roleList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLE_LIST
            return ROLE_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLE_LIST, new org.apache.thrift.meta_data.FieldMetaData("roleList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initPlayer_args.class, metaDataMap);
    }

    public initPlayer_args() {
    }

    public initPlayer_args(
      ByteBuffer roleList)
    {
      this();
      this.roleList = org.apache.thrift.TBaseHelper.copyBinary(roleList);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initPlayer_args(initPlayer_args other) {
      if (other.isSetRoleList()) {
        this.roleList = org.apache.thrift.TBaseHelper.copyBinary(other.roleList);
      }
    }

    public initPlayer_args deepCopy() {
      return new initPlayer_args(this);
    }

    @Override
    public void clear() {
      this.roleList = null;
    }

    public byte[] getRoleList() {
      setRoleList(org.apache.thrift.TBaseHelper.rightSize(roleList));
      return roleList == null ? null : roleList.array();
    }

    public ByteBuffer bufferForRoleList() {
      return org.apache.thrift.TBaseHelper.copyBinary(roleList);
    }

    public initPlayer_args setRoleList(byte[] roleList) {
      this.roleList = roleList == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(roleList, roleList.length));
      return this;
    }

    public initPlayer_args setRoleList(ByteBuffer roleList) {
      this.roleList = org.apache.thrift.TBaseHelper.copyBinary(roleList);
      return this;
    }

    public void unsetRoleList() {
      this.roleList = null;
    }

    /** Returns true if field roleList is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleList() {
      return this.roleList != null;
    }

    public void setRoleListIsSet(boolean value) {
      if (!value) {
        this.roleList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLE_LIST:
        if (value == null) {
          unsetRoleList();
        } else {
          setRoleList((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLE_LIST:
        return getRoleList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLE_LIST:
        return isSetRoleList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initPlayer_args)
        return this.equals((initPlayer_args)that);
      return false;
    }

    public boolean equals(initPlayer_args that) {
      if (that == null)
        return false;

      boolean this_present_roleList = true && this.isSetRoleList();
      boolean that_present_roleList = true && that.isSetRoleList();
      if (this_present_roleList || that_present_roleList) {
        if (!(this_present_roleList && that_present_roleList))
          return false;
        if (!this.roleList.equals(that.roleList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roleList = true && (isSetRoleList());
      list.add(present_roleList);
      if (present_roleList)
        list.add(roleList);

      return list.hashCode();
    }

    @Override
    public int compareTo(initPlayer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoleList()).compareTo(other.isSetRoleList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleList, other.roleList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initPlayer_args(");
      boolean first = true;

      sb.append("roleList:");
      if (this.roleList == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.roleList, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initPlayer_argsStandardSchemeFactory implements SchemeFactory {
      public initPlayer_argsStandardScheme getScheme() {
        return new initPlayer_argsStandardScheme();
      }
    }

    private static class initPlayer_argsStandardScheme extends StandardScheme<initPlayer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initPlayer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roleList = iprot.readBinary();
                struct.setRoleListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initPlayer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roleList != null) {
          oprot.writeFieldBegin(ROLE_LIST_FIELD_DESC);
          oprot.writeBinary(struct.roleList);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initPlayer_argsTupleSchemeFactory implements SchemeFactory {
      public initPlayer_argsTupleScheme getScheme() {
        return new initPlayer_argsTupleScheme();
      }
    }

    private static class initPlayer_argsTupleScheme extends TupleScheme<initPlayer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initPlayer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoleList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoleList()) {
          oprot.writeBinary(struct.roleList);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initPlayer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roleList = iprot.readBinary();
          struct.setRoleListIsSet(true);
        }
      }
    }

  }

  public static class initPlayer_result implements org.apache.thrift.TBase<initPlayer_result, initPlayer_result._Fields>, java.io.Serializable, Cloneable, Comparable<initPlayer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initPlayer_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initPlayer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initPlayer_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initPlayer_result.class, metaDataMap);
    }

    public initPlayer_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initPlayer_result(initPlayer_result other) {
    }

    public initPlayer_result deepCopy() {
      return new initPlayer_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initPlayer_result)
        return this.equals((initPlayer_result)that);
      return false;
    }

    public boolean equals(initPlayer_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(initPlayer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initPlayer_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initPlayer_resultStandardSchemeFactory implements SchemeFactory {
      public initPlayer_resultStandardScheme getScheme() {
        return new initPlayer_resultStandardScheme();
      }
    }

    private static class initPlayer_resultStandardScheme extends StandardScheme<initPlayer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initPlayer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initPlayer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initPlayer_resultTupleSchemeFactory implements SchemeFactory {
      public initPlayer_resultTupleScheme getScheme() {
        return new initPlayer_resultTupleScheme();
      }
    }

    private static class initPlayer_resultTupleScheme extends TupleScheme<initPlayer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initPlayer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initPlayer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class offlineRole_args implements org.apache.thrift.TBase<offlineRole_args, offlineRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<offlineRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offlineRole_args");

    private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new offlineRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new offlineRole_argsTupleSchemeFactory());
    }

    public long roleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLE_ID((short)1, "roleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLE_ID
            return ROLE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROLEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offlineRole_args.class, metaDataMap);
    }

    public offlineRole_args() {
    }

    public offlineRole_args(
      long roleId)
    {
      this();
      this.roleId = roleId;
      setRoleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offlineRole_args(offlineRole_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roleId = other.roleId;
    }

    public offlineRole_args deepCopy() {
      return new offlineRole_args(this);
    }

    @Override
    public void clear() {
      setRoleIdIsSet(false);
      this.roleId = 0;
    }

    public long getRoleId() {
      return this.roleId;
    }

    public offlineRole_args setRoleId(long roleId) {
      this.roleId = roleId;
      setRoleIdIsSet(true);
      return this;
    }

    public void unsetRoleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    /** Returns true if field roleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleId() {
      return EncodingUtils.testBit(__isset_bitfield, __ROLEID_ISSET_ID);
    }

    public void setRoleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLE_ID:
        if (value == null) {
          unsetRoleId();
        } else {
          setRoleId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLE_ID:
        return getRoleId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLE_ID:
        return isSetRoleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offlineRole_args)
        return this.equals((offlineRole_args)that);
      return false;
    }

    public boolean equals(offlineRole_args that) {
      if (that == null)
        return false;

      boolean this_present_roleId = true;
      boolean that_present_roleId = true;
      if (this_present_roleId || that_present_roleId) {
        if (!(this_present_roleId && that_present_roleId))
          return false;
        if (this.roleId != that.roleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roleId = true;
      list.add(present_roleId);
      if (present_roleId)
        list.add(roleId);

      return list.hashCode();
    }

    @Override
    public int compareTo(offlineRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoleId()).compareTo(other.isSetRoleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleId, other.roleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offlineRole_args(");
      boolean first = true;

      sb.append("roleId:");
      sb.append(this.roleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class offlineRole_argsStandardSchemeFactory implements SchemeFactory {
      public offlineRole_argsStandardScheme getScheme() {
        return new offlineRole_argsStandardScheme();
      }
    }

    private static class offlineRole_argsStandardScheme extends StandardScheme<offlineRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, offlineRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.roleId = iprot.readI64();
                struct.setRoleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, offlineRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
        oprot.writeI64(struct.roleId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class offlineRole_argsTupleSchemeFactory implements SchemeFactory {
      public offlineRole_argsTupleScheme getScheme() {
        return new offlineRole_argsTupleScheme();
      }
    }

    private static class offlineRole_argsTupleScheme extends TupleScheme<offlineRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, offlineRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoleId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoleId()) {
          oprot.writeI64(struct.roleId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, offlineRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roleId = iprot.readI64();
          struct.setRoleIdIsSet(true);
        }
      }
    }

  }

  public static class offlineRole_result implements org.apache.thrift.TBase<offlineRole_result, offlineRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<offlineRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offlineRole_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new offlineRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new offlineRole_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offlineRole_result.class, metaDataMap);
    }

    public offlineRole_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offlineRole_result(offlineRole_result other) {
    }

    public offlineRole_result deepCopy() {
      return new offlineRole_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offlineRole_result)
        return this.equals((offlineRole_result)that);
      return false;
    }

    public boolean equals(offlineRole_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(offlineRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offlineRole_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class offlineRole_resultStandardSchemeFactory implements SchemeFactory {
      public offlineRole_resultStandardScheme getScheme() {
        return new offlineRole_resultStandardScheme();
      }
    }

    private static class offlineRole_resultStandardScheme extends StandardScheme<offlineRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, offlineRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, offlineRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class offlineRole_resultTupleSchemeFactory implements SchemeFactory {
      public offlineRole_resultTupleScheme getScheme() {
        return new offlineRole_resultTupleScheme();
      }
    }

    private static class offlineRole_resultTupleScheme extends TupleScheme<offlineRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, offlineRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, offlineRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class requestSpriteDetail_args implements org.apache.thrift.TBase<requestSpriteDetail_args, requestSpriteDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestSpriteDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestSpriteDetail_args");

    private static final org.apache.thrift.protocol.TField SPRITEID_FIELD_DESC = new org.apache.thrift.protocol.TField("spriteid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SPRITETYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("spritetype", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestSpriteDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestSpriteDetail_argsTupleSchemeFactory());
    }

    public long spriteid; // required
    public int spritetype; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPRITEID((short)1, "spriteid"),
      SPRITETYPE((short)2, "spritetype");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPRITEID
            return SPRITEID;
          case 2: // SPRITETYPE
            return SPRITETYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPRITEID_ISSET_ID = 0;
    private static final int __SPRITETYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPRITEID, new org.apache.thrift.meta_data.FieldMetaData("spriteid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SPRITETYPE, new org.apache.thrift.meta_data.FieldMetaData("spritetype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestSpriteDetail_args.class, metaDataMap);
    }

    public requestSpriteDetail_args() {
    }

    public requestSpriteDetail_args(
      long spriteid,
      int spritetype)
    {
      this();
      this.spriteid = spriteid;
      setSpriteidIsSet(true);
      this.spritetype = spritetype;
      setSpritetypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestSpriteDetail_args(requestSpriteDetail_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.spriteid = other.spriteid;
      this.spritetype = other.spritetype;
    }

    public requestSpriteDetail_args deepCopy() {
      return new requestSpriteDetail_args(this);
    }

    @Override
    public void clear() {
      setSpriteidIsSet(false);
      this.spriteid = 0;
      setSpritetypeIsSet(false);
      this.spritetype = 0;
    }

    public long getSpriteid() {
      return this.spriteid;
    }

    public requestSpriteDetail_args setSpriteid(long spriteid) {
      this.spriteid = spriteid;
      setSpriteidIsSet(true);
      return this;
    }

    public void unsetSpriteid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    /** Returns true if field spriteid is set (has been assigned a value) and false otherwise */
    public boolean isSetSpriteid() {
      return EncodingUtils.testBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    public void setSpriteidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPRITEID_ISSET_ID, value);
    }

    public int getSpritetype() {
      return this.spritetype;
    }

    public requestSpriteDetail_args setSpritetype(int spritetype) {
      this.spritetype = spritetype;
      setSpritetypeIsSet(true);
      return this;
    }

    public void unsetSpritetype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPRITETYPE_ISSET_ID);
    }

    /** Returns true if field spritetype is set (has been assigned a value) and false otherwise */
    public boolean isSetSpritetype() {
      return EncodingUtils.testBit(__isset_bitfield, __SPRITETYPE_ISSET_ID);
    }

    public void setSpritetypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPRITETYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPRITEID:
        if (value == null) {
          unsetSpriteid();
        } else {
          setSpriteid((Long)value);
        }
        break;

      case SPRITETYPE:
        if (value == null) {
          unsetSpritetype();
        } else {
          setSpritetype((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPRITEID:
        return getSpriteid();

      case SPRITETYPE:
        return getSpritetype();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPRITEID:
        return isSetSpriteid();
      case SPRITETYPE:
        return isSetSpritetype();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestSpriteDetail_args)
        return this.equals((requestSpriteDetail_args)that);
      return false;
    }

    public boolean equals(requestSpriteDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_spriteid = true;
      boolean that_present_spriteid = true;
      if (this_present_spriteid || that_present_spriteid) {
        if (!(this_present_spriteid && that_present_spriteid))
          return false;
        if (this.spriteid != that.spriteid)
          return false;
      }

      boolean this_present_spritetype = true;
      boolean that_present_spritetype = true;
      if (this_present_spritetype || that_present_spritetype) {
        if (!(this_present_spritetype && that_present_spritetype))
          return false;
        if (this.spritetype != that.spritetype)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_spriteid = true;
      list.add(present_spriteid);
      if (present_spriteid)
        list.add(spriteid);

      boolean present_spritetype = true;
      list.add(present_spritetype);
      if (present_spritetype)
        list.add(spritetype);

      return list.hashCode();
    }

    @Override
    public int compareTo(requestSpriteDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpriteid()).compareTo(other.isSetSpriteid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpriteid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spriteid, other.spriteid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpritetype()).compareTo(other.isSetSpritetype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpritetype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spritetype, other.spritetype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestSpriteDetail_args(");
      boolean first = true;

      sb.append("spriteid:");
      sb.append(this.spriteid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("spritetype:");
      sb.append(this.spritetype);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestSpriteDetail_argsStandardSchemeFactory implements SchemeFactory {
      public requestSpriteDetail_argsStandardScheme getScheme() {
        return new requestSpriteDetail_argsStandardScheme();
      }
    }

    private static class requestSpriteDetail_argsStandardScheme extends StandardScheme<requestSpriteDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestSpriteDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPRITEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.spriteid = iprot.readI64();
                struct.setSpriteidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPRITETYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.spritetype = iprot.readI32();
                struct.setSpritetypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestSpriteDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SPRITEID_FIELD_DESC);
        oprot.writeI64(struct.spriteid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SPRITETYPE_FIELD_DESC);
        oprot.writeI32(struct.spritetype);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestSpriteDetail_argsTupleSchemeFactory implements SchemeFactory {
      public requestSpriteDetail_argsTupleScheme getScheme() {
        return new requestSpriteDetail_argsTupleScheme();
      }
    }

    private static class requestSpriteDetail_argsTupleScheme extends TupleScheme<requestSpriteDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestSpriteDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpriteid()) {
          optionals.set(0);
        }
        if (struct.isSetSpritetype()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSpriteid()) {
          oprot.writeI64(struct.spriteid);
        }
        if (struct.isSetSpritetype()) {
          oprot.writeI32(struct.spritetype);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestSpriteDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.spriteid = iprot.readI64();
          struct.setSpriteidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.spritetype = iprot.readI32();
          struct.setSpritetypeIsSet(true);
        }
      }
    }

  }

  public static class requestSpriteDetail_result implements org.apache.thrift.TBase<requestSpriteDetail_result, requestSpriteDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestSpriteDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestSpriteDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestSpriteDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestSpriteDetail_resultTupleSchemeFactory());
    }

    public ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestSpriteDetail_result.class, metaDataMap);
    }

    public requestSpriteDetail_result() {
    }

    public requestSpriteDetail_result(
      ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestSpriteDetail_result(requestSpriteDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    public requestSpriteDetail_result deepCopy() {
      return new requestSpriteDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public requestSpriteDetail_result setSuccess(byte[] success) {
      this.success = success == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(success, success.length));
      return this;
    }

    public requestSpriteDetail_result setSuccess(ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestSpriteDetail_result)
        return this.equals((requestSpriteDetail_result)that);
      return false;
    }

    public boolean equals(requestSpriteDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(requestSpriteDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestSpriteDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestSpriteDetail_resultStandardSchemeFactory implements SchemeFactory {
      public requestSpriteDetail_resultStandardScheme getScheme() {
        return new requestSpriteDetail_resultStandardScheme();
      }
    }

    private static class requestSpriteDetail_resultStandardScheme extends StandardScheme<requestSpriteDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestSpriteDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestSpriteDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestSpriteDetail_resultTupleSchemeFactory implements SchemeFactory {
      public requestSpriteDetail_resultTupleScheme getScheme() {
        return new requestSpriteDetail_resultTupleScheme();
      }
    }

    private static class requestSpriteDetail_resultTupleScheme extends TupleScheme<requestSpriteDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestSpriteDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestSpriteDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class responseSpriteDetail_args implements org.apache.thrift.TBase<responseSpriteDetail_args, responseSpriteDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<responseSpriteDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("responseSpriteDetail_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ROLEID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestRoleid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SPRITEID_FIELD_DESC = new org.apache.thrift.protocol.TField("spriteid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField SPRITETYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("spritetype", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SPRITE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("spriteData", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new responseSpriteDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new responseSpriteDetail_argsTupleSchemeFactory());
    }

    public long requestRoleid; // required
    public long spriteid; // required
    public int spritetype; // required
    public ByteBuffer spriteData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ROLEID((short)1, "requestRoleid"),
      SPRITEID((short)2, "spriteid"),
      SPRITETYPE((short)3, "spritetype"),
      SPRITE_DATA((short)4, "spriteData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ROLEID
            return REQUEST_ROLEID;
          case 2: // SPRITEID
            return SPRITEID;
          case 3: // SPRITETYPE
            return SPRITETYPE;
          case 4: // SPRITE_DATA
            return SPRITE_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTROLEID_ISSET_ID = 0;
    private static final int __SPRITEID_ISSET_ID = 1;
    private static final int __SPRITETYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ROLEID, new org.apache.thrift.meta_data.FieldMetaData("requestRoleid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SPRITEID, new org.apache.thrift.meta_data.FieldMetaData("spriteid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SPRITETYPE, new org.apache.thrift.meta_data.FieldMetaData("spritetype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SPRITE_DATA, new org.apache.thrift.meta_data.FieldMetaData("spriteData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(responseSpriteDetail_args.class, metaDataMap);
    }

    public responseSpriteDetail_args() {
    }

    public responseSpriteDetail_args(
      long requestRoleid,
      long spriteid,
      int spritetype,
      ByteBuffer spriteData)
    {
      this();
      this.requestRoleid = requestRoleid;
      setRequestRoleidIsSet(true);
      this.spriteid = spriteid;
      setSpriteidIsSet(true);
      this.spritetype = spritetype;
      setSpritetypeIsSet(true);
      this.spriteData = org.apache.thrift.TBaseHelper.copyBinary(spriteData);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public responseSpriteDetail_args(responseSpriteDetail_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestRoleid = other.requestRoleid;
      this.spriteid = other.spriteid;
      this.spritetype = other.spritetype;
      if (other.isSetSpriteData()) {
        this.spriteData = org.apache.thrift.TBaseHelper.copyBinary(other.spriteData);
      }
    }

    public responseSpriteDetail_args deepCopy() {
      return new responseSpriteDetail_args(this);
    }

    @Override
    public void clear() {
      setRequestRoleidIsSet(false);
      this.requestRoleid = 0;
      setSpriteidIsSet(false);
      this.spriteid = 0;
      setSpritetypeIsSet(false);
      this.spritetype = 0;
      this.spriteData = null;
    }

    public long getRequestRoleid() {
      return this.requestRoleid;
    }

    public responseSpriteDetail_args setRequestRoleid(long requestRoleid) {
      this.requestRoleid = requestRoleid;
      setRequestRoleidIsSet(true);
      return this;
    }

    public void unsetRequestRoleid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTROLEID_ISSET_ID);
    }

    /** Returns true if field requestRoleid is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestRoleid() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTROLEID_ISSET_ID);
    }

    public void setRequestRoleidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTROLEID_ISSET_ID, value);
    }

    public long getSpriteid() {
      return this.spriteid;
    }

    public responseSpriteDetail_args setSpriteid(long spriteid) {
      this.spriteid = spriteid;
      setSpriteidIsSet(true);
      return this;
    }

    public void unsetSpriteid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    /** Returns true if field spriteid is set (has been assigned a value) and false otherwise */
    public boolean isSetSpriteid() {
      return EncodingUtils.testBit(__isset_bitfield, __SPRITEID_ISSET_ID);
    }

    public void setSpriteidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPRITEID_ISSET_ID, value);
    }

    public int getSpritetype() {
      return this.spritetype;
    }

    public responseSpriteDetail_args setSpritetype(int spritetype) {
      this.spritetype = spritetype;
      setSpritetypeIsSet(true);
      return this;
    }

    public void unsetSpritetype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPRITETYPE_ISSET_ID);
    }

    /** Returns true if field spritetype is set (has been assigned a value) and false otherwise */
    public boolean isSetSpritetype() {
      return EncodingUtils.testBit(__isset_bitfield, __SPRITETYPE_ISSET_ID);
    }

    public void setSpritetypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPRITETYPE_ISSET_ID, value);
    }

    public byte[] getSpriteData() {
      setSpriteData(org.apache.thrift.TBaseHelper.rightSize(spriteData));
      return spriteData == null ? null : spriteData.array();
    }

    public ByteBuffer bufferForSpriteData() {
      return org.apache.thrift.TBaseHelper.copyBinary(spriteData);
    }

    public responseSpriteDetail_args setSpriteData(byte[] spriteData) {
      this.spriteData = spriteData == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(spriteData, spriteData.length));
      return this;
    }

    public responseSpriteDetail_args setSpriteData(ByteBuffer spriteData) {
      this.spriteData = org.apache.thrift.TBaseHelper.copyBinary(spriteData);
      return this;
    }

    public void unsetSpriteData() {
      this.spriteData = null;
    }

    /** Returns true if field spriteData is set (has been assigned a value) and false otherwise */
    public boolean isSetSpriteData() {
      return this.spriteData != null;
    }

    public void setSpriteDataIsSet(boolean value) {
      if (!value) {
        this.spriteData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ROLEID:
        if (value == null) {
          unsetRequestRoleid();
        } else {
          setRequestRoleid((Long)value);
        }
        break;

      case SPRITEID:
        if (value == null) {
          unsetSpriteid();
        } else {
          setSpriteid((Long)value);
        }
        break;

      case SPRITETYPE:
        if (value == null) {
          unsetSpritetype();
        } else {
          setSpritetype((Integer)value);
        }
        break;

      case SPRITE_DATA:
        if (value == null) {
          unsetSpriteData();
        } else {
          setSpriteData((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ROLEID:
        return getRequestRoleid();

      case SPRITEID:
        return getSpriteid();

      case SPRITETYPE:
        return getSpritetype();

      case SPRITE_DATA:
        return getSpriteData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ROLEID:
        return isSetRequestRoleid();
      case SPRITEID:
        return isSetSpriteid();
      case SPRITETYPE:
        return isSetSpritetype();
      case SPRITE_DATA:
        return isSetSpriteData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof responseSpriteDetail_args)
        return this.equals((responseSpriteDetail_args)that);
      return false;
    }

    public boolean equals(responseSpriteDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_requestRoleid = true;
      boolean that_present_requestRoleid = true;
      if (this_present_requestRoleid || that_present_requestRoleid) {
        if (!(this_present_requestRoleid && that_present_requestRoleid))
          return false;
        if (this.requestRoleid != that.requestRoleid)
          return false;
      }

      boolean this_present_spriteid = true;
      boolean that_present_spriteid = true;
      if (this_present_spriteid || that_present_spriteid) {
        if (!(this_present_spriteid && that_present_spriteid))
          return false;
        if (this.spriteid != that.spriteid)
          return false;
      }

      boolean this_present_spritetype = true;
      boolean that_present_spritetype = true;
      if (this_present_spritetype || that_present_spritetype) {
        if (!(this_present_spritetype && that_present_spritetype))
          return false;
        if (this.spritetype != that.spritetype)
          return false;
      }

      boolean this_present_spriteData = true && this.isSetSpriteData();
      boolean that_present_spriteData = true && that.isSetSpriteData();
      if (this_present_spriteData || that_present_spriteData) {
        if (!(this_present_spriteData && that_present_spriteData))
          return false;
        if (!this.spriteData.equals(that.spriteData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestRoleid = true;
      list.add(present_requestRoleid);
      if (present_requestRoleid)
        list.add(requestRoleid);

      boolean present_spriteid = true;
      list.add(present_spriteid);
      if (present_spriteid)
        list.add(spriteid);

      boolean present_spritetype = true;
      list.add(present_spritetype);
      if (present_spritetype)
        list.add(spritetype);

      boolean present_spriteData = true && (isSetSpriteData());
      list.add(present_spriteData);
      if (present_spriteData)
        list.add(spriteData);

      return list.hashCode();
    }

    @Override
    public int compareTo(responseSpriteDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestRoleid()).compareTo(other.isSetRequestRoleid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestRoleid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestRoleid, other.requestRoleid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpriteid()).compareTo(other.isSetSpriteid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpriteid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spriteid, other.spriteid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpritetype()).compareTo(other.isSetSpritetype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpritetype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spritetype, other.spritetype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpriteData()).compareTo(other.isSetSpriteData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpriteData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spriteData, other.spriteData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("responseSpriteDetail_args(");
      boolean first = true;

      sb.append("requestRoleid:");
      sb.append(this.requestRoleid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("spriteid:");
      sb.append(this.spriteid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("spritetype:");
      sb.append(this.spritetype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("spriteData:");
      if (this.spriteData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.spriteData, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class responseSpriteDetail_argsStandardSchemeFactory implements SchemeFactory {
      public responseSpriteDetail_argsStandardScheme getScheme() {
        return new responseSpriteDetail_argsStandardScheme();
      }
    }

    private static class responseSpriteDetail_argsStandardScheme extends StandardScheme<responseSpriteDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, responseSpriteDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ROLEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestRoleid = iprot.readI64();
                struct.setRequestRoleidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPRITEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.spriteid = iprot.readI64();
                struct.setSpriteidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SPRITETYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.spritetype = iprot.readI32();
                struct.setSpritetypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SPRITE_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spriteData = iprot.readBinary();
                struct.setSpriteDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, responseSpriteDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ROLEID_FIELD_DESC);
        oprot.writeI64(struct.requestRoleid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SPRITEID_FIELD_DESC);
        oprot.writeI64(struct.spriteid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SPRITETYPE_FIELD_DESC);
        oprot.writeI32(struct.spritetype);
        oprot.writeFieldEnd();
        if (struct.spriteData != null) {
          oprot.writeFieldBegin(SPRITE_DATA_FIELD_DESC);
          oprot.writeBinary(struct.spriteData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class responseSpriteDetail_argsTupleSchemeFactory implements SchemeFactory {
      public responseSpriteDetail_argsTupleScheme getScheme() {
        return new responseSpriteDetail_argsTupleScheme();
      }
    }

    private static class responseSpriteDetail_argsTupleScheme extends TupleScheme<responseSpriteDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, responseSpriteDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestRoleid()) {
          optionals.set(0);
        }
        if (struct.isSetSpriteid()) {
          optionals.set(1);
        }
        if (struct.isSetSpritetype()) {
          optionals.set(2);
        }
        if (struct.isSetSpriteData()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestRoleid()) {
          oprot.writeI64(struct.requestRoleid);
        }
        if (struct.isSetSpriteid()) {
          oprot.writeI64(struct.spriteid);
        }
        if (struct.isSetSpritetype()) {
          oprot.writeI32(struct.spritetype);
        }
        if (struct.isSetSpriteData()) {
          oprot.writeBinary(struct.spriteData);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, responseSpriteDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestRoleid = iprot.readI64();
          struct.setRequestRoleidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.spriteid = iprot.readI64();
          struct.setSpriteidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.spritetype = iprot.readI32();
          struct.setSpritetypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.spriteData = iprot.readBinary();
          struct.setSpriteDataIsSet(true);
        }
      }
    }

  }

  public static class responseSpriteDetail_result implements org.apache.thrift.TBase<responseSpriteDetail_result, responseSpriteDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<responseSpriteDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("responseSpriteDetail_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new responseSpriteDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new responseSpriteDetail_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(responseSpriteDetail_result.class, metaDataMap);
    }

    public responseSpriteDetail_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public responseSpriteDetail_result(responseSpriteDetail_result other) {
    }

    public responseSpriteDetail_result deepCopy() {
      return new responseSpriteDetail_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof responseSpriteDetail_result)
        return this.equals((responseSpriteDetail_result)that);
      return false;
    }

    public boolean equals(responseSpriteDetail_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(responseSpriteDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("responseSpriteDetail_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class responseSpriteDetail_resultStandardSchemeFactory implements SchemeFactory {
      public responseSpriteDetail_resultStandardScheme getScheme() {
        return new responseSpriteDetail_resultStandardScheme();
      }
    }

    private static class responseSpriteDetail_resultStandardScheme extends StandardScheme<responseSpriteDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, responseSpriteDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, responseSpriteDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class responseSpriteDetail_resultTupleSchemeFactory implements SchemeFactory {
      public responseSpriteDetail_resultTupleScheme getScheme() {
        return new responseSpriteDetail_resultTupleScheme();
      }
    }

    private static class responseSpriteDetail_resultTupleScheme extends TupleScheme<responseSpriteDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, responseSpriteDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, responseSpriteDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class destinationForMe_args implements org.apache.thrift.TBase<destinationForMe_args, destinationForMe_args._Fields>, java.io.Serializable, Cloneable, Comparable<destinationForMe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("destinationForMe_args");

    private static final org.apache.thrift.protocol.TField W2L_PLAYER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("w2lPlayerInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new destinationForMe_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new destinationForMe_argsTupleSchemeFactory());
    }

    public W2lPlayerInfo w2lPlayerInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      W2L_PLAYER_INFO((short)1, "w2lPlayerInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // W2L_PLAYER_INFO
            return W2L_PLAYER_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.W2L_PLAYER_INFO, new org.apache.thrift.meta_data.FieldMetaData("w2lPlayerInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, W2lPlayerInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(destinationForMe_args.class, metaDataMap);
    }

    public destinationForMe_args() {
    }

    public destinationForMe_args(
      W2lPlayerInfo w2lPlayerInfo)
    {
      this();
      this.w2lPlayerInfo = w2lPlayerInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public destinationForMe_args(destinationForMe_args other) {
      if (other.isSetW2lPlayerInfo()) {
        this.w2lPlayerInfo = new W2lPlayerInfo(other.w2lPlayerInfo);
      }
    }

    public destinationForMe_args deepCopy() {
      return new destinationForMe_args(this);
    }

    @Override
    public void clear() {
      this.w2lPlayerInfo = null;
    }

    public W2lPlayerInfo getW2lPlayerInfo() {
      return this.w2lPlayerInfo;
    }

    public destinationForMe_args setW2lPlayerInfo(W2lPlayerInfo w2lPlayerInfo) {
      this.w2lPlayerInfo = w2lPlayerInfo;
      return this;
    }

    public void unsetW2lPlayerInfo() {
      this.w2lPlayerInfo = null;
    }

    /** Returns true if field w2lPlayerInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetW2lPlayerInfo() {
      return this.w2lPlayerInfo != null;
    }

    public void setW2lPlayerInfoIsSet(boolean value) {
      if (!value) {
        this.w2lPlayerInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case W2L_PLAYER_INFO:
        if (value == null) {
          unsetW2lPlayerInfo();
        } else {
          setW2lPlayerInfo((W2lPlayerInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case W2L_PLAYER_INFO:
        return getW2lPlayerInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case W2L_PLAYER_INFO:
        return isSetW2lPlayerInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof destinationForMe_args)
        return this.equals((destinationForMe_args)that);
      return false;
    }

    public boolean equals(destinationForMe_args that) {
      if (that == null)
        return false;

      boolean this_present_w2lPlayerInfo = true && this.isSetW2lPlayerInfo();
      boolean that_present_w2lPlayerInfo = true && that.isSetW2lPlayerInfo();
      if (this_present_w2lPlayerInfo || that_present_w2lPlayerInfo) {
        if (!(this_present_w2lPlayerInfo && that_present_w2lPlayerInfo))
          return false;
        if (!this.w2lPlayerInfo.equals(that.w2lPlayerInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_w2lPlayerInfo = true && (isSetW2lPlayerInfo());
      list.add(present_w2lPlayerInfo);
      if (present_w2lPlayerInfo)
        list.add(w2lPlayerInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(destinationForMe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetW2lPlayerInfo()).compareTo(other.isSetW2lPlayerInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetW2lPlayerInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.w2lPlayerInfo, other.w2lPlayerInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("destinationForMe_args(");
      boolean first = true;

      sb.append("w2lPlayerInfo:");
      if (this.w2lPlayerInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.w2lPlayerInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (w2lPlayerInfo != null) {
        w2lPlayerInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class destinationForMe_argsStandardSchemeFactory implements SchemeFactory {
      public destinationForMe_argsStandardScheme getScheme() {
        return new destinationForMe_argsStandardScheme();
      }
    }

    private static class destinationForMe_argsStandardScheme extends StandardScheme<destinationForMe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, destinationForMe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // W2L_PLAYER_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.w2lPlayerInfo = new W2lPlayerInfo();
                struct.w2lPlayerInfo.read(iprot);
                struct.setW2lPlayerInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, destinationForMe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.w2lPlayerInfo != null) {
          oprot.writeFieldBegin(W2L_PLAYER_INFO_FIELD_DESC);
          struct.w2lPlayerInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class destinationForMe_argsTupleSchemeFactory implements SchemeFactory {
      public destinationForMe_argsTupleScheme getScheme() {
        return new destinationForMe_argsTupleScheme();
      }
    }

    private static class destinationForMe_argsTupleScheme extends TupleScheme<destinationForMe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, destinationForMe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetW2lPlayerInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetW2lPlayerInfo()) {
          struct.w2lPlayerInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, destinationForMe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.w2lPlayerInfo = new W2lPlayerInfo();
          struct.w2lPlayerInfo.read(iprot);
          struct.setW2lPlayerInfoIsSet(true);
        }
      }
    }

  }

  public static class destinationForMe_result implements org.apache.thrift.TBase<destinationForMe_result, destinationForMe_result._Fields>, java.io.Serializable, Cloneable, Comparable<destinationForMe_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("destinationForMe_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new destinationForMe_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new destinationForMe_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(destinationForMe_result.class, metaDataMap);
    }

    public destinationForMe_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public destinationForMe_result(destinationForMe_result other) {
    }

    public destinationForMe_result deepCopy() {
      return new destinationForMe_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof destinationForMe_result)
        return this.equals((destinationForMe_result)that);
      return false;
    }

    public boolean equals(destinationForMe_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(destinationForMe_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("destinationForMe_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class destinationForMe_resultStandardSchemeFactory implements SchemeFactory {
      public destinationForMe_resultStandardScheme getScheme() {
        return new destinationForMe_resultStandardScheme();
      }
    }

    private static class destinationForMe_resultStandardScheme extends StandardScheme<destinationForMe_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, destinationForMe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, destinationForMe_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class destinationForMe_resultTupleSchemeFactory implements SchemeFactory {
      public destinationForMe_resultTupleScheme getScheme() {
        return new destinationForMe_resultTupleScheme();
      }
    }

    private static class destinationForMe_resultTupleScheme extends TupleScheme<destinationForMe_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, destinationForMe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, destinationForMe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class resVectorInfo_args implements org.apache.thrift.TBase<resVectorInfo_args, resVectorInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<resVectorInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resVectorInfo_args");

    private static final org.apache.thrift.protocol.TField W2L_VECTOR_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("w2lVectorInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resVectorInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resVectorInfo_argsTupleSchemeFactory());
    }

    public W2lVectorInfo w2lVectorInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      W2L_VECTOR_INFO((short)1, "w2lVectorInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // W2L_VECTOR_INFO
            return W2L_VECTOR_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.W2L_VECTOR_INFO, new org.apache.thrift.meta_data.FieldMetaData("w2lVectorInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, W2lVectorInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resVectorInfo_args.class, metaDataMap);
    }

    public resVectorInfo_args() {
    }

    public resVectorInfo_args(
      W2lVectorInfo w2lVectorInfo)
    {
      this();
      this.w2lVectorInfo = w2lVectorInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resVectorInfo_args(resVectorInfo_args other) {
      if (other.isSetW2lVectorInfo()) {
        this.w2lVectorInfo = new W2lVectorInfo(other.w2lVectorInfo);
      }
    }

    public resVectorInfo_args deepCopy() {
      return new resVectorInfo_args(this);
    }

    @Override
    public void clear() {
      this.w2lVectorInfo = null;
    }

    public W2lVectorInfo getW2lVectorInfo() {
      return this.w2lVectorInfo;
    }

    public resVectorInfo_args setW2lVectorInfo(W2lVectorInfo w2lVectorInfo) {
      this.w2lVectorInfo = w2lVectorInfo;
      return this;
    }

    public void unsetW2lVectorInfo() {
      this.w2lVectorInfo = null;
    }

    /** Returns true if field w2lVectorInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetW2lVectorInfo() {
      return this.w2lVectorInfo != null;
    }

    public void setW2lVectorInfoIsSet(boolean value) {
      if (!value) {
        this.w2lVectorInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case W2L_VECTOR_INFO:
        if (value == null) {
          unsetW2lVectorInfo();
        } else {
          setW2lVectorInfo((W2lVectorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case W2L_VECTOR_INFO:
        return getW2lVectorInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case W2L_VECTOR_INFO:
        return isSetW2lVectorInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resVectorInfo_args)
        return this.equals((resVectorInfo_args)that);
      return false;
    }

    public boolean equals(resVectorInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_w2lVectorInfo = true && this.isSetW2lVectorInfo();
      boolean that_present_w2lVectorInfo = true && that.isSetW2lVectorInfo();
      if (this_present_w2lVectorInfo || that_present_w2lVectorInfo) {
        if (!(this_present_w2lVectorInfo && that_present_w2lVectorInfo))
          return false;
        if (!this.w2lVectorInfo.equals(that.w2lVectorInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_w2lVectorInfo = true && (isSetW2lVectorInfo());
      list.add(present_w2lVectorInfo);
      if (present_w2lVectorInfo)
        list.add(w2lVectorInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(resVectorInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetW2lVectorInfo()).compareTo(other.isSetW2lVectorInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetW2lVectorInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.w2lVectorInfo, other.w2lVectorInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resVectorInfo_args(");
      boolean first = true;

      sb.append("w2lVectorInfo:");
      if (this.w2lVectorInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.w2lVectorInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (w2lVectorInfo != null) {
        w2lVectorInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resVectorInfo_argsStandardSchemeFactory implements SchemeFactory {
      public resVectorInfo_argsStandardScheme getScheme() {
        return new resVectorInfo_argsStandardScheme();
      }
    }

    private static class resVectorInfo_argsStandardScheme extends StandardScheme<resVectorInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resVectorInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // W2L_VECTOR_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.w2lVectorInfo = new W2lVectorInfo();
                struct.w2lVectorInfo.read(iprot);
                struct.setW2lVectorInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resVectorInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.w2lVectorInfo != null) {
          oprot.writeFieldBegin(W2L_VECTOR_INFO_FIELD_DESC);
          struct.w2lVectorInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resVectorInfo_argsTupleSchemeFactory implements SchemeFactory {
      public resVectorInfo_argsTupleScheme getScheme() {
        return new resVectorInfo_argsTupleScheme();
      }
    }

    private static class resVectorInfo_argsTupleScheme extends TupleScheme<resVectorInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resVectorInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetW2lVectorInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetW2lVectorInfo()) {
          struct.w2lVectorInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resVectorInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.w2lVectorInfo = new W2lVectorInfo();
          struct.w2lVectorInfo.read(iprot);
          struct.setW2lVectorInfoIsSet(true);
        }
      }
    }

  }

  public static class resVectorInfo_result implements org.apache.thrift.TBase<resVectorInfo_result, resVectorInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<resVectorInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resVectorInfo_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resVectorInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resVectorInfo_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resVectorInfo_result.class, metaDataMap);
    }

    public resVectorInfo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resVectorInfo_result(resVectorInfo_result other) {
    }

    public resVectorInfo_result deepCopy() {
      return new resVectorInfo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resVectorInfo_result)
        return this.equals((resVectorInfo_result)that);
      return false;
    }

    public boolean equals(resVectorInfo_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(resVectorInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resVectorInfo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resVectorInfo_resultStandardSchemeFactory implements SchemeFactory {
      public resVectorInfo_resultStandardScheme getScheme() {
        return new resVectorInfo_resultStandardScheme();
      }
    }

    private static class resVectorInfo_resultStandardScheme extends StandardScheme<resVectorInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resVectorInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resVectorInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resVectorInfo_resultTupleSchemeFactory implements SchemeFactory {
      public resVectorInfo_resultTupleScheme getScheme() {
        return new resVectorInfo_resultTupleScheme();
      }
    }

    private static class resVectorInfo_resultTupleScheme extends TupleScheme<resVectorInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resVectorInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resVectorInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class resolveConflict_args implements org.apache.thrift.TBase<resolveConflict_args, resolveConflict_args._Fields>, java.io.Serializable, Cloneable, Comparable<resolveConflict_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolveConflict_args");

    private static final org.apache.thrift.protocol.TField W2L_RESOLVE_CONFLICT_FIELD_DESC = new org.apache.thrift.protocol.TField("w2lResolveConflict", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolveConflict_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolveConflict_argsTupleSchemeFactory());
    }

    public W2lResolveConflict w2lResolveConflict; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      W2L_RESOLVE_CONFLICT((short)1, "w2lResolveConflict");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // W2L_RESOLVE_CONFLICT
            return W2L_RESOLVE_CONFLICT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.W2L_RESOLVE_CONFLICT, new org.apache.thrift.meta_data.FieldMetaData("w2lResolveConflict", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, W2lResolveConflict.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolveConflict_args.class, metaDataMap);
    }

    public resolveConflict_args() {
    }

    public resolveConflict_args(
      W2lResolveConflict w2lResolveConflict)
    {
      this();
      this.w2lResolveConflict = w2lResolveConflict;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolveConflict_args(resolveConflict_args other) {
      if (other.isSetW2lResolveConflict()) {
        this.w2lResolveConflict = new W2lResolveConflict(other.w2lResolveConflict);
      }
    }

    public resolveConflict_args deepCopy() {
      return new resolveConflict_args(this);
    }

    @Override
    public void clear() {
      this.w2lResolveConflict = null;
    }

    public W2lResolveConflict getW2lResolveConflict() {
      return this.w2lResolveConflict;
    }

    public resolveConflict_args setW2lResolveConflict(W2lResolveConflict w2lResolveConflict) {
      this.w2lResolveConflict = w2lResolveConflict;
      return this;
    }

    public void unsetW2lResolveConflict() {
      this.w2lResolveConflict = null;
    }

    /** Returns true if field w2lResolveConflict is set (has been assigned a value) and false otherwise */
    public boolean isSetW2lResolveConflict() {
      return this.w2lResolveConflict != null;
    }

    public void setW2lResolveConflictIsSet(boolean value) {
      if (!value) {
        this.w2lResolveConflict = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case W2L_RESOLVE_CONFLICT:
        if (value == null) {
          unsetW2lResolveConflict();
        } else {
          setW2lResolveConflict((W2lResolveConflict)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case W2L_RESOLVE_CONFLICT:
        return getW2lResolveConflict();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case W2L_RESOLVE_CONFLICT:
        return isSetW2lResolveConflict();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolveConflict_args)
        return this.equals((resolveConflict_args)that);
      return false;
    }

    public boolean equals(resolveConflict_args that) {
      if (that == null)
        return false;

      boolean this_present_w2lResolveConflict = true && this.isSetW2lResolveConflict();
      boolean that_present_w2lResolveConflict = true && that.isSetW2lResolveConflict();
      if (this_present_w2lResolveConflict || that_present_w2lResolveConflict) {
        if (!(this_present_w2lResolveConflict && that_present_w2lResolveConflict))
          return false;
        if (!this.w2lResolveConflict.equals(that.w2lResolveConflict))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_w2lResolveConflict = true && (isSetW2lResolveConflict());
      list.add(present_w2lResolveConflict);
      if (present_w2lResolveConflict)
        list.add(w2lResolveConflict);

      return list.hashCode();
    }

    @Override
    public int compareTo(resolveConflict_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetW2lResolveConflict()).compareTo(other.isSetW2lResolveConflict());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetW2lResolveConflict()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.w2lResolveConflict, other.w2lResolveConflict);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolveConflict_args(");
      boolean first = true;

      sb.append("w2lResolveConflict:");
      if (this.w2lResolveConflict == null) {
        sb.append("null");
      } else {
        sb.append(this.w2lResolveConflict);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (w2lResolveConflict != null) {
        w2lResolveConflict.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolveConflict_argsStandardSchemeFactory implements SchemeFactory {
      public resolveConflict_argsStandardScheme getScheme() {
        return new resolveConflict_argsStandardScheme();
      }
    }

    private static class resolveConflict_argsStandardScheme extends StandardScheme<resolveConflict_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolveConflict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // W2L_RESOLVE_CONFLICT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.w2lResolveConflict = new W2lResolveConflict();
                struct.w2lResolveConflict.read(iprot);
                struct.setW2lResolveConflictIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolveConflict_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.w2lResolveConflict != null) {
          oprot.writeFieldBegin(W2L_RESOLVE_CONFLICT_FIELD_DESC);
          struct.w2lResolveConflict.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolveConflict_argsTupleSchemeFactory implements SchemeFactory {
      public resolveConflict_argsTupleScheme getScheme() {
        return new resolveConflict_argsTupleScheme();
      }
    }

    private static class resolveConflict_argsTupleScheme extends TupleScheme<resolveConflict_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolveConflict_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetW2lResolveConflict()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetW2lResolveConflict()) {
          struct.w2lResolveConflict.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolveConflict_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.w2lResolveConflict = new W2lResolveConflict();
          struct.w2lResolveConflict.read(iprot);
          struct.setW2lResolveConflictIsSet(true);
        }
      }
    }

  }

  public static class resolveConflict_result implements org.apache.thrift.TBase<resolveConflict_result, resolveConflict_result._Fields>, java.io.Serializable, Cloneable, Comparable<resolveConflict_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolveConflict_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolveConflict_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolveConflict_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolveConflict_result.class, metaDataMap);
    }

    public resolveConflict_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolveConflict_result(resolveConflict_result other) {
    }

    public resolveConflict_result deepCopy() {
      return new resolveConflict_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolveConflict_result)
        return this.equals((resolveConflict_result)that);
      return false;
    }

    public boolean equals(resolveConflict_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(resolveConflict_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolveConflict_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolveConflict_resultStandardSchemeFactory implements SchemeFactory {
      public resolveConflict_resultStandardScheme getScheme() {
        return new resolveConflict_resultStandardScheme();
      }
    }

    private static class resolveConflict_resultStandardScheme extends StandardScheme<resolveConflict_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolveConflict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolveConflict_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolveConflict_resultTupleSchemeFactory implements SchemeFactory {
      public resolveConflict_resultTupleScheme getScheme() {
        return new resolveConflict_resultTupleScheme();
      }
    }

    private static class resolveConflict_resultTupleScheme extends TupleScheme<resolveConflict_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolveConflict_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolveConflict_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class conflictGoback_args implements org.apache.thrift.TBase<conflictGoback_args, conflictGoback_args._Fields>, java.io.Serializable, Cloneable, Comparable<conflictGoback_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("conflictGoback_args");

    private static final org.apache.thrift.protocol.TField W2L_CONFLICT_GOBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("w2lConflictGoback", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new conflictGoback_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new conflictGoback_argsTupleSchemeFactory());
    }

    public W2lConflictGoback w2lConflictGoback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      W2L_CONFLICT_GOBACK((short)1, "w2lConflictGoback");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // W2L_CONFLICT_GOBACK
            return W2L_CONFLICT_GOBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.W2L_CONFLICT_GOBACK, new org.apache.thrift.meta_data.FieldMetaData("w2lConflictGoback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, W2lConflictGoback.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(conflictGoback_args.class, metaDataMap);
    }

    public conflictGoback_args() {
    }

    public conflictGoback_args(
      W2lConflictGoback w2lConflictGoback)
    {
      this();
      this.w2lConflictGoback = w2lConflictGoback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public conflictGoback_args(conflictGoback_args other) {
      if (other.isSetW2lConflictGoback()) {
        this.w2lConflictGoback = new W2lConflictGoback(other.w2lConflictGoback);
      }
    }

    public conflictGoback_args deepCopy() {
      return new conflictGoback_args(this);
    }

    @Override
    public void clear() {
      this.w2lConflictGoback = null;
    }

    public W2lConflictGoback getW2lConflictGoback() {
      return this.w2lConflictGoback;
    }

    public conflictGoback_args setW2lConflictGoback(W2lConflictGoback w2lConflictGoback) {
      this.w2lConflictGoback = w2lConflictGoback;
      return this;
    }

    public void unsetW2lConflictGoback() {
      this.w2lConflictGoback = null;
    }

    /** Returns true if field w2lConflictGoback is set (has been assigned a value) and false otherwise */
    public boolean isSetW2lConflictGoback() {
      return this.w2lConflictGoback != null;
    }

    public void setW2lConflictGobackIsSet(boolean value) {
      if (!value) {
        this.w2lConflictGoback = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case W2L_CONFLICT_GOBACK:
        if (value == null) {
          unsetW2lConflictGoback();
        } else {
          setW2lConflictGoback((W2lConflictGoback)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case W2L_CONFLICT_GOBACK:
        return getW2lConflictGoback();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case W2L_CONFLICT_GOBACK:
        return isSetW2lConflictGoback();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof conflictGoback_args)
        return this.equals((conflictGoback_args)that);
      return false;
    }

    public boolean equals(conflictGoback_args that) {
      if (that == null)
        return false;

      boolean this_present_w2lConflictGoback = true && this.isSetW2lConflictGoback();
      boolean that_present_w2lConflictGoback = true && that.isSetW2lConflictGoback();
      if (this_present_w2lConflictGoback || that_present_w2lConflictGoback) {
        if (!(this_present_w2lConflictGoback && that_present_w2lConflictGoback))
          return false;
        if (!this.w2lConflictGoback.equals(that.w2lConflictGoback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_w2lConflictGoback = true && (isSetW2lConflictGoback());
      list.add(present_w2lConflictGoback);
      if (present_w2lConflictGoback)
        list.add(w2lConflictGoback);

      return list.hashCode();
    }

    @Override
    public int compareTo(conflictGoback_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetW2lConflictGoback()).compareTo(other.isSetW2lConflictGoback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetW2lConflictGoback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.w2lConflictGoback, other.w2lConflictGoback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("conflictGoback_args(");
      boolean first = true;

      sb.append("w2lConflictGoback:");
      if (this.w2lConflictGoback == null) {
        sb.append("null");
      } else {
        sb.append(this.w2lConflictGoback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (w2lConflictGoback != null) {
        w2lConflictGoback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class conflictGoback_argsStandardSchemeFactory implements SchemeFactory {
      public conflictGoback_argsStandardScheme getScheme() {
        return new conflictGoback_argsStandardScheme();
      }
    }

    private static class conflictGoback_argsStandardScheme extends StandardScheme<conflictGoback_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, conflictGoback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // W2L_CONFLICT_GOBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.w2lConflictGoback = new W2lConflictGoback();
                struct.w2lConflictGoback.read(iprot);
                struct.setW2lConflictGobackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, conflictGoback_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.w2lConflictGoback != null) {
          oprot.writeFieldBegin(W2L_CONFLICT_GOBACK_FIELD_DESC);
          struct.w2lConflictGoback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class conflictGoback_argsTupleSchemeFactory implements SchemeFactory {
      public conflictGoback_argsTupleScheme getScheme() {
        return new conflictGoback_argsTupleScheme();
      }
    }

    private static class conflictGoback_argsTupleScheme extends TupleScheme<conflictGoback_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, conflictGoback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetW2lConflictGoback()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetW2lConflictGoback()) {
          struct.w2lConflictGoback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, conflictGoback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.w2lConflictGoback = new W2lConflictGoback();
          struct.w2lConflictGoback.read(iprot);
          struct.setW2lConflictGobackIsSet(true);
        }
      }
    }

  }

  public static class conflictGoback_result implements org.apache.thrift.TBase<conflictGoback_result, conflictGoback_result._Fields>, java.io.Serializable, Cloneable, Comparable<conflictGoback_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("conflictGoback_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new conflictGoback_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new conflictGoback_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(conflictGoback_result.class, metaDataMap);
    }

    public conflictGoback_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public conflictGoback_result(conflictGoback_result other) {
    }

    public conflictGoback_result deepCopy() {
      return new conflictGoback_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof conflictGoback_result)
        return this.equals((conflictGoback_result)that);
      return false;
    }

    public boolean equals(conflictGoback_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(conflictGoback_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("conflictGoback_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class conflictGoback_resultStandardSchemeFactory implements SchemeFactory {
      public conflictGoback_resultStandardScheme getScheme() {
        return new conflictGoback_resultStandardScheme();
      }
    }

    private static class conflictGoback_resultStandardScheme extends StandardScheme<conflictGoback_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, conflictGoback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, conflictGoback_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class conflictGoback_resultTupleSchemeFactory implements SchemeFactory {
      public conflictGoback_resultTupleScheme getScheme() {
        return new conflictGoback_resultTupleScheme();
      }
    }

    private static class conflictGoback_resultTupleScheme extends TupleScheme<conflictGoback_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, conflictGoback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, conflictGoback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updataSprite_args implements org.apache.thrift.TBase<updataSprite_args, updataSprite_args._Fields>, java.io.Serializable, Cloneable, Comparable<updataSprite_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updataSprite_args");

    private static final org.apache.thrift.protocol.TField VIEW_SPRITES_FIELD_DESC = new org.apache.thrift.protocol.TField("viewSprites", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updataSprite_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updataSprite_argsTupleSchemeFactory());
    }

    public RPC_Sprite viewSprites; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VIEW_SPRITES((short)1, "viewSprites");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VIEW_SPRITES
            return VIEW_SPRITES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VIEW_SPRITES, new org.apache.thrift.meta_data.FieldMetaData("viewSprites", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RPC_Sprite.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updataSprite_args.class, metaDataMap);
    }

    public updataSprite_args() {
    }

    public updataSprite_args(
      RPC_Sprite viewSprites)
    {
      this();
      this.viewSprites = viewSprites;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updataSprite_args(updataSprite_args other) {
      if (other.isSetViewSprites()) {
        this.viewSprites = new RPC_Sprite(other.viewSprites);
      }
    }

    public updataSprite_args deepCopy() {
      return new updataSprite_args(this);
    }

    @Override
    public void clear() {
      this.viewSprites = null;
    }

    public RPC_Sprite getViewSprites() {
      return this.viewSprites;
    }

    public updataSprite_args setViewSprites(RPC_Sprite viewSprites) {
      this.viewSprites = viewSprites;
      return this;
    }

    public void unsetViewSprites() {
      this.viewSprites = null;
    }

    /** Returns true if field viewSprites is set (has been assigned a value) and false otherwise */
    public boolean isSetViewSprites() {
      return this.viewSprites != null;
    }

    public void setViewSpritesIsSet(boolean value) {
      if (!value) {
        this.viewSprites = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VIEW_SPRITES:
        if (value == null) {
          unsetViewSprites();
        } else {
          setViewSprites((RPC_Sprite)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VIEW_SPRITES:
        return getViewSprites();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VIEW_SPRITES:
        return isSetViewSprites();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updataSprite_args)
        return this.equals((updataSprite_args)that);
      return false;
    }

    public boolean equals(updataSprite_args that) {
      if (that == null)
        return false;

      boolean this_present_viewSprites = true && this.isSetViewSprites();
      boolean that_present_viewSprites = true && that.isSetViewSprites();
      if (this_present_viewSprites || that_present_viewSprites) {
        if (!(this_present_viewSprites && that_present_viewSprites))
          return false;
        if (!this.viewSprites.equals(that.viewSprites))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_viewSprites = true && (isSetViewSprites());
      list.add(present_viewSprites);
      if (present_viewSprites)
        list.add(viewSprites);

      return list.hashCode();
    }

    @Override
    public int compareTo(updataSprite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetViewSprites()).compareTo(other.isSetViewSprites());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetViewSprites()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewSprites, other.viewSprites);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updataSprite_args(");
      boolean first = true;

      sb.append("viewSprites:");
      if (this.viewSprites == null) {
        sb.append("null");
      } else {
        sb.append(this.viewSprites);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (viewSprites != null) {
        viewSprites.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updataSprite_argsStandardSchemeFactory implements SchemeFactory {
      public updataSprite_argsStandardScheme getScheme() {
        return new updataSprite_argsStandardScheme();
      }
    }

    private static class updataSprite_argsStandardScheme extends StandardScheme<updataSprite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updataSprite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VIEW_SPRITES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.viewSprites = new RPC_Sprite();
                struct.viewSprites.read(iprot);
                struct.setViewSpritesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updataSprite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.viewSprites != null) {
          oprot.writeFieldBegin(VIEW_SPRITES_FIELD_DESC);
          struct.viewSprites.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updataSprite_argsTupleSchemeFactory implements SchemeFactory {
      public updataSprite_argsTupleScheme getScheme() {
        return new updataSprite_argsTupleScheme();
      }
    }

    private static class updataSprite_argsTupleScheme extends TupleScheme<updataSprite_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updataSprite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetViewSprites()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetViewSprites()) {
          struct.viewSprites.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updataSprite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.viewSprites = new RPC_Sprite();
          struct.viewSprites.read(iprot);
          struct.setViewSpritesIsSet(true);
        }
      }
    }

  }

  public static class updataSprite_result implements org.apache.thrift.TBase<updataSprite_result, updataSprite_result._Fields>, java.io.Serializable, Cloneable, Comparable<updataSprite_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updataSprite_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updataSprite_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updataSprite_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updataSprite_result.class, metaDataMap);
    }

    public updataSprite_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updataSprite_result(updataSprite_result other) {
    }

    public updataSprite_result deepCopy() {
      return new updataSprite_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updataSprite_result)
        return this.equals((updataSprite_result)that);
      return false;
    }

    public boolean equals(updataSprite_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(updataSprite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updataSprite_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updataSprite_resultStandardSchemeFactory implements SchemeFactory {
      public updataSprite_resultStandardScheme getScheme() {
        return new updataSprite_resultStandardScheme();
      }
    }

    private static class updataSprite_resultStandardScheme extends StandardScheme<updataSprite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updataSprite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updataSprite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updataSprite_resultTupleSchemeFactory implements SchemeFactory {
      public updataSprite_resultTupleScheme getScheme() {
        return new updataSprite_resultTupleScheme();
      }
    }

    private static class updataSprite_resultTupleScheme extends TupleScheme<updataSprite_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updataSprite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updataSprite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteSprite_args implements org.apache.thrift.TBase<deleteSprite_args, deleteSprite_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSprite_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSprite_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSprite_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSprite_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSprite_args.class, metaDataMap);
    }

    public deleteSprite_args() {
    }

    public deleteSprite_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSprite_args(deleteSprite_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public deleteSprite_args deepCopy() {
      return new deleteSprite_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public deleteSprite_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSprite_args)
        return this.equals((deleteSprite_args)that);
      return false;
    }

    public boolean equals(deleteSprite_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uid = true;
      list.add(present_uid);
      if (present_uid)
        list.add(uid);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSprite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSprite_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSprite_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSprite_argsStandardScheme getScheme() {
        return new deleteSprite_argsStandardScheme();
      }
    }

    private static class deleteSprite_argsStandardScheme extends StandardScheme<deleteSprite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSprite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSprite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSprite_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSprite_argsTupleScheme getScheme() {
        return new deleteSprite_argsTupleScheme();
      }
    }

    private static class deleteSprite_argsTupleScheme extends TupleScheme<deleteSprite_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSprite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSprite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class deleteSprite_result implements org.apache.thrift.TBase<deleteSprite_result, deleteSprite_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSprite_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSprite_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSprite_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSprite_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSprite_result.class, metaDataMap);
    }

    public deleteSprite_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSprite_result(deleteSprite_result other) {
    }

    public deleteSprite_result deepCopy() {
      return new deleteSprite_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSprite_result)
        return this.equals((deleteSprite_result)that);
      return false;
    }

    public boolean equals(deleteSprite_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSprite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSprite_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSprite_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSprite_resultStandardScheme getScheme() {
        return new deleteSprite_resultStandardScheme();
      }
    }

    private static class deleteSprite_resultStandardScheme extends StandardScheme<deleteSprite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSprite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSprite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSprite_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSprite_resultTupleScheme getScheme() {
        return new deleteSprite_resultTupleScheme();
      }
    }

    private static class deleteSprite_resultTupleScheme extends TupleScheme<deleteSprite_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSprite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSprite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class worldRegisterSuccess_args implements org.apache.thrift.TBase<worldRegisterSuccess_args, worldRegisterSuccess_args._Fields>, java.io.Serializable, Cloneable, Comparable<worldRegisterSuccess_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("worldRegisterSuccess_args");

    private static final org.apache.thrift.protocol.TField W2L_SPACE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("w2lSpaceInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new worldRegisterSuccess_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new worldRegisterSuccess_argsTupleSchemeFactory());
    }

    public W2lSpaceInfo w2lSpaceInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      W2L_SPACE_INFO((short)1, "w2lSpaceInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // W2L_SPACE_INFO
            return W2L_SPACE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.W2L_SPACE_INFO, new org.apache.thrift.meta_data.FieldMetaData("w2lSpaceInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, W2lSpaceInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(worldRegisterSuccess_args.class, metaDataMap);
    }

    public worldRegisterSuccess_args() {
    }

    public worldRegisterSuccess_args(
      W2lSpaceInfo w2lSpaceInfo)
    {
      this();
      this.w2lSpaceInfo = w2lSpaceInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public worldRegisterSuccess_args(worldRegisterSuccess_args other) {
      if (other.isSetW2lSpaceInfo()) {
        this.w2lSpaceInfo = new W2lSpaceInfo(other.w2lSpaceInfo);
      }
    }

    public worldRegisterSuccess_args deepCopy() {
      return new worldRegisterSuccess_args(this);
    }

    @Override
    public void clear() {
      this.w2lSpaceInfo = null;
    }

    public W2lSpaceInfo getW2lSpaceInfo() {
      return this.w2lSpaceInfo;
    }

    public worldRegisterSuccess_args setW2lSpaceInfo(W2lSpaceInfo w2lSpaceInfo) {
      this.w2lSpaceInfo = w2lSpaceInfo;
      return this;
    }

    public void unsetW2lSpaceInfo() {
      this.w2lSpaceInfo = null;
    }

    /** Returns true if field w2lSpaceInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetW2lSpaceInfo() {
      return this.w2lSpaceInfo != null;
    }

    public void setW2lSpaceInfoIsSet(boolean value) {
      if (!value) {
        this.w2lSpaceInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case W2L_SPACE_INFO:
        if (value == null) {
          unsetW2lSpaceInfo();
        } else {
          setW2lSpaceInfo((W2lSpaceInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case W2L_SPACE_INFO:
        return getW2lSpaceInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case W2L_SPACE_INFO:
        return isSetW2lSpaceInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof worldRegisterSuccess_args)
        return this.equals((worldRegisterSuccess_args)that);
      return false;
    }

    public boolean equals(worldRegisterSuccess_args that) {
      if (that == null)
        return false;

      boolean this_present_w2lSpaceInfo = true && this.isSetW2lSpaceInfo();
      boolean that_present_w2lSpaceInfo = true && that.isSetW2lSpaceInfo();
      if (this_present_w2lSpaceInfo || that_present_w2lSpaceInfo) {
        if (!(this_present_w2lSpaceInfo && that_present_w2lSpaceInfo))
          return false;
        if (!this.w2lSpaceInfo.equals(that.w2lSpaceInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_w2lSpaceInfo = true && (isSetW2lSpaceInfo());
      list.add(present_w2lSpaceInfo);
      if (present_w2lSpaceInfo)
        list.add(w2lSpaceInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(worldRegisterSuccess_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetW2lSpaceInfo()).compareTo(other.isSetW2lSpaceInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetW2lSpaceInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.w2lSpaceInfo, other.w2lSpaceInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("worldRegisterSuccess_args(");
      boolean first = true;

      sb.append("w2lSpaceInfo:");
      if (this.w2lSpaceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.w2lSpaceInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (w2lSpaceInfo != null) {
        w2lSpaceInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class worldRegisterSuccess_argsStandardSchemeFactory implements SchemeFactory {
      public worldRegisterSuccess_argsStandardScheme getScheme() {
        return new worldRegisterSuccess_argsStandardScheme();
      }
    }

    private static class worldRegisterSuccess_argsStandardScheme extends StandardScheme<worldRegisterSuccess_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, worldRegisterSuccess_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // W2L_SPACE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.w2lSpaceInfo = new W2lSpaceInfo();
                struct.w2lSpaceInfo.read(iprot);
                struct.setW2lSpaceInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, worldRegisterSuccess_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.w2lSpaceInfo != null) {
          oprot.writeFieldBegin(W2L_SPACE_INFO_FIELD_DESC);
          struct.w2lSpaceInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class worldRegisterSuccess_argsTupleSchemeFactory implements SchemeFactory {
      public worldRegisterSuccess_argsTupleScheme getScheme() {
        return new worldRegisterSuccess_argsTupleScheme();
      }
    }

    private static class worldRegisterSuccess_argsTupleScheme extends TupleScheme<worldRegisterSuccess_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, worldRegisterSuccess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetW2lSpaceInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetW2lSpaceInfo()) {
          struct.w2lSpaceInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, worldRegisterSuccess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.w2lSpaceInfo = new W2lSpaceInfo();
          struct.w2lSpaceInfo.read(iprot);
          struct.setW2lSpaceInfoIsSet(true);
        }
      }
    }

  }

  public static class worldRegisterSuccess_result implements org.apache.thrift.TBase<worldRegisterSuccess_result, worldRegisterSuccess_result._Fields>, java.io.Serializable, Cloneable, Comparable<worldRegisterSuccess_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("worldRegisterSuccess_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new worldRegisterSuccess_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new worldRegisterSuccess_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(worldRegisterSuccess_result.class, metaDataMap);
    }

    public worldRegisterSuccess_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public worldRegisterSuccess_result(worldRegisterSuccess_result other) {
    }

    public worldRegisterSuccess_result deepCopy() {
      return new worldRegisterSuccess_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof worldRegisterSuccess_result)
        return this.equals((worldRegisterSuccess_result)that);
      return false;
    }

    public boolean equals(worldRegisterSuccess_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(worldRegisterSuccess_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("worldRegisterSuccess_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class worldRegisterSuccess_resultStandardSchemeFactory implements SchemeFactory {
      public worldRegisterSuccess_resultStandardScheme getScheme() {
        return new worldRegisterSuccess_resultStandardScheme();
      }
    }

    private static class worldRegisterSuccess_resultStandardScheme extends StandardScheme<worldRegisterSuccess_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, worldRegisterSuccess_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, worldRegisterSuccess_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class worldRegisterSuccess_resultTupleSchemeFactory implements SchemeFactory {
      public worldRegisterSuccess_resultTupleScheme getScheme() {
        return new worldRegisterSuccess_resultTupleScheme();
      }
    }

    private static class worldRegisterSuccess_resultTupleScheme extends TupleScheme<worldRegisterSuccess_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, worldRegisterSuccess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, worldRegisterSuccess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
