/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xgame.framework.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-20")
public class RPC_ViewSprites implements org.apache.thrift.TBase<RPC_ViewSprites, RPC_ViewSprites._Fields>, java.io.Serializable, Cloneable, Comparable<RPC_ViewSprites> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RPC_ViewSprites");

  private static final org.apache.thrift.protocol.TField SEFT_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("seftUid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SPRITES_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("spritesList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RPC_ViewSpritesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RPC_ViewSpritesTupleSchemeFactory());
  }

  public long seftUid; // required
  public List<RPC_Sprite> spritesList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEFT_UID((short)1, "seftUid"),
    SPRITES_LIST((short)2, "spritesList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEFT_UID
          return SEFT_UID;
        case 2: // SPRITES_LIST
          return SPRITES_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEFTUID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEFT_UID, new org.apache.thrift.meta_data.FieldMetaData("seftUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPRITES_LIST, new org.apache.thrift.meta_data.FieldMetaData("spritesList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "RPC_Sprite"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RPC_ViewSprites.class, metaDataMap);
  }

  public RPC_ViewSprites() {
  }

  public RPC_ViewSprites(
    long seftUid,
    List<RPC_Sprite> spritesList)
  {
    this();
    this.seftUid = seftUid;
    setSeftUidIsSet(true);
    this.spritesList = spritesList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RPC_ViewSprites(RPC_ViewSprites other) {
    __isset_bitfield = other.__isset_bitfield;
    this.seftUid = other.seftUid;
    if (other.isSetSpritesList()) {
      List<RPC_Sprite> __this__spritesList = new ArrayList<RPC_Sprite>(other.spritesList.size());
      for (RPC_Sprite other_element : other.spritesList) {
        __this__spritesList.add(other_element);
      }
      this.spritesList = __this__spritesList;
    }
  }

  public RPC_ViewSprites deepCopy() {
    return new RPC_ViewSprites(this);
  }

  @Override
  public void clear() {
    setSeftUidIsSet(false);
    this.seftUid = 0;
    this.spritesList = null;
  }

  public long getSeftUid() {
    return this.seftUid;
  }

  public RPC_ViewSprites setSeftUid(long seftUid) {
    this.seftUid = seftUid;
    setSeftUidIsSet(true);
    return this;
  }

  public void unsetSeftUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEFTUID_ISSET_ID);
  }

  /** Returns true if field seftUid is set (has been assigned a value) and false otherwise */
  public boolean isSetSeftUid() {
    return EncodingUtils.testBit(__isset_bitfield, __SEFTUID_ISSET_ID);
  }

  public void setSeftUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEFTUID_ISSET_ID, value);
  }

  public int getSpritesListSize() {
    return (this.spritesList == null) ? 0 : this.spritesList.size();
  }

  public java.util.Iterator<RPC_Sprite> getSpritesListIterator() {
    return (this.spritesList == null) ? null : this.spritesList.iterator();
  }

  public void addToSpritesList(RPC_Sprite elem) {
    if (this.spritesList == null) {
      this.spritesList = new ArrayList<RPC_Sprite>();
    }
    this.spritesList.add(elem);
  }

  public List<RPC_Sprite> getSpritesList() {
    return this.spritesList;
  }

  public RPC_ViewSprites setSpritesList(List<RPC_Sprite> spritesList) {
    this.spritesList = spritesList;
    return this;
  }

  public void unsetSpritesList() {
    this.spritesList = null;
  }

  /** Returns true if field spritesList is set (has been assigned a value) and false otherwise */
  public boolean isSetSpritesList() {
    return this.spritesList != null;
  }

  public void setSpritesListIsSet(boolean value) {
    if (!value) {
      this.spritesList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEFT_UID:
      if (value == null) {
        unsetSeftUid();
      } else {
        setSeftUid((Long)value);
      }
      break;

    case SPRITES_LIST:
      if (value == null) {
        unsetSpritesList();
      } else {
        setSpritesList((List<RPC_Sprite>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEFT_UID:
      return getSeftUid();

    case SPRITES_LIST:
      return getSpritesList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEFT_UID:
      return isSetSeftUid();
    case SPRITES_LIST:
      return isSetSpritesList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RPC_ViewSprites)
      return this.equals((RPC_ViewSprites)that);
    return false;
  }

  public boolean equals(RPC_ViewSprites that) {
    if (that == null)
      return false;

    boolean this_present_seftUid = true;
    boolean that_present_seftUid = true;
    if (this_present_seftUid || that_present_seftUid) {
      if (!(this_present_seftUid && that_present_seftUid))
        return false;
      if (this.seftUid != that.seftUid)
        return false;
    }

    boolean this_present_spritesList = true && this.isSetSpritesList();
    boolean that_present_spritesList = true && that.isSetSpritesList();
    if (this_present_spritesList || that_present_spritesList) {
      if (!(this_present_spritesList && that_present_spritesList))
        return false;
      if (!this.spritesList.equals(that.spritesList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_seftUid = true;
    list.add(present_seftUid);
    if (present_seftUid)
      list.add(seftUid);

    boolean present_spritesList = true && (isSetSpritesList());
    list.add(present_spritesList);
    if (present_spritesList)
      list.add(spritesList);

    return list.hashCode();
  }

  @Override
  public int compareTo(RPC_ViewSprites other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSeftUid()).compareTo(other.isSetSeftUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeftUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seftUid, other.seftUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpritesList()).compareTo(other.isSetSpritesList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpritesList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spritesList, other.spritesList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RPC_ViewSprites(");
    boolean first = true;

    sb.append("seftUid:");
    sb.append(this.seftUid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spritesList:");
    if (this.spritesList == null) {
      sb.append("null");
    } else {
      sb.append(this.spritesList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RPC_ViewSpritesStandardSchemeFactory implements SchemeFactory {
    public RPC_ViewSpritesStandardScheme getScheme() {
      return new RPC_ViewSpritesStandardScheme();
    }
  }

  private static class RPC_ViewSpritesStandardScheme extends StandardScheme<RPC_ViewSprites> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RPC_ViewSprites struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEFT_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seftUid = iprot.readI64();
              struct.setSeftUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPRITES_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.spritesList = new ArrayList<RPC_Sprite>(_list0.size);
                RPC_Sprite _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new RPC_Sprite();
                  _elem1.read(iprot);
                  struct.spritesList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setSpritesListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RPC_ViewSprites struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEFT_UID_FIELD_DESC);
      oprot.writeI64(struct.seftUid);
      oprot.writeFieldEnd();
      if (struct.spritesList != null) {
        oprot.writeFieldBegin(SPRITES_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.spritesList.size()));
          for (RPC_Sprite _iter3 : struct.spritesList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RPC_ViewSpritesTupleSchemeFactory implements SchemeFactory {
    public RPC_ViewSpritesTupleScheme getScheme() {
      return new RPC_ViewSpritesTupleScheme();
    }
  }

  private static class RPC_ViewSpritesTupleScheme extends TupleScheme<RPC_ViewSprites> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RPC_ViewSprites struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSeftUid()) {
        optionals.set(0);
      }
      if (struct.isSetSpritesList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSeftUid()) {
        oprot.writeI64(struct.seftUid);
      }
      if (struct.isSetSpritesList()) {
        {
          oprot.writeI32(struct.spritesList.size());
          for (RPC_Sprite _iter4 : struct.spritesList)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RPC_ViewSprites struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.seftUid = iprot.readI64();
        struct.setSeftUidIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.spritesList = new ArrayList<RPC_Sprite>(_list5.size);
          RPC_Sprite _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new RPC_Sprite();
            _elem6.read(iprot);
            struct.spritesList.add(_elem6);
          }
        }
        struct.setSpritesListIsSet(true);
      }
    }
  }

}

