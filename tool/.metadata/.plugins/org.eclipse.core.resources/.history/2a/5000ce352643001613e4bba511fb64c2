package com.log;

import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.log4j.Logger;

import com.log.task.DBLogTask;
import com.log.template.BaseLog;
import com.log.util.ClassUtil;
import com.mchange.v2.c3p0.ComboPooledDataSource;
import com.mchange.v2.c3p0.DataSources;

public class GameLogSystem {

	private static final Logger logger = Logger.getLogger(GameLogSystem.class);

	public static GameLogSystem instance = Single.INSTANCE.processor;

	public enum Single {

		INSTANCE;

		GameLogSystem processor;

		Single() {
			this.processor = new GameLogSystem();
		}

	}

	private ComboPooledDataSource ds;

	private ThreadPoolExecutor dbexecutor;

	private ThreadPoolExecutor fileexecutor;

	private BlockingQueue<Runnable> dbqueue = new LinkedBlockingQueue<>();

	private BlockingQueue<Runnable> filequeue = new LinkedBlockingQueue<>();

	private GameLogSystem() {
		try {
			String propesFile = "../config/server-config/logDBConfig.properties";
			File file = new File(propesFile);
			Properties prop = new Properties();
			prop.load(new FileInputStream(file));
			this.ds = new ComboPooledDataSource();
			this.ds.setDriverClass(prop.getProperty("logdbpool.drivers"));
			this.ds.setJdbcUrl(prop.getProperty("logdbpool.url"));
			this.ds.setPassword(prop.getProperty("logdbpool.password"));
			this.ds.setUser(prop.getProperty("logdbpool.user"));
			this.ds.setInitialPoolSize(10);
			this.ds.setAcquireIncrement(5);
			this.ds.setMinPoolSize(10);
			this.ds.setMaxPoolSize(30);
			this.ds.setMaxIdleTime(28800);
			this.ds.setCheckoutTimeout(120000);
			this.ds.setIdleConnectionTestPeriod(1800);
			this.ds.setPreferredTestQuery(prop
					.getProperty("logdbpool.validationquery"));
			// checkTable();
			this.dbexecutor = new ThreadPoolExecutor(5, 8, 0L,
					TimeUnit.MILLISECONDS, this.dbqueue, new ThreadFactory() {
						public Thread newThread(Runnable r) {
							Thread thread = new Thread(r);
							thread.setName("gamelogThread");
							return thread;
						}
					});
			this.fileexecutor = new ThreadPoolExecutor(5, 8, 0L,
					TimeUnit.MILLISECONDS, this.filequeue);
			logger.info("启动日志线程池完毕");
		} catch (Exception ex) {
			logger.error("初始化日志服务失败：", ex);
		}
		logger.info("初始化日志数据库服务结束");
	}

	public void execute(BaseLog bean) {
		// if (stoplist.contains(bean.getClass().getSimpleName().toUpperCase()))
		// {
		// return;
		// }
		int dbsize = this.dbexecutor.getQueue().size();
		int filesize = this.fileexecutor.getQueue().size();
		long lostcount = 0L;
		if (dbsize <= 80000) {
			this.dbexecutor.submit(new DBLogTask(bean, this.ds));
		} else if (filesize <= 20000) {
			this.fileexecutor.submit(new FileLogTask(bean));
		}
	}

	public void checkTable() {
		Set<Class<? extends BaseLog>> templateClasses = ClassUtil.getSubClasses(
				"com.moloong.game.log.template", BaseLog.class);
		Set<Class<T>> subClasses = new HashSet<>();
		for (Class class1 : templateClasses) {
			subClasses.addAll(ClassUtil.getSubClasses(packageUrl, class1));
		}
		Connection connection = null;
		try {
			connection = this.ds.getConnection();
			tableName = getTableName(connection);
			currentTimeMillis = System.currentTimeMillis();
			for (Class cls : subClasses)
				try {
					BaseLog bean = (BaseLog) cls.newInstance();
					String buildTableName = bean
							.buildTableName(currentTimeMillis);
					logger.info("�����" + buildTableName);
					if (tableName.contains(buildTableName.toLowerCase())) {
						List columnDefine = getColumnDefine(connection,
								buildTableName);
						Iterator iterator = columnDefine.iterator();
						while (iterator.hasNext()) {
							ColumnInfo next = (ColumnInfo) iterator.next();
							if (next.getName().equalsIgnoreCase("id")) {
								iterator.remove();
							}
						}

						HashMap dbmatedata = new HashMap();
						for (ColumnInfo columnInfo : columnDefine) {
							dbmatedata.put(columnInfo.getName(), columnInfo);
						}

						List codeDefine = new ArrayList();
						List metaDataSet = bean.getMetadata();
						for (MetaData md : metaDataSet) {
							codeDefine.add(md.toColumnInfo());
						}
						List compartor = TableCompar.getInstance().compartor(
								buildTableName, codeDefine, columnDefine);
						if (compartor.size() > 0) {
							Statement createStatement = connection
									.createStatement();
							for (String string : compartor) {
								logger.info("��鵽���" + string);
								createStatement.addBatch(string);
							}
							createStatement.executeBatch();
						}

					}

					logger.info(buildTableName + "������");
				} catch (Exception e) {
					logger.error(cls.getName() + ":" + e.getMessage());
					e.printStackTrace();
				}
		} catch (SQLException e1) {
			List tableName;
			long currentTimeMillis;
			e1.printStackTrace();
		} finally {
			if (connection != null)
				try {
					connection.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
		}
	}

}
