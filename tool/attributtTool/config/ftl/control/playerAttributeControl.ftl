package com.xgame.logic.server.attribute;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import com.xgame.data.attribute.IPlayerAttribute;
import com.xgame.data.attribute.PlayerAttribute;
import com.xgame.data.attribute.SystemAttribute;
import com.xgame.data.attribute.XAttribute;
import com.xgame.logic.server.log.LogFactory;
import com.xgame.logic.server.player.Player;
 
/**
 * 只能使用已有方法
 * This code is generated by FreeMarker
 * @author gameTools
 *
 */
public class ${className}
{

	PlayerAttribute attribute;
	
	public boolean isEnable(int id,boolean stop){
		XAttribute xAttribute = attribute.attributeTable.get(id);
		if(xAttribute==null||!xAttribute.enable){
			return false;
		}
		return xAttribute.enable;
	}
	
	public boolean isEnable(int id,int systemId ,boolean stop){
		XAttribute xAttribute = attribute.attributeTable.get(id);
		if(xAttribute==null||!xAttribute.enable){
			return false;
		}
		SystemAttribute sa = xAttribute.attributes.get(systemId);
		if(sa == null||!sa.enable){
			return false;
		}
		return sa.enable;
	}
	
	public boolean setEnable(int id,boolean stop){
		XAttribute xAttribute = attribute.attributeTable.get(id);
		if(xAttribute==null||!xAttribute.enable){
			return false;
		}
		xAttribute.enable = stop;
		return true;
	}
	
	public boolean setEnable(int id,int systemId ,boolean stop){
		XAttribute xAttribute = attribute.attributeTable.get(id);
		if(xAttribute==null||!xAttribute.enable){
			return false;
		}
		SystemAttribute sa = xAttribute.attributes.get(systemId);
		if(sa == null||!sa.enable){
			return false;
		}
		sa.enable = stop;
		return true;
	}
	
	public void mathAttribute(){
		Iterator<Entry<Integer, XAttribute>> iterator = attribute.attributeTable.entrySet().iterator();
		while (iterator.hasNext()) {
			Entry<Integer, XAttribute> entry =  iterator.next();
			Integer id = entry.getKey();
			set(id, toAttribute(id));
		}
	}
	
	/**
	 * 深度clone全部属性  双重迭代找全部属性 并拷贝 开销不小
	 */
	public void toAllAttribute(){
		//属性map
		Map<Integer, XAttribute> tmp = new HashMap<>();
		//遍历全部属性
		Iterator<XAttribute> iterator = attribute.attributeTable.values().iterator();
		while (iterator.hasNext()) {
			XAttribute xAttribute = (XAttribute) iterator.next();
			//new一个属性副本
			XAttribute xaLook = new XAttribute(xAttribute.enumType,xAttribute.enable);
			//把属性的全部系统值copy
			Iterator<Entry<Integer, SystemAttribute>> iterator2 = xAttribute.attributes.entrySet().iterator();
			while (iterator2.hasNext()) {
				//每个系统值都拷贝一份
				Entry<Integer, SystemAttribute> entry = iterator2.next();
				SystemAttribute look = new SystemAttribute(entry.getValue().enable,entry.getValue().value);
				xaLook.attributes.put(entry.getKey(), look);
			}
			tmp.put(xAttribute.enumType, xAttribute);
		}
	}
	
	/**
	 * 返回指定属性缓冲值
	 * @param id
	 * @return
	 */
	public long getAttribute(int id){
		switch (id) {
		<#list fields as field>    
		case ${field.id}:
			return attribute.${field.formName};
		</#list>
		default:
			break;
		}
		return 0l;
	}
	
	/**
	 * 获得这个属性的系统属性
	 * @param id
	 * @param systemId
	 * @return
	 */
	public long getSystemAttribute(int id,int systemId){
		XAttribute xAttribute = attribute.attributeTable.get(id);
		if(xAttribute==null||!xAttribute.enable){
			return 0l;
		}
		SystemAttribute sa = xAttribute.attributes.get(systemId);
		if(sa == null||!sa.enable){
			return 0l;
		}
		return sa.value;
	}
	
	/**
	 * 计算本条属性返回副本    如果停用 返回0  
	 * @param id
	 * @return
	 */
	public long toAttribute(int id){
		XAttribute xAttribute = attribute.attributeTable.get(id);
		if(xAttribute==null||!xAttribute.enable){
			return 0l;
		}
		return xAttribute.toAttribute();
	}
	
	/**
	 * 返回本条属性实际的值,无视停用 该值是现去计算的,相对耗时 
	 * @param id
	 * @return 没有返回0
	 */
	public long toAttributeReality(int id){
		XAttribute xAttribute = attribute.attributeTable.get(id);
		if(xAttribute==null){
			return 0l;
		}
		return xAttribute.toAttribute();
	}
	
	/**
	 * 返回本条属性实际的值 速度很快 因为指定了某个系统
	 * @param id
	 * @return 没有返回0
	 */
	public long toAttributeReality(int id,int systemId){
		XAttribute xAttribute = attribute.attributeTable.get(id);
		if(xAttribute==null){
			return 0l;
		}
		SystemAttribute systemAttribute = xAttribute.attributes.get(systemId);
		if(systemAttribute==null){
			return 0l;
		}
		return systemAttribute.value;
	}
	
	
	/**
	 * 增加某条属性的值   成功添加后 会重新计算本条属性 并且 会重置缓存值
	 * @param player
	 * @param id
	 * @param systemId
	 * @param value
	 * @param factory
	 * @return
	 */
	public boolean increaseAttribute(Player player,int id,int systemId,long value,LogFactory factory){
		if(value<=0)return false;
		XAttribute xAttribute = attribute.attributeTable.get(id);
		if(xAttribute==null||!xAttribute.enable){
			return false;
		}
		SystemAttribute sa = xAttribute.attributes.get(systemId);
		if(sa == null){
			sa = new SystemAttribute(true, systemId);
		}else if(!sa.enable){
			return false;
		}
		sa.value +=value;
		return set(id, xAttribute.toAttribute());
	}
	
	/**
	 * 扣掉本
	 * @param player
	 * @param id
	 * @param systemId
	 * @param value
	 * @param factory
	 * @return
	 */
	public boolean decrementAttribute(Player player,int id,int systemId,long value,LogFactory factory){
		if(value<=0)return false;
		XAttribute xAttribute = attribute.attributeTable.get(id);
		if(xAttribute==null||!xAttribute.enable){
			return false;
		}
		SystemAttribute sa = xAttribute.attributes.get(systemId);
		if(sa == null||value > sa.value){
			return false;
		}
		long v = sa.value;
		v -=value;
		if(v<0){
			return false;
		}
		sa.value = v;
		return set(id, xAttribute.toAttribute());
	}
	
	private boolean set(int id,long value){
		switch (id) {
		<#list fields as field>   
		case ${field.id}:
			attribute.${field.formName}=value;
			return true;
		</#list>
		default:
			return false;
		}
	}
	
	public IPlayerAttribute getAttribute() {
		return attribute;
	}
}